 error_messages_for 'project' 
 f.text_field :name, :required => true, :size => 60 
 f.text_area :description, :rows => 8, :class => 'wiki-edit' 
 f.text_field :identifier, :required => true, :size => 60, :disabled => @project.identifier_frozen?, :maxlength => Project::IDENTIFIER_MAX_LENGTH 
 unless @project.identifier_frozen? 
 l(:text_length_between, :min => 1, :max => Project::IDENTIFIER_MAX_LENGTH) 
 l(:text_project_identifier_info).html_safe 
 end 
 f.text_field :homepage, :size => 60 
 f.check_box :is_public 
 unless @project.allowed_parents.compact.empty? 
 label(:project, :parent_id, l(:field_parent)) 
 parent_project_select_tag(@project) 
 end 
 if @project.safe_attribute? 'inherit_members' 
 f.check_box :inherit_members 
 end 
 wikitoolbar_for 'project_description' 
 @project.custom_field_values.each do |value| 
 custom_field_tag_with_label :project, value 
 end 
 call_hook(:view_projects_form, :project => @project, :form => f) 
 if @project.safe_attribute?('enabled_module_names') 
 toggle_checkboxes_link('#project_modules input[type="checkbox"]') 
 l(:label_module_plural) 
 Redmine::AccessControl.available_project_modules.each do |m| 
 check_box_tag 'project[enabled_module_names][]', m, @project.module_enabled?(m), :id => "project_enabled_module_names_#{m}" 
 l_or_humanize(m, :prefix => "project_module_") 
 end 
 hidden_field_tag 'project[enabled_module_names][]', '' 
 end 
 unless @project.identifier_frozen? 
 content_for :header_tags do 
 javascript_include_tag 'project_identifier' 
 end 
 end 
 if !User.current.admin? && @project.inherit_members? && @project.parent && User.current.member_of?(@project.parent) 
 javascript_tag do 
 escape_javascript(l(:text_own_membership_delete_confirmation)) 
 end 
 end 
