SET IRMethod, name = arrange_for_user
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:30, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 47)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("confidence DESC")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call_1o(%self, %v_3 ;n:order, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %v_3[2.7 ] ) 
		%v_5 = call(%v_4, :'parent_comment_id' ;n:group_by, t:NO, cl:true(org.jruby.ir.operands.Symbol))		--org.jruby.ir.instructions.CallInstr(	%v_4[2.8 ] ) 
		parents = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[2.9 ] ) 
		line_num(;n: 50)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		ordered = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.12 ] ) 
		line_num(;n: 52)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = copy(Array:[nil])		--org.jruby.ir.instructions.CopyInstr(	) 
		ancestors = copy(%v_7)		--org.jruby.ir.instructions.CopyInstr(	%v_7[2.15 ] ) 
		line_num(;n: 53)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_1o(%v_5, nil ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.9 ] ) 
		subtree = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[2.18 ] ) 
		line_num(;n: 55)		--org.jruby.ir.instructions.LineNumberInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:4, 28, 
	Instructions:
		b_false(LBL_0:102, subtree)		--org.jruby.ir.instructions.BFalseInstr(	subtree[2.19 25.2 23.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  4 8 10 12 14 16		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:5, 25, 
	Instructions:
		thread_poll()		--org.jruby.ir.instructions.ThreadPollInstr(	) 
		line_num(;n: 56)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(subtree ;n:shift, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	subtree[2.19 25.2 23.4 ] ) 
		node = copy(%v_10)		--org.jruby.ir.instructions.CopyInstr(	%v_10[4.2 ] ) 
		b_false(LBL_1:94, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[4.2 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16		
	outgoing edges:6, 7, 
	Instructions:
		line_num(;n: 57)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(node ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	node[4.3 ] ) 
		%v_12 = call_1o(parents, %v_11 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	parents[2.10 ] %v_11[5.1 ] ) 
		children = copy(%v_12)		--org.jruby.ir.instructions.CopyInstr(	%v_12[5.2 ] ) 
		line_num(;n: 62)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = call_0o(node ;n:is_gone?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	node[5.1 4.3 ] ) 
		%v_14 = call_0o(%v_13 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_13[5.5 ] ) 
		b_false(LBL_3:40, %v_14)		--org.jruby.ir.instructions.BFalseInstr(	%v_14[5.6 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:18, 
	Instructions:
		%v_15 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_4:68)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:8, 9, 
	Instructions:
		line_num(;n: 64)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		b_false(LBL_5:45, children)		--org.jruby.ir.instructions.BFalseInstr(	children[5.3 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  4 8 10 12 14 16 19 23		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:17, 
	Instructions:
		%v_16 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_6:66)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  4 8 10 12 14 16 19 24		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:10, 13, 
	Instructions:
		line_num(;n: 66)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_9:57, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  4 8 10 12 14 16 19 25		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:11, 12, 
	Instructions:
		%v_18 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		b_true(LBL_10:55, %v_18)		--org.jruby.ir.instructions.BTrueInstr(	%v_18[10.0 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  4 8 10 12 14 16 19 25		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:12, 
	Instructions:
		%v_19 = call_0o(node ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	node[4.3 ] ) 
		%v_20 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_21 = call_1o(%v_19, %v_20 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_19[11.0 ] %v_20[11.1 ] ) 
		%v_18 = copy(%v_21)		--org.jruby.ir.instructions.CopyInstr(	%v_21[11.2 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  4 8 10 12 14 16 19 24		
	Vars Live on Exit:  4 8 10 12 14 16 19 25		
	outgoing edges:13, 
	Instructions:
		%v_17 = copy(%v_18)		--org.jruby.ir.instructions.CopyInstr(	%v_18[11.3 10.0 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16 19 24		
	outgoing edges:14, 15, 
	Instructions:
		b_false(LBL_7:61, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[12.0 9.1 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  4 8 10 12 14 16 19 23		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:17, 
	Instructions:
		%v_22 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = copy(%v_22)		--org.jruby.ir.instructions.CopyInstr(	%v_22[14.0 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:27, 
	Instructions:
		line_num(;n: 70)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		jump(_ITER_END_0:100)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 17:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16 19 23		
	outgoing edges:18, 
	Instructions:
		%v_15 = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[8.0 14.1 ] ) 
PRINT info for BB 18:
	Vars Live on Entry:  4 8 10 12 14 16 19		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:19, 20, 
	Instructions:
		line_num(;n: 73)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_23 = call_0o(ancestors ;n:length, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	ancestors[2.16 ] ) 
		attr_assign(node, %v_23 ;n:indent_level=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	node[4.3 ] %v_23[18.1 ] ) #<node>#	-- [PUT:node].indent_level 
		line_num(;n: 74)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_24 = call_1o(ordered, node ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	ordered[2.13 ] node[18.2 4.3 ] ) 
		line_num(;n: 77)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		b_false(LBL_11:78, children)		--org.jruby.ir.instructions.BFalseInstr(	children[5.3 ] ) 
PRINT info for BB 19:
	Vars Live on Entry:  4 8 10 12 14 19		
	Vars Live on Exit:  4 8 10 12 14 16 19		
	outgoing edges:22, 23, 
	Instructions:
		%v_25 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 81)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_26 = call_0o(node ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	node[18.2 4.3 ] ) 
		b_false(LBL_13:85, %v_26)		--org.jruby.ir.instructions.BFalseInstr(	%v_26[19.2 ] ) 
PRINT info for BB 20:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:27, 
	Instructions:
		jump(_ITER_END_0:100)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 22:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:27, 
	Instructions:
		jump(_ITER_END_0:100)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 23:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14 19		
	outgoing edges:26, 
	Instructions:
		%v_27 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 84)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_28 = call_1o(ancestors, subtree ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	ancestors[2.16 ] subtree[2.19 25.2 ] ) 
		line_num(;n: 85)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		subtree = copy(children)		--org.jruby.ir.instructions.CopyInstr(	children[5.3 ] ) 
		%v_29 = copy(children)		--org.jruby.ir.instructions.CopyInstr(	children[5.3 ] ) 
		jump(LBL_2:99)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 25:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12		
	outgoing edges:26, 
	Instructions:
		line_num(;n: 88)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_30 = call_0o(ancestors ;n:pop, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	ancestors[2.16 ] ) 
		subtree = copy(%v_30)		--org.jruby.ir.instructions.CopyInstr(	%v_30[25.1 ] ) 
		%v_29 = copy(%v_30)		--org.jruby.ir.instructions.CopyInstr(	%v_30[25.1 ] ) 
PRINT info for BB 26:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:27, 
	Instructions:
PRINT info for BB 27:
	Vars Live on Entry:  4 8 10 12 14		
	Vars Live on Exit:  4 8 10 12 14		
	outgoing edges:3, 
	Instructions:
		jump(_LOOP_BEGIN_0:22)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 28:
	Vars Live on Entry: 
	Vars Live on Exit:  10		
	outgoing edges:30, 
	Instructions:
		%v_9 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 92)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(ordered)		--org.jruby.ir.instructions.ReturnInstr(	ordered[2.13 ] ) 
PRINT info for BB 30:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = regenerate_markdown
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 96)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_3, false ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_3[2.6 ] ) #<%v_3>#	-- [PUT:%v_3].record_timestamps 
		line_num(;n: 98)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:all, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.9 ] ) 
		%v_6 = call(%v_5, %self:CLOSURE regenerate_markdown_CLOSURE_1[./lobsters/models/comment.rb:98] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_5[2.10 ] %self[2.0 ] ) 
CLOSURE BEGIN: c[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		c = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 99)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(c ;n:generated_markeddown_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[2.2 ] ) 
		attr_assign(c, %cl_1_3 ;n:markeddown_comment=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	c[3.1 2.2 ] %cl_1_3[3.1 ] ) #<c>#	-- [PUT:c].markeddown_comment 
		line_num(;n: 100)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_4 = copy({:'validate'=>false})		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_5 = call_1o(c, %cl_1_4 ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	c[3.1 3.2 2.2 ] %cl_1_4[3.4 ] ) 
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[3.5 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_7 = runtime_helper(%cl_1_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_6[4.0 ] ) 
		return(%cl_1_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 103)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_7, true ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_7[2.13 ] ) #<%v_7>#	-- [PUT:%v_7].record_timestamps 
		line_num(;n: 106)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = score_sql
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 109)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("(CAST(upvotes AS ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:votes_cast_type, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = copy(") - ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = build_compound_string(%v_3, #{%v_5}, %v_6)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_5[2.8 ] %v_6[2.9 ] ) 
		%v_8 = copy("CAST(downvotes AS ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 110)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:votes_cast_type, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.13 ] ) 
		%v_11 = copy("))")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = build_compound_string(%v_8, #{%v_10}, %v_11)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_8[2.11 ] %v_10[2.14 ] %v_11[2.15 ] ) 
		%v_13 = call_1o(%v_7, %v_12 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[2.10 ] %v_12[2.16 ] ) 
		return(%v_13)		--org.jruby.ir.instructions.ReturnInstr(	%v_13[2.17 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = as_json
PRINT info for BB 1:
	Vars Live on Entry:  4 22 24		
	Vars Live on Exit:  4 22 24		
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 22 24		
	Vars Live on Exit:  4 22 24		
	outgoing edges:4, 5, 9, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 1, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		options = recv_opt_arg(;index:0, req: 0, pre: 0)		--org.jruby.ir.instructions.ReceiveOptArgInstr(	) 
		bne(LBL_0:12, options, %undefined)		--org.jruby.ir.instructions.BNEInstr(	options[2.5 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 22 24		
	Vars Live on Exit:  0 22 24		
	outgoing edges:5, 
	Instructions:
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		options = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[4.0 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 13 22 24		
	Vars Live on Exit:  0 4 22 24		
	outgoing edges:6, 7, 9, 
	Instructions:
		line_num(;n: 114)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[5.1 ] ) 
		%v_6 = call_0o(%v_5 ;n:root_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[5.2 ] ) 
		%v_7 = copy("c/")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 116)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_9 = build_compound_string(%v_7, #{%v_8})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_7[5.4 ] %v_8[5.6 ] ) 
		%v_10 = call_1o(%v_6, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[5.3 ] %v_9[5.7 ] ) 
		%v_11 = copy({:'short_id_url'=>%v_10})		--org.jruby.ir.instructions.CopyInstr(	%v_10[5.8 ] ) 
		line_num(;n: 124)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = call_0o(%self ;n:is_gone?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[5.6 2.0 ] ) 
		b_false(LBL_1:31, %v_12)		--org.jruby.ir.instructions.BFalseInstr(	%v_12[5.11 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 13 18 22 24		
	Vars Live on Exit:  0 4 13 22 24		
	outgoing edges:8, 9, 
	Instructions:
		%v_13 = copy("<em>")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = call_0o(%self ;n:gone_text, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_15 = copy("</em>")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = build_compound_string(%v_13, #{%v_14}, %v_15)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_13[6.0 ] %v_14[6.1 ] %v_15[6.2 ] ) 
		jump(LBL_2:33)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 4 13 18		
	Vars Live on Exit:  0 4 13		
	outgoing edges:8, 
	Instructions:
		%v_16 = copy(:'markeddown_comment')		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  4 22 24		
	Vars Live on Exit:  0 4 13 18		
	outgoing edges:9, 11, 
	Instructions:
		%v_17 = copy({:'comment'=>%v_16})		--org.jruby.ir.instructions.CopyInstr(	%v_16[7.0 6.3 ] ) 
		%v_18 = copy({:'commenting_user'=>:'user'})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_19 = copy(Array:[:'short_id', %v_11, :'created_at', :'updated_at', :'is_deleted', :'is_moderated', :'score', :'upvotes', :'downvotes', %v_17, :'url', :'indent_level', %v_18])		--org.jruby.ir.instructions.CopyInstr(	%v_11[5.9 ] %v_17[8.0 ] %v_18[8.1 ] ) 
		h = copy(%v_19)		--org.jruby.ir.instructions.CopyInstr(	%v_19[8.2 ] ) 
		line_num(;n: 131)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_20 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		js = copy(%v_20)		--org.jruby.ir.instructions.CopyInstr(	%v_20[8.5 ] ) 
		line_num(;n: 132)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_21 = call(%v_19, %self:CLOSURE as_json_CLOSURE_1[./lobsters/models/comment.rb:132] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_19[8.2 ] %self[2.0 ] ) 
CLOSURE BEGIN: k[] %self[2.0,] js[8.6,] 
PRINT info for BB 1:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:15, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  8		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		k = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:4, 5, 13, 
	Instructions:
		line_num(;n: 133)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = search_const(scope<2> ;name: Symbol, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_4 = call_1o(k, %cl_1_3 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_1_3[3.1 ] ) 
		b_false(CL1_LBL_0:16, %cl_1_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 7 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:12, 13, 
	Instructions:
		line_num(;n: 134)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_5 = call_1o(%self, k ;n:send, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] k[2.2 ] ) 
		attr_assign(js, k, %cl_1_5 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] k[2.2 ] %cl_1_5[4.1 ] ) #<js>#	-- [PUT:js].[] 
		jump(CL1_LBL_1:49)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:6, 10, 13, 
	Instructions:
		line_num(;n: 135)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_6 = search_const(scope<2> ;name: Hash, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_7 = call_1o(k, %cl_1_6 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_1_6[5.1 ] ) 
		b_false(CL1_LBL_2:45, %cl_1_7)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_7[5.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:7, 8, 13, 
	Instructions:
		line_num(;n: 136)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_8 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_1_9 = call_0o(%cl_1_8 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_8[6.1 ] ) 
		%cl_1_10 = search_const(scope<2> ;name: Symbol, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_11 = call_1o(%cl_1_9, %cl_1_10 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_9[6.2 ] %cl_1_10[6.3 ] ) 
		b_false(CL1_LBL_4:35, %cl_1_11)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_11[6.4 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  0 2 8		
	outgoing edges:9, 13, 
	Instructions:
		line_num(;n: 137)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_12 = call_0o(k ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_1_13 = call_0o(%cl_1_12 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_12[7.1 ] ) 
		%cl_1_14 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[7.1 2.2 ] ) 
		%cl_1_15 = call_0o(%cl_1_14 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_14[7.3 ] ) 
		%cl_1_16 = call_1o(%self, %cl_1_15 ;n:send, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_1_15[7.4 ] ) 
		attr_assign(js, %cl_1_13, %cl_1_16 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] %cl_1_13[7.2 ] %cl_1_16[7.5 ] ) #<js>#	-- [PUT:js].[] 
		jump(CL1_LBL_5:43)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8		
	outgoing edges:9, 13, 
	Instructions:
		line_num(;n: 139)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_17 = call_0o(k ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_1_18 = call_0o(%cl_1_17 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_17[8.1 ] ) 
		%cl_1_19 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[8.1 2.2 ] ) 
		%cl_1_20 = call_0o(%cl_1_19 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_19[8.3 ] ) 
		attr_assign(js, %cl_1_18, %cl_1_20 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] %cl_1_18[8.2 ] %cl_1_20[8.4 ] ) #<js>#	-- [PUT:js].[] 
		%cl_1_16 = copy(%cl_1_20)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_20[8.4 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8 19		
	outgoing edges:11, 
	Instructions:
		jump(CL1_LBL_3:47)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8		
	outgoing edges:11, 
	Instructions:
		%cl_1_16 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8 19		
	outgoing edges:15, 
	Instructions:
		return(%cl_1_16)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_16[10.0 8.6 7.5 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 7 8		
	outgoing edges:15, 
	Instructions:
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:15, 
	Instructions:
		%cl_1_21 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_22 = runtime_helper(%cl_1_21 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_21[13.0 ] ) 
		return(%cl_1_22)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_22[13.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 144)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(js)		--org.jruby.ir.instructions.ReturnInstr(	js[8.6 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  4 22 24		
	Vars Live on Exit:  4 22 24		
	outgoing edges:11, 
	Instructions:
		%v_22 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_23 = runtime_helper(%v_22 ;method: HANDLE_NONLOCAL_RETURN)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_22[9.0 ] ) 
		return(%v_23)		--org.jruby.ir.instructions.ReturnInstr(	%v_23[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  4 22 24		
	Vars Live on Exit:  4 22 24		
	outgoing edges:
	Instructions:

SET IRMethod, name = assign_initial_confidence
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 148)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:calculated_confidence, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		attr_assign(%self, %v_3 ;n:confidence=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.6 ] %v_3[2.6 ] ) #<%self>#	-- [PUT:%self].confidence 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = assign_short_id_and_upvote
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 152)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: ShortId, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:generate, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		attr_assign(%self, %v_6 ;n:short_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.7 ] %v_6[2.9 ] ) #<%self>#	-- [PUT:%self].short_id 
		line_num(;n: 153)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		put_field(%self, Fixnum:1 ;name: @upvotes)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 ] ) #<%self>#	-- [PUT:%self].upvotes 
		return(Fixnum:1)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = assign_thread_id
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 157)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:parent_comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		b_false(LBL_0:15, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 158)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(%self ;n:parent_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = call_0o(%v_5 ;n:thread_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[3.1 ] ) 
		attr_assign(%self, %v_6 ;n:thread_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[3.1 2.0 ] %v_6[3.2 ] ) #<%self>#	-- [PUT:%self].thread_id 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 160)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = search_const(scope<1> ;name: Keystore, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_8 = copy("thread_id")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = call_1o(%v_7, %v_8 ;n:incremented_value_for, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[4.1 ] %v_8[4.2 ] ) 
		attr_assign(%self, %v_9 ;n:thread_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_9[4.3 ] ) #<%self>#	-- [PUT:%self].thread_id 
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[4.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = calculated_confidence
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 8		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 167)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @upvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].upvotes 
		%v_4 = get_field(%self ;name: @downvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].downvotes 
		%v_5 = call_1o(%v_3, %v_4 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:to_f, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		n = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.9 ] ) 
		line_num(;n: 168)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_1d(%v_6, Float:0.0 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFloatArgNoBlockCallInstr(	%v_6[2.9 ] ) 
		b_false(LBL_0:17, %v_7)		--org.jruby.ir.instructions.BFalseInstr(	%v_7[2.12 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 
	Instructions:
		line_num(;n: 169)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(Fixnum:0)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0 8		
	outgoing edges:7, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 172)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		z = copy(Float:1.281551565545)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 173)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = get_field(%self ;name: @upvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].upvotes 
		%v_10 = call_0o(%v_9 ;n:to_f, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[4.4 ] ) 
		%v_11 = call_1o(%v_10, n ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_10[4.5 ] n[2.10 ] ) 
		p = copy(%v_11)		--org.jruby.ir.instructions.CopyInstr(	%v_11[4.6 ] ) 
		line_num(;n: 175)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = call_1o(Float:2.0, n ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	n[2.10 ] ) 
		%v_13 = call_1o(%v_12, z ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[4.9 ] z[4.2 ] ) 
		%v_14 = call_1o(%v_13, z ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_13[4.10 ] z[4.2 ] ) 
		%v_15 = call_1o(Fixnum:1, %v_14 ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_14[4.11 ] ) 
		%v_16 = call_1o(p, %v_15 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	p[4.7 ] %v_15[4.12 ] ) 
		left = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[4.13 ] ) 
		line_num(;n: 176)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = search_const(scope<1> ;name: Math, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_18 = call_1o(Float:1.0, p ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	p[4.7 ] ) 
		%v_19 = call_1o(%v_18, n ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_18[4.17 ] n[2.10 ] ) 
		%v_20 = call_1o(p, %v_19 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	p[4.7 ] %v_19[4.18 ] ) 
		%v_21 = call_1o(Float:4.0, n ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	n[2.10 ] ) 
		%v_22 = call_1o(%v_21, n ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_21[4.20 ] n[2.10 ] ) 
		%v_23 = call_1o(z, %v_22 ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	z[4.2 ] %v_22[4.21 ] ) 
		%v_24 = call_1o(z, %v_23 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	z[4.2 ] %v_23[4.22 ] ) 
		%v_25 = call_1o(%v_20, %v_24 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_20[4.19 ] %v_24[4.23 ] ) 
		%v_26 = call_1o(%v_17, %v_25 ;n:sqrt, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_17[4.16 ] %v_25[4.24 ] ) 
		%v_27 = call_1o(z, %v_26 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	z[4.2 ] %v_26[4.25 ] ) 
		right = copy(%v_27)		--org.jruby.ir.instructions.CopyInstr(	%v_27[4.26 ] ) 
		line_num(;n: 177)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_28 = call_1o(Float:1.0, n ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	n[2.10 ] ) 
		%v_29 = call_1o(%v_28, z ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_28[4.29 ] z[4.2 ] ) 
		%v_30 = call_1o(%v_29, z ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_29[4.30 ] z[4.2 ] ) 
		%v_31 = call_1o(Float:1.0, %v_30 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_30[4.31 ] ) 
		under = copy(%v_31)		--org.jruby.ir.instructions.CopyInstr(	%v_31[4.32 ] ) 
		line_num(;n: 179)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_32 = call_1o(left, right ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	left[4.14 ] right[4.27 ] ) 
		%v_33 = call_1o(%v_32, under ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_32[4.35 ] under[4.33 ] ) 
		return(%v_33)		--org.jruby.ir.instructions.ReturnInstr(	%v_33[4.36 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = comment=
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		com = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 183)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(com ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	com[2.5 ] ) 
		%v_4 = call_0o(%v_3 ;n:rstrip, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.7 ] ) 
		attr_assign(%self, :'comment', %v_4 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	%self[2.0 ] %v_4[2.8 ] ) #<%self>#	-- [PUT:%self].[] 
		line_num(;n: 184)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(%self ;n:generated_markeddown_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.9 ] ) 
		attr_assign(%self, %v_5 ;n:markeddown_comment=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.9 2.11 ] %v_5[2.11 ] ) #<%self>#	-- [PUT:%self].markeddown_comment 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.11 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = delete_for_user
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 6		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 188)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_3, false ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_3[2.7 ] ) #<%v_3>#	-- [PUT:%v_3].record_timestamps 
		line_num(;n: 190)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, true ;n:is_deleted=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] ) #<%self>#	-- [PUT:%self].is_deleted 
		line_num(;n: 192)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		b_false(LBL_2:19, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.12 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 6		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_5 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_6 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.10 ] ) 
		%v_7 = call_1o(%v_5, %v_6 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[3.0 ] %v_6[3.1 ] %v_5[3.0 ] ) #<%v_5># 
		%v_4 = copy(%v_7)		--org.jruby.ir.instructions.CopyInstr(	%v_7[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4 6		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:39, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[3.3 2.12 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 193)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, true ;n:is_moderated=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.10 ] ) #<%self>#	-- [PUT:%self].is_moderated 
		line_num(;n: 195)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = search_const(scope<1> ;name: Moderation, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_9 = call_0o(%v_8 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[5.3 ] ) 
		m = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[5.4 ] ) 
		line_num(;n: 196)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[5.1 2.0 2.10 ] ) 
		attr_assign(m, %v_10 ;n:comment_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[5.5 ] %v_10[5.7 ] ) #<m>#	-- [PUT:m].comment_id 
		line_num(;n: 197)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		attr_assign(m, %v_11 ;n:moderator_user_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[5.5 5.8 ] %v_11[5.10 ] ) #<m>#	-- [PUT:m].moderator_user_id 
		line_num(;n: 198)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = copy("deleted comment")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(m, %v_12 ;n:action=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[5.5 5.8 5.11 ] %v_12[5.13 ] ) #<m>#	-- [PUT:m].action 
		line_num(;n: 199)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = call_0o(m ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	m[5.5 5.8 5.11 5.14 ] ) 
		jump(LBL_1:41)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		%v_13 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 202)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy({:'validate'=>false})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call_1o(%self, %v_14 ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[5.1 2.0 2.10 ] %v_14[7.1 ] ) 
		line_num(;n: 203)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_16, true ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_16[7.4 ] ) #<%v_16>#	-- [PUT:%v_16].record_timestamps 
		line_num(;n: 205)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[7.2 5.1 2.0 2.10 ] ) 
		%v_18 = call_0o(%v_17 ;n:update_comments_count!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_17[7.7 ] ) 
		return(%v_18)		--org.jruby.ir.instructions.ReturnInstr(	%v_18[7.8 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = deliver_mention_notifications
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 209)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:plaintext_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = copy(RE:|\B\@([\w\-]+)|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_1o(%v_3, RE:|\B\@([\w\-]+)|RegexpOptions(kcode: NONE, kcodeDefault) ;n:scan, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_6 = call_0o(%v_5 ;n:flatten, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		%v_7 = call_0o(%v_6 ;n:uniq, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[2.9 ] ) 
		%v_8 = call(%v_7, %self:CLOSURE deliver_mention_notifications_CLOSURE_1[./lobsters/models/comment.rb:209] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_7[2.10 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: mention[] u[] %self[2.0,2.6,] e[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:27, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		mention = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 2		
	outgoing edges:4, 23, 25, 
	Instructions:
		line_num(;n: 210)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = search_const(scope<2> ;name: User, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_4 = copy({:'username'=>mention})		--org.jruby.ir.instructions.CopyInstr(	mention[2.2 ] ) 
		%cl_1_5 = call_1o(%cl_1_3, %cl_1_4 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] %cl_1_4[3.2 ] ) 
		%cl_1_6 = call_0o(%cl_1_5 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_5[3.3 ] ) 
		u = copy(%cl_1_6)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_6[3.4 ] ) 
		b_false(CL1_LBL_0:113, %cl_1_6)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_6[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:5, 6, 25, 
	Instructions:
		line_num(;n: 211)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_7 = call_0o(u ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.5 ] ) 
		%cl_1_8 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%cl_1_9 = call_0o(%cl_1_8 ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_8[4.2 ] ) 
		%cl_1_10 = call_1o(%cl_1_7, %cl_1_9 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_7[4.1 ] %cl_1_9[4.3 ] ) 
		b_false(CL1_LBL_2:24, %cl_1_10)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_10[4.4 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:25, 27, 
	Instructions:
		line_num(;n: 212)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		thread_poll()		--org.jruby.ir.instructions.ThreadPollInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:7, 
	Instructions:
		%cl_1_11 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:8, 18, 25, 
	Instructions:
		line_num(;n: 215)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_12 = call_0o(u ;n:email_mentions?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.5 ] ) 
		b_false(CL1_LBL_4:78, %cl_1_12)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_12[7.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 9 16		
	Vars Live on Exit:  0 9		
	outgoing edges:10, 
	Instructions:
		line_num(;n: 216)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_13 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  0 9 16		
	Vars Live on Exit:  0 9 16		
	outgoing edges:11, 12, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 217)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_16 = search_const(scope<2> ;name: EmailReply, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_17 = call(%cl_1_16, %self, u ;n:mention, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%cl_1_16[10.2 ] %self[2.0 ] u[3.5 ] ) 
		%cl_1_18 = call_0o(%cl_1_17 ;n:deliver, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_17[10.3 ] ) 
		%cl_1_15 = copy(%cl_1_18)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_18[10.4 ] ) 
		put_global_var($!, %cl_1_13)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%cl_1_13[8.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:17, 
	Instructions:
		jump(CL1_LBL_8:76)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry:  0 9 16 21		
	Vars Live on Exit:  0 9 16		
	outgoing edges:13, 14, 16, 
	Instructions:
		%cl_1_19 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%cl_1_20 = rescue_eqq(StandardError, %cl_1_19)		--org.jruby.ir.instructions.RescueEQQInstr(	%cl_1_19[12.0 ] ) 
		b_true(CL1_LBL_14:54, %cl_1_20)		--org.jruby.ir.instructions.BTrueInstr(	%cl_1_20[12.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  16		
	Vars Live on Exit:  16 21		
	outgoing edges:16, 27, 
	Instructions:
		throw(%cl_1_19)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%cl_1_19[12.0 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  0 9 16		
	Vars Live on Exit:  0 9 16		
	outgoing edges:15, 16, 
	Instructions:
		%cl_1_21 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
		e = copy(%cl_1_21)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_21[14.0 ] ) 
		line_num(;n: 219)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_22 = search_const(scope<2> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_23 = call_0o(%cl_1_22 ;n:logger, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_22[14.3 ] ) 
		%cl_1_24 = copy("error e-mailing ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_25 = call_0o(u ;n:email, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.5 ] ) 
		%cl_1_26 = copy(": ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_27 = build_compound_string(%cl_1_24, #{%cl_1_25}, %cl_1_26, #{e})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_24[14.5 ] %cl_1_25[14.6 ] %cl_1_26[14.7 ] e[14.1 ] ) 
		%cl_1_28 = call_1o(%cl_1_23, %cl_1_27 ;n:error, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_23[14.4 ] %cl_1_27[14.8 ] ) 
		%cl_1_15 = copy(%cl_1_28)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_28[14.9 ] ) 
		put_global_var($!, %cl_1_13)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%cl_1_13[8.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:17, 
	Instructions:
		jump(CL1_LBL_8:76)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 16:
	Vars Live on Entry: 
	Vars Live on Exit:  16		
	outgoing edges:25, 27, 
	Instructions:
		%cl_1_29 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_30 = runtime_helper(%cl_1_29, %cl_1_13 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_29[16.0 ] %cl_1_13[8.1 ] ) 
		throw(%cl_1_29)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%cl_1_29[16.0 ] ) 
PRINT info for BB 17:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:19, 
	Instructions:
		jump(CL1_LBL_5:80)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 18:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:19, 
	Instructions:
		%cl_1_15 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 19:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:20, 21, 25, 
	Instructions:
		line_num(;n: 223)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_31 = call_0o(u ;n:pushover_mentions?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.5 ] ) 
		b_false(CL1_LBL_16:109, %cl_1_31)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_31[19.1 ] ) 
PRINT info for BB 20:
	Vars Live on Entry:  54		
	Vars Live on Exit:  0 9		
	outgoing edges:22, 25, 
	Instructions:
		line_num(;n: 224)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		line_num(;n: 225)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_32 = search_const(scope<2> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_33 = call_0o(%cl_1_32 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_32[20.2 ] ) 
		%cl_1_34 = call_0o(%cl_1_33 ;n:name, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_33[20.3 ] ) 
		%cl_1_35 = copy(" mention by ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_36 = build_compound_string(#{%cl_1_34}, %cl_1_35)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_34[20.4 ] %cl_1_35[20.5 ] ) 
		line_num(;n: 226)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_37 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%cl_1_38 = call_0o(%cl_1_37 ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_37[20.8 ] ) 
		%cl_1_39 = copy(" on ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_40 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 2.0 ] ) 
		%cl_1_41 = call_0o(%cl_1_40 ;n:title, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_40[20.11 ] ) 
		%cl_1_42 = build_compound_string(#{%cl_1_38}, %cl_1_39, #{%cl_1_41})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_38[20.9 ] %cl_1_39[20.10 ] %cl_1_41[20.12 ] ) 
		%cl_1_43 = call_1o(%cl_1_36, %cl_1_42 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_36[20.6 ] %cl_1_42[20.13 ] ) 
		%cl_1_44 = call_0o(%self ;n:plaintext_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 2.0 ] ) 
		%cl_1_45 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 20.15 2.0 ] ) 
		%cl_1_46 = copy("Reply to ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 229)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_47 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 20.15 20.16 2.0 ] ) 
		%cl_1_48 = call_0o(%cl_1_47 ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_47[20.19 ] ) 
		%cl_1_49 = build_compound_string(%cl_1_46, #{%cl_1_48})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_46[20.17 ] %cl_1_48[20.20 ] ) 
		%cl_1_50 = copy({:'title'=>%cl_1_43, :'message'=>%cl_1_44, :'url'=>%cl_1_45, :'url_title'=>%cl_1_49})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_43[20.14 ] %cl_1_44[20.15 ] %cl_1_45[20.16 ] %cl_1_49[20.21 ] ) 
		%cl_1_51 = call_1o(u, %cl_1_50 ;n:pushover!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	u[3.5 ] %cl_1_50[20.22 ] ) 
		jump(CL1_LBL_17:111)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 21:
	Vars Live on Entry:  54		
	Vars Live on Exit: 
	outgoing edges:22, 
	Instructions:
		%cl_1_51 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 22:
	Vars Live on Entry: 
	Vars Live on Exit:  54		
	outgoing edges:27, 
	Instructions:
		return(%cl_1_51)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_51[21.0 20.23 ] ) 
PRINT info for BB 23:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:27, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 25:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:27, 
	Instructions:
		%cl_1_52 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_53 = runtime_helper(%cl_1_52 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_52[25.0 ] ) 
		return(%cl_1_53)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_53[25.1 ] ) 
PRINT info for BB 27:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[2.11 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = deliver_reply_notifications
PRINT info for BB 1:
	Vars Live on Entry:  7		
	Vars Live on Exit:  7		
	outgoing edges:25, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  7		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 237)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:parent_comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_3:13, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(%self ;n:parent_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_1o(%v_4, :'user' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[3.0 ] ) 
		u = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4 7		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_2:20, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.3 2.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 7		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(u ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.2 ] ) 
		%v_7 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = call_0o(%v_7 ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[5.1 ] ) 
		%v_9 = call_1o(%v_6, %v_8 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[5.0 ] %v_8[5.2 ] %v_6[5.0 ] ) #<%v_6># 
		%v_3 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[5.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 4 7		
	outgoing edges:7, 23, 
	Instructions:
		b_false(LBL_0:108, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[5.4 3.3 2.6 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:8, 18, 
	Instructions:
		line_num(;n: 239)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(u ;n:email_replies?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.2 ] ) 
		b_false(LBL_4:73, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[7.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 7 13		
	Vars Live on Exit:  0 7		
	outgoing edges:10, 
	Instructions:
		line_num(;n: 240)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  0 7 13		
	Vars Live on Exit:  0 7 13		
	outgoing edges:11, 12, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 241)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = search_const(scope<1> ;name: EmailReply, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_15 = call(%v_14, %self, u ;n:reply, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_14[10.2 ] %self[2.0 ] u[3.2 ] ) 
		%v_16 = call_0o(%v_15 ;n:deliver, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_15[10.3 ] ) 
		%v_13 = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[10.4 ] ) 
		put_global_var($!, %v_11)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_11[8.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:17, 
	Instructions:
		jump(LBL_8:71)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry:  0 7 13 18		
	Vars Live on Exit:  0 7 13		
	outgoing edges:13, 14, 16, 
	Instructions:
		%v_17 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_18 = rescue_eqq(StandardError, %v_17)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_17[12.0 ] ) 
		b_true(LBL_14:49, %v_18)		--org.jruby.ir.instructions.BTrueInstr(	%v_18[12.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  13		
	Vars Live on Exit:  13 18		
	outgoing edges:16, 25, 
	Instructions:
		throw(%v_17)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_17[12.0 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  0 7 13		
	Vars Live on Exit:  0 7 13		
	outgoing edges:15, 16, 
	Instructions:
		%v_19 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
		e = copy(%v_19)		--org.jruby.ir.instructions.CopyInstr(	%v_19[14.0 ] ) 
		line_num(;n: 243)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_20 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_21 = call_0o(%v_20 ;n:logger, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_20[14.3 ] ) 
		%v_22 = copy("error e-mailing ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_23 = call_0o(u ;n:email, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.2 ] ) 
		%v_24 = copy(": ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_25 = build_compound_string(%v_22, #{%v_23}, %v_24, #{e})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_22[14.5 ] %v_23[14.6 ] %v_24[14.7 ] e[14.1 ] ) 
		%v_26 = call_1o(%v_21, %v_25 ;n:error, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_21[14.4 ] %v_25[14.8 ] ) 
		%v_13 = copy(%v_26)		--org.jruby.ir.instructions.CopyInstr(	%v_26[14.9 ] ) 
		put_global_var($!, %v_11)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_11[8.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:17, 
	Instructions:
		jump(LBL_8:71)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 16:
	Vars Live on Entry: 
	Vars Live on Exit:  13		
	outgoing edges:25, 
	Instructions:
		%v_27 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_28 = runtime_helper(%v_27, %v_11 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_27[16.0 ] %v_11[8.1 ] ) 
		throw(%v_27)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_27[16.0 ] ) 
PRINT info for BB 17:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:19, 
	Instructions:
		jump(LBL_5:75)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 18:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:19, 
	Instructions:
		%v_13 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 19:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:20, 21, 
	Instructions:
		line_num(;n: 247)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_29 = call_0o(u ;n:pushover_replies?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[3.2 ] ) 
		b_false(LBL_16:104, %v_29)		--org.jruby.ir.instructions.BFalseInstr(	%v_29[19.1 ] ) 
PRINT info for BB 20:
	Vars Live on Entry:  51		
	Vars Live on Exit:  0 7		
	outgoing edges:22, 
	Instructions:
		line_num(;n: 248)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		line_num(;n: 249)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_30 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_31 = call_0o(%v_30 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_30[20.2 ] ) 
		%v_32 = call_0o(%v_31 ;n:name, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_31[20.3 ] ) 
		%v_33 = copy(" reply from ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_34 = build_compound_string(#{%v_32}, %v_33)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_32[20.4 ] %v_33[20.5 ] ) 
		line_num(;n: 250)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_35 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_36 = call_0o(%v_35 ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_35[20.8 ] ) 
		%v_37 = copy(" on ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_38 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 2.0 ] ) 
		%v_39 = call_0o(%v_38 ;n:title, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_38[20.11 ] ) 
		%v_40 = build_compound_string(#{%v_36}, %v_37, #{%v_39})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_36[20.9 ] %v_37[20.10 ] %v_39[20.12 ] ) 
		%v_41 = call_1o(%v_34, %v_40 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_34[20.6 ] %v_40[20.13 ] ) 
		%v_42 = call_0o(%self ;n:plaintext_comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 2.0 ] ) 
		%v_43 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 20.15 2.0 ] ) 
		%v_44 = copy("Reply to ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 253)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_45 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[20.8 20.11 20.15 20.16 2.0 ] ) 
		%v_46 = call_0o(%v_45 ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_45[20.19 ] ) 
		%v_47 = build_compound_string(%v_44, #{%v_46})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_44[20.17 ] %v_46[20.20 ] ) 
		%v_48 = copy({:'title'=>%v_41, :'message'=>%v_42, :'url'=>%v_43, :'url_title'=>%v_47})		--org.jruby.ir.instructions.CopyInstr(	%v_41[20.14 ] %v_42[20.15 ] %v_43[20.16 ] %v_47[20.21 ] ) 
		%v_49 = call_1o(u, %v_48 ;n:pushover!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	u[3.2 ] %v_48[20.22 ] ) 
		jump(LBL_17:106)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 21:
	Vars Live on Entry:  51		
	Vars Live on Exit: 
	outgoing edges:22, 
	Instructions:
		%v_49 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 22:
	Vars Live on Entry: 
	Vars Live on Exit:  51		
	outgoing edges:25, 
	Instructions:
		return(%v_49)		--org.jruby.ir.instructions.ReturnInstr(	%v_49[21.0 20.23 ] ) 
PRINT info for BB 23:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:25, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 25:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = generated_markeddown_comment
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 260)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Markdowner, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:comment, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:to_html, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = give_upvote_or_downvote_and_recalculate_confidence!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		upvote = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		downvote = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 264)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @upvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].upvotes 
		%v_4 = call_0o(upvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	upvote[2.5 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.8 ] %v_4[2.9 ] ) 
		put_field(%self, %v_5 ;name: @upvotes)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 ] %v_5[2.10 ] ) #<%self>#	-- [PUT:%self].upvotes 
		line_num(;n: 265)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = get_field(%self ;name: @downvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 2.11 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].downvotes 
		%v_7 = call_0o(downvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	downvote[2.6 ] ) 
		%v_8 = call_1o(%v_6, %v_7 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[2.13 ] %v_7[2.14 ] ) 
		put_field(%self, %v_8 ;name: @downvotes)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.11 ] %v_8[2.15 ] ) #<%self>#	-- [PUT:%self].downvotes 
		line_num(;n: 267)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:connection, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.18 ] ) 
		%v_11 = copy("UPDATE ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_13 = call_0o(%v_12 ;n:table_name, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_12[2.21 ] ) 
		%v_14 = copy(" SET ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = build_compound_string(%v_11, #{%v_13}, %v_14)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_11[2.20 ] %v_13[2.22 ] %v_14[2.23 ] ) 
		%v_16 = copy("upvotes = COALESCE(upvotes, 0) + ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 268)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = call_0o(upvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	upvote[2.5 2.9 ] ) 
		%v_18 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_19 = build_compound_string(%v_16, #{%v_17}, %v_18)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_16[2.25 ] %v_17[2.27 ] %v_18[2.28 ] ) 
		%v_20 = call_1o(%v_15, %v_19 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_15[2.24 ] %v_19[2.29 ] ) 
		%v_21 = copy("downvotes = COALESCE(downvotes, 0) + ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 269)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_22 = call_0o(downvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	downvote[2.6 2.14 ] ) 
		%v_23 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_24 = build_compound_string(%v_21, #{%v_22}, %v_23)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_21[2.31 ] %v_22[2.33 ] %v_23[2.34 ] ) 
		%v_25 = call_1o(%v_20, %v_24 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_20[2.30 ] %v_24[2.35 ] ) 
		%v_26 = copy("confidence = '")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 270)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_27 = call_0o(%self ;n:calculated_confidence, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.11 2.16 ] ) 
		%v_28 = copy("' WHERE id = ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_29 = build_compound_string(%v_26, #{%v_27}, %v_28)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_26[2.37 ] %v_27[2.39 ] %v_28[2.40 ] ) 
		%v_30 = call_1o(%v_25, %v_29 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_25[2.36 ] %v_29[2.41 ] ) 
		line_num(;n: 271)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_31 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.11 2.16 2.39 ] ) 
		%v_32 = call_0o(%v_31 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_31[2.44 ] ) 
		%v_33 = build_compound_string(#{%v_32})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_32[2.45 ] ) 
		%v_34 = call_1o(%v_30, %v_33 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_30[2.42 ] %v_33[2.46 ] ) 
		%v_35 = call_1o(%v_10, %v_34 ;n:execute, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_10[2.19 ] %v_34[2.47 ] ) 
		line_num(;n: 273)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_36 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.11 2.16 2.39 2.44 ] ) 
		%v_37 = call_0o(%v_36 ;n:recalculate_hotness!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_36[2.50 ] ) 
		return(%v_37)		--org.jruby.ir.instructions.ReturnInstr(	%v_37[2.51 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = gone_text
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 6, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 277)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_0:27, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  12 14		
	Vars Live on Exit:  0		
	outgoing edges:4, 5, 
	Instructions:
		line_num(;n: 278)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy("Thread removed by moderator ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_0o(%self ;n:moderation, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = call_1o(%v_5, :'moderator' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[3.2 ] ) 
		%v_7 = call_1o(%v_6, :'username' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[3.3 ] ) 
		%v_8 = call_0o(%v_7 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[3.4 ] ) 
		%v_9 = call_1o(%v_4, %v_8 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[3.1 ] %v_8[3.5 ] ) 
		%v_10 = copy(": ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_11 = call_1o(%v_9, %v_10 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_9[3.6 ] %v_10[3.7 ] ) 
		line_num(;n: 280)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = call_0o(%self ;n:moderation, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[3.2 2.0 ] ) 
		%v_13 = call_1o(%v_12, :'reason' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[3.10 ] ) 
		b_true(LBL_2:24, %v_13)		--org.jruby.ir.instructions.BTrueInstr(	%v_13[3.11 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  12 14		
	Vars Live on Exit:  12		
	outgoing edges:5, 
	Instructions:
		%v_14 = copy("No reason given")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_13 = copy(%v_14)		--org.jruby.ir.instructions.CopyInstr(	%v_14[4.0 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  12 14		
	outgoing edges:8, 
	Instructions:
		%v_15 = call_1o(%v_11, %v_13 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_11[3.8 ] %v_13[4.1 3.11 ] ) 
		return(%v_15)		--org.jruby.ir.instructions.ReturnInstr(	%v_15[5.0 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 
	Instructions:
		line_num(;n: 282)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = copy("Comment removed by author")		--org.jruby.ir.instructions.CopyInstr(	) 
		return(%v_16)		--org.jruby.ir.instructions.ReturnInstr(	%v_16[6.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = has_been_edited?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:5, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 287)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:updated_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_0:15, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:5, 
	Instructions:
		%v_4 = call_0o(%self ;n:updated_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[3.0 2.0 ] ) 
		%v_6 = call_1o(%v_4, %v_5 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[3.0 ] %v_5[3.1 ] ) 
		%v_7 = call_0o(Fixnum:1 ;n:minute, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	) 
		%v_8 = call_1o(%v_6, %v_7 ;n:>, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[3.2 ] %v_7[3.3 ] ) 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  4		
	outgoing edges:5, 
	Instructions:
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_deletable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 291)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_2:12, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4 5		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:16, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		line_num(;n: 292)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 293)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_5:24, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  7		
	Vars Live on Exit:  0 4		
	outgoing edges:8, 
	Instructions:
		%v_7 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_9 = call_1o(%v_7, %v_8 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[7.0 ] %v_8[7.1 ] ) 
		%v_6 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[7.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  7		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_3:28, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[7.3 6.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		line_num(;n: 294)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		line_num(;n: 296)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_downvotable?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 301)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_0:18, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 302)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[3.1 ] ) 
		%v_6 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = call_1o(%v_5, %v_6 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[3.2 ] %v_6[3.3 ] ) 
		%v_8 = search_const(scope<1> ;name: DOWNVOTABLE_DAYS, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_9 = call_0o(%v_8 ;n:days, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[3.5 ] ) 
		%v_10 = call_1o(%v_7, %v_9 ;n:<=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[3.4 ] %v_9[3.6 ] %v_7[3.4 ] ) #<%v_7># 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[3.7 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		line_num(;n: 305)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_editable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 309)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_2:14, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 5		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_5 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = call_1o(%v_4, %v_5 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[3.0 ] %v_5[3.1 ] ) 
		%v_3 = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 5		
	outgoing edges:5, 11, 
	Instructions:
		b_false(LBL_0:42, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.3 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:6, 7, 
	Instructions:
		line_num(;n: 310)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_0o(%self ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_3:21, %v_7)		--org.jruby.ir.instructions.BFalseInstr(	%v_7[5.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 
	Instructions:
		line_num(;n: 311)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 12		
	Vars Live on Exit:  0		
	outgoing edges:8, 9, 
	Instructions:
		line_num(;n: 313)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[7.1 ] ) 
		%v_11 = call_0o(%v_10 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[7.2 ] ) 
		%v_12 = call_0o(%self ;n:updated_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_5:31, %v_12)		--org.jruby.ir.instructions.BFalseInstr(	%v_12[7.4 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  12 15		
	Vars Live on Exit:  0 12		
	outgoing edges:10, 
	Instructions:
		%v_13 = call_0o(%self ;n:updated_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_14 = call_0o(%v_13 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_13[8.0 ] ) 
		jump(LBL_6:35)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  12 15		
	Vars Live on Exit:  0 12		
	outgoing edges:10, 
	Instructions:
		%v_15 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_16 = call_0o(%v_15 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_15[9.0 ] ) 
		%v_14 = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[9.1 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit:  12 15		
	outgoing edges:13, 
	Instructions:
		%v_17 = call_1o(%v_11, %v_14 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_11[7.3 ] %v_14[9.2 8.1 ] ) 
		line_num(;n: 314)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_18 = search_const(scope<1> ;name: MAX_EDIT_MINS, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_19 = call_1o(Fixnum:60, %v_18 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_18[10.2 ] ) 
		%v_20 = call_1o(%v_17, %v_19 ;n:<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_17[10.0 ] %v_19[10.3 ] ) 
		return(%v_20)		--org.jruby.ir.instructions.ReturnInstr(	%v_20[10.4 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 
	Instructions:
		line_num(;n: 317)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_gone?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:5, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 322)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:is_deleted?, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_true(LBL_0:11, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:5, 
	Instructions:
		%v_4 = call_0o(%self ;n:is_moderated?, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  4		
	outgoing edges:5, 
	Instructions:
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_undeletable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 326)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_2:12, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4 5		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:16, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 327)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 328)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_6:24, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 4		
	outgoing edges:8, 
	Instructions:
		%v_7 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_9 = call_1o(%v_7, %v_8 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[7.0 ] %v_8[7.1 ] ) 
		%v_6 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[7.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_5:29, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[7.3 6.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  7		
	Vars Live on Exit:  0		
	outgoing edges:10, 
	Instructions:
		%v_10 = call_0o(%self ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_11 = call_0o(%v_10 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[9.0 ] ) 
		%v_6 = copy(%v_11)		--org.jruby.ir.instructions.CopyInstr(	%v_11[9.1 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit:  7		
	outgoing edges:11, 12, 
	Instructions:
		b_false(LBL_3:33, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[9.2 7.3 6.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 329)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 331)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = log_to_countinual
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 336)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Countinual, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:shortname, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		%v_7 = copy(".comments.submitted")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = build_compound_string(#{%v_6}, %v_7)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_6[2.9 ] %v_7[2.10 ] ) 
		%v_9 = copy("+1")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_10 = call(%v_3, %v_8, %v_9 ;n:count!, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %v_8[2.11 ] %v_9[2.12 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = mark_submitter
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 340)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Keystore, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = copy("user:")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = copy(":comments_posted")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = build_compound_string(%v_4, #{%v_5}, %v_6)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_4[2.7 ] %v_5[2.8 ] %v_6[2.9 ] ) 
		%v_8 = call_1o(%v_3, %v_7 ;n:increment_value_for, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_7[2.10 ] ) 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[2.11 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = mailing_list_message_id
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 344)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("comment.")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call_0o(%self ;n:short_id, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = copy(".")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:created_at, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_7 = call_0o(%v_6 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[2.9 ] ) 
		%v_8 = copy("@")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.12 ] ) 
		%v_11 = call_0o(%v_10 ;n:domain, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[2.13 ] ) 
		%v_12 = build_compound_string(%v_3, #{%v_4}, %v_5, #{%v_7}, %v_8, #{%v_11})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] %v_7[2.10 ] %v_8[2.11 ] %v_11[2.14 ] ) 
		return(%v_12)		--org.jruby.ir.instructions.ReturnInstr(	%v_12[2.15 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = path
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 348)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:comments_path, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("/comments/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_7 = copy("#c_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 2.9 ] ) 
		%v_9 = build_compound_string(%v_5, #{%v_6}, %v_7, #{%v_8})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_5[2.8 ] %v_6[2.9 ] %v_7[2.10 ] %v_8[2.11 ] ) 
		%v_10 = call_1o(%v_4, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_9[2.12 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = plaintext_comment
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 353)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:comment, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = record_initial_upvote
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 357)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:story_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_6 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 2.8 ] ) 
		%v_7 = call(%v_3, Fixnum:1, %v_4, %v_5, %v_6, nil, false ;n:vote_thusly_on_story_or_comment_for_user_because, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] %v_6[2.9 ] ) 
		line_num(;n: 360)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 2.8 2.9 ] ) 
		%v_9 = call_0o(%v_8 ;n:update_comments_count!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[2.12 ] ) 
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = score
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 364)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @upvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].upvotes 
		%v_4 = get_field(%self ;name: @downvotes)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].downvotes 
		%v_5 = call_1o(%v_3, %v_4 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = short_id_path
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 368)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:short_id_path, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("/_/comments/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_7 = copy("#c_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 2.9 ] ) 
		%v_9 = build_compound_string(%v_5, #{%v_6}, %v_7, #{%v_8})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_5[2.8 ] %v_6[2.9 ] %v_7[2.10 ] %v_8[2.11 ] ) 
		%v_10 = call_1o(%v_4, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_9[2.12 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = short_id_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 372)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:short_id_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("/_/comments/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_7 = copy("#c_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 2.9 ] ) 
		%v_9 = build_compound_string(%v_5, #{%v_6}, %v_7, #{%v_8})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_5[2.8 ] %v_6[2.9 ] %v_7[2.10 ] %v_8[2.11 ] ) 
		%v_10 = call_1o(%v_4, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_9[2.12 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = to_param
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 376)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = unassign_votes
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 380)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:update_comments_count!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 384)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:comments_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("/comments/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_7 = copy("#c_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 2.9 ] ) 
		%v_9 = build_compound_string(%v_5, #{%v_6}, %v_7, #{%v_8})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_5[2.8 ] %v_6[2.9 ] %v_7[2.10 ] %v_8[2.11 ] ) 
		%v_10 = call_1o(%v_4, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_9[2.12 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.13 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = vote_summary
PRINT info for BB 1:
	Vars Live on Entry:  5		
	Vars Live on Exit:  5		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  5		
	Vars Live on Exit:  5		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 388)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		r_counts = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.6 ] ) 
		line_num(;n: 389)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = copy({:'comment_id'=>%v_5})		--org.jruby.ir.instructions.CopyInstr(	%v_5[2.10 ] ) 
		%v_7 = call_1o(%v_4, %v_6 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.9 ] %v_6[2.11 ] ) 
		%v_8 = call(%v_7, %self:CLOSURE vote_summary_CLOSURE_1[./lobsters/models/comment.rb:389] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_7[2.12 ] %self[2.0 2.10 ] ) 
CLOSURE BEGIN: v[] r_counts[2.7,] 
PRINT info for BB 1:
	Vars Live on Entry:  8		
	Vars Live on Exit:  8		
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  8		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 6 8		
	Vars Live on Exit:  2 8		
	outgoing edges:4, 5, 6, 
	Instructions:
		line_num(;n: 390)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_4 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_5 = call_0o(%cl_1_4 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_4[3.1 ] ) 
		%cl_1_3 = call_1o(r_counts, %cl_1_5 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] %cl_1_5[3.2 ] ) 
		b_true(CL1_LBL_0:15, %cl_1_3)		--org.jruby.ir.instructions.BTrueInstr(	%cl_1_3[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 6 8		
	outgoing edges:5, 6, 
	Instructions:
		%cl_1_3 = call(r_counts, %cl_1_5, Fixnum:0 ;n:[]=, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	r_counts[] %cl_1_5[3.2 ] r_counts[] ) #<r_counts># 
		%cl_1_3 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  2 8		
	outgoing edges:6, 8, 
	Instructions:
		line_num(;n: 391)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_6 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_7 = call_0o(%cl_1_6 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_6[5.1 ] ) 
		%cl_1_8 = call_1o(r_counts, %cl_1_7 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[4.0 ] %cl_1_7[5.2 ] ) 
		%cl_1_9 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[5.1 2.2 ] ) 
		%cl_1_8 = call_1o(%cl_1_8, %cl_1_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_8[5.3 ] %cl_1_9[5.4 ] ) 
		%cl_1_10 = call(r_counts, %cl_1_7, %cl_1_8 ;n:[]=, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	r_counts[4.0 ] %cl_1_7[5.2 ] %cl_1_8[5.3 5.5 ] r_counts[4.0 ] ) #<r_counts># 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[5.3 5.5 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 
	Instructions:
		%cl_1_11 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_12 = runtime_helper(%cl_1_11 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_11[6.0 ] ) 
		return(%cl_1_12)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_12[6.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 394)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call_0o(r_counts ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r_counts[2.7 ] ) 
		%v_10 = call_0o(%v_9 ;n:sort, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.15 ] ) 
		%v_11 = call(%v_10, %self:CLOSURE vote_summary_CLOSURE_2[./lobsters/models/comment.rb:394] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_10[2.16 ] %self[2.0 2.10 ] ) 
CLOSURE BEGIN: k[] r_counts[2.7,2.15,] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		k = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  2 9		
	outgoing edges:4, 5, 9, 
	Instructions:
		line_num(;n: 395)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_4 = call_1o(k, %cl_2_3 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_2_3[3.1 ] ) 
		b_false(CL2_LBL_0:16, %cl_2_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  10		
	Vars Live on Exit:  2 9		
	outgoing edges:8, 9, 
	Instructions:
		%cl_2_5 = copy("+")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_6 = call_1o(r_counts, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] k[2.2 ] ) 
		%cl_2_7 = build_compound_string(%cl_2_5, #{%cl_2_6})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_2_5[4.0 ] %cl_2_6[4.1 ] ) 
		jump(CL2_LBL_1:27)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  2 9 11 12 13 14		
	Vars Live on Exit:  2 9		
	outgoing edges:6, 7, 9, 
	Instructions:
		%cl_2_8 = call_1o(r_counts, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] k[2.2 ] ) 
		%cl_2_9 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_10 = search_const(scope<2> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_11 = inheritance_search_const(%cl_2_10 ;name: COMMENT_REASONS, no_priv: true)		--org.jruby.ir.instructions.InheritanceSearchConstInstr(	%cl_2_10[5.2 ] ) 
		bne(CL2_LBL_2:23, %cl_2_11, %undefined)		--org.jruby.ir.instructions.BNEInstr(	%cl_2_11[5.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2 9 11 12 14		
	Vars Live on Exit:  2 9 11 12 13		
	outgoing edges:7, 9, 
	Instructions:
		%cl_2_11 = const_missing(%cl_2_10, :'COMMENT_REASONS' ;n:const_missing, t:FU, cl:false, missing: COMMENT_REASONS)		--org.jruby.ir.instructions.ConstMissingInstr(	%cl_2_10[5.2 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit:  2 9 11 12 14		
	outgoing edges:9, 11, 
	Instructions:
		%cl_2_12 = call_1o(%cl_2_11, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_11[6.0 5.3 ] k[2.2 ] ) 
		%cl_2_13 = build_compound_string(#{%cl_2_8}, %cl_2_9, #{%cl_2_12})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_2_8[5.0 ] %cl_2_9[5.1 ] %cl_2_12[7.0 ] ) 
		return(%cl_2_13)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_13[7.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  10		
	outgoing edges:11, 
	Instructions:
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[4.2 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		%cl_2_14 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_15 = runtime_helper(%cl_2_14 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_14[9.0 ] ) 
		return(%cl_2_15)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_15[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_12 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_13 = call_1o(%v_11, %v_12 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_11[2.17 ] %v_12[2.18 ] ) 
		return(%v_13)		--org.jruby.ir.instructions.ReturnInstr(	%v_13[2.19 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  5		
	Vars Live on Exit:  5		
	outgoing edges:
	Instructions:

SET IRMethod, name = undelete_for_user
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 7, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 401)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_3, false ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_3[2.7 ] ) #<%v_3>#	-- [PUT:%v_3].record_timestamps 
		line_num(;n: 403)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, false ;n:is_deleted=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] ) #<%self>#	-- [PUT:%self].is_deleted 
		line_num(;n: 405)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		b_false(LBL_0:42, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.12 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 5, 
	Instructions:
		line_num(;n: 406)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, false ;n:is_moderated=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.10 ] ) #<%self>#	-- [PUT:%self].is_moderated 
		line_num(;n: 408)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_6 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[3.1 2.0 2.10 ] ) 
		%v_7 = call_1o(%v_5, %v_6 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[3.3 ] %v_6[3.4 ] %v_5[3.3 ] ) #<%v_5># 
		b_false(LBL_2:38, %v_7)		--org.jruby.ir.instructions.BFalseInstr(	%v_7[3.5 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 4		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 409)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = search_const(scope<1> ;name: Moderation, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_9 = call_0o(%v_8 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[4.1 ] ) 
		m = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[4.2 ] ) 
		line_num(;n: 410)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[3.1 2.0 2.10 ] ) 
		attr_assign(m, %v_10 ;n:comment_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[4.3 ] %v_10[4.5 ] ) #<m>#	-- [PUT:m].comment_id 
		line_num(;n: 411)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		attr_assign(m, %v_11 ;n:moderator_user_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[4.3 4.6 ] %v_11[4.8 ] ) #<m>#	-- [PUT:m].moderator_user_id 
		line_num(;n: 412)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = copy("undeleted comment")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(m, %v_12 ;n:action=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[4.3 4.6 4.9 ] %v_12[4.11 ] ) #<m>#	-- [PUT:m].action 
		line_num(;n: 413)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = call_0o(m ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	m[4.3 4.6 4.9 4.12 ] ) 
		jump(LBL_3:40)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_13 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:8, 
	Instructions:
		jump(LBL_1:44)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:8, 
	Instructions:
		%v_13 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:9, 
	Instructions:
		line_num(;n: 417)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy({:'validate'=>false})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call_1o(%self, %v_14 ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 2.10 3.1 ] %v_14[8.1 ] ) 
		line_num(;n: 418)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		attr_assign(%v_16, true ;n:record_timestamps=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_16[8.4 ] ) #<%v_16>#	-- [PUT:%v_16].record_timestamps 
		line_num(;n: 420)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = call_0o(%self ;n:story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[8.2 2.0 2.10 3.1 ] ) 
		%v_18 = call_0o(%v_17 ;n:update_comments_count!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_17[8.7 ] ) 
		return(%v_18)		--org.jruby.ir.instructions.ReturnInstr(	%v_18[8.8 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

