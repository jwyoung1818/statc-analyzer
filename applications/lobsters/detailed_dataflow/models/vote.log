SET IRMethod, name = votes_by_user_for_stories_hash
PRINT info for BB 1:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		stories = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 27)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		votes = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.8 ] ) 
		line_num(;n: 29)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = copy({:'user_id'=>user, :'story_id'=>stories, :'comment_id'=>nil})		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] stories[2.6 ] ) 
		%v_6 = call_1o(%v_4, %v_5 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.11 ] %v_5[2.12 ] ) 
		%v_7 = call(%v_6, %self:CLOSURE votes_by_user_for_stories_hash_CLOSURE_1[./lobsters/models/vote.rb:30] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_6[2.13 ] %self[2.0 ] ) 
CLOSURE BEGIN: v[] votes[2.9,] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 9		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 31)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(v ;n:story_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_4 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 2.2 ] ) 
		%cl_1_5 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 3.2 2.2 ] ) 
		%cl_1_6 = copy({:'vote'=>%cl_1_4, :'reason'=>%cl_1_5})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_4[3.2 ] %cl_1_5[3.3 ] ) 
		attr_assign(votes, %cl_1_3, %cl_1_6 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	votes[] %cl_1_3[3.1 ] %cl_1_6[3.4 ] ) #<votes>#	-- [PUT:votes].[] 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_8 = runtime_helper(%cl_1_7 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_7[4.0 ] ) 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 34)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(votes)		--org.jruby.ir.instructions.ReturnInstr(	votes[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:
	Instructions:

SET IRMethod, name = comment_votes_by_user_for_story_hash
PRINT info for BB 1:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		story_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 38)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		votes = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.8 ] ) 
		line_num(;n: 40)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = copy({:'user_id'=>user_id, :'story_id'=>story_id})		--org.jruby.ir.instructions.CopyInstr(	user_id[2.5 ] story_id[2.6 ] ) 
		%v_6 = call_1o(%v_4, %v_5 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.11 ] %v_5[2.12 ] ) 
		%v_7 = copy("comment_id IS NOT NULL")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1o(%v_6, %v_7 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[2.13 ] %v_7[2.14 ] ) 
		%v_9 = call(%v_8, %self:CLOSURE comment_votes_by_user_for_story_hash_CLOSURE_1[./lobsters/models/vote.rb:44] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_8[2.15 ] %self[2.0 ] ) 
CLOSURE BEGIN: v[] votes[2.9,] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 9		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 45)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(v ;n:comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_4 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 2.2 ] ) 
		%cl_1_5 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 3.2 2.2 ] ) 
		%cl_1_6 = copy({:'vote'=>%cl_1_4, :'reason'=>%cl_1_5})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_4[3.2 ] %cl_1_5[3.3 ] ) 
		attr_assign(votes, %cl_1_3, %cl_1_6 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	votes[] %cl_1_3[3.1 ] %cl_1_6[3.4 ] ) #<votes>#	-- [PUT:votes].[] 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_8 = runtime_helper(%cl_1_7 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_7[4.0 ] ) 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 48)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(votes)		--org.jruby.ir.instructions.ReturnInstr(	votes[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 5 7		
	Vars Live on Exit:  4 5 7		
	outgoing edges:
	Instructions:

SET IRMethod, name = story_votes_by_user_for_story_ids_hash
PRINT info for BB 1:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		story_ids = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 52)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(story_ids ;n:empty?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	story_ids[2.6 ] ) 
		b_false(LBL_0:14, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 53)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		return({})		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  0 4 5 10		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 55)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = copy({:'user_id'=>user_id, :'comment_id'=>nil, :'story_id'=>story_ids})		--org.jruby.ir.instructions.CopyInstr(	user_id[2.5 ] story_ids[2.6 ] ) 
		%v_6 = call_1o(%self, %v_5 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %v_5[4.1 ] ) 
		votes = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[4.2 ] ) 
		line_num(;n: 60)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1ob(%v_6, %v_7, %self:CLOSURE story_votes_by_user_for_story_ids_hash_CLOSURE_1[./lobsters/models/vote.rb:60] ;n:inject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.specialized.OneOperandArgBlockCallInstr(	%v_6[4.2 ] %v_7[4.5 ] %self[4.2 2.0 ] ) 
CLOSURE BEGIN: v[] memo[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 3		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		memo = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 3		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 61)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(v ;n:story_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.3 ] ) 
		%cl_1_4 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 2.3 ] ) 
		%cl_1_5 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 3.2 2.3 ] ) 
		%cl_1_6 = copy({:'vote'=>%cl_1_4, :'reason'=>%cl_1_5})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_4[3.2 ] %cl_1_5[3.3 ] ) 
		attr_assign(memo, %cl_1_3, %cl_1_6 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	memo[2.2 ] %cl_1_3[3.1 ] %cl_1_6[3.4 ] ) #<memo>#	-- [PUT:memo].[] 
		line_num(;n: 62)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(memo)		--org.jruby.ir.instructions.ReturnInstr(	memo[3.5 2.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_8 = runtime_helper(%cl_1_7 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_7[4.0 ] ) 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[4.6 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:
	Instructions:

SET IRMethod, name = comment_votes_by_user_for_comment_ids_hash
PRINT info for BB 1:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		comment_ids = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 68)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(comment_ids ;n:empty?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	comment_ids[2.6 ] ) 
		b_false(LBL_0:14, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 69)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		return({})		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  0 4 5 10		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 71)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = copy({:'user_id'=>user_id, :'comment_id'=>comment_ids})		--org.jruby.ir.instructions.CopyInstr(	user_id[2.5 ] comment_ids[2.6 ] ) 
		%v_6 = call_1o(%self, %v_5 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %v_5[4.1 ] ) 
		votes = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[4.2 ] ) 
		line_num(;n: 75)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1ob(%v_6, %v_7, %self:CLOSURE comment_votes_by_user_for_comment_ids_hash_CLOSURE_1[./lobsters/models/vote.rb:75] ;n:inject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.specialized.OneOperandArgBlockCallInstr(	%v_6[4.2 ] %v_7[4.5 ] %self[4.2 2.0 ] ) 
CLOSURE BEGIN: v[] memo[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 3		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		memo = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 3		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 76)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(v ;n:comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.3 ] ) 
		%cl_1_4 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 2.3 ] ) 
		%cl_1_5 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[3.1 3.2 2.3 ] ) 
		%cl_1_6 = copy({:'vote'=>%cl_1_4, :'reason'=>%cl_1_5})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_4[3.2 ] %cl_1_5[3.3 ] ) 
		attr_assign(memo, %cl_1_3, %cl_1_6 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	memo[2.2 ] %cl_1_3[3.1 ] %cl_1_6[3.4 ] ) #<memo>#	-- [PUT:memo].[] 
		line_num(;n: 77)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(memo)		--org.jruby.ir.instructions.ReturnInstr(	memo[3.5 2.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_8 = runtime_helper(%cl_1_7 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_7[4.0 ] ) 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[4.6 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  4 5 10		
	Vars Live on Exit:  4 5 10		
	outgoing edges:
	Instructions:

SET IRMethod, name = vote_thusly_on_story_or_comment_for_user_because
PRINT info for BB 1:
	Vars Live on Entry:  4 5 6 7 8 9 14 20 21		
	Vars Live on Exit:  4 5 6 7 8 9 14 20 21		
	outgoing edges:10, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5 6 7 8 9 14 20 21	

	Vars Live on Exit:  4 5 6 7 8 9 14 20 21		
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 5, opt: 1, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		vote = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		story_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		comment_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		user_id = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		reason = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		update_counters = recv_opt_arg(;index:0, req: 5, pre: 5)		--org.jruby.ir.instructions.ReceiveOptArgInstr(	) 
		bne(LBL_0:14, update_counters, %undefined)		--org.jruby.ir.instructions.BNEInstr(	update_counters[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5 6 7 8 9 14 20 21	

	Vars Live on Exit:  0 4 5 6 7 8 14 20 21		
	outgoing edges:4, 
	Instructions:
		update_counters = copy(true)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 5 6 7 8 9 14 16 20	
 21		
	Vars Live on Exit:  0 4 5 6 7 8 9 14 20 21	

	outgoing edges:5, 6, 
	Instructions:
		line_num(;n: 84)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = copy({:'user_id'=>user_id, :'story_id'=>story_id, :'comment_id'=>comment_id})		--org.jruby.ir.instructions.CopyInstr(	user_id[2.8 ] story_id[2.6 ] comment_id[2.7 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[4.1 ] %v_4[4.2 ] ) 
		%v_6 = call_0o(%v_5 ;n:first_or_initialize, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[4.3 ] ) 
		v = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[4.4 ] ) 
		line_num(;n: 87)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_0o(%v_6 ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[4.4 ] ) 
		%v_8 = call_0o(%v_7 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[4.7 ] ) 
		b_false(LBL_3:28, %v_8)		--org.jruby.ir.instructions.BFalseInstr(	%v_8[4.8 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 5 6 7 8 9 14 16 20	
 21		
	Vars Live on Exit:  0 4 5 6 7 8 9 14 20 21	

	outgoing edges:6, 
	Instructions:
		%v_9 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[4.5 ] ) 
		%v_10 = call_1o(%v_9, vote ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_9[5.0 ] vote[2.5 ] ) 
		%v_8 = copy(%v_10)		--org.jruby.ir.instructions.CopyInstr(	%v_10[5.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 5 6 7 8 9 14 20 21	

	Vars Live on Exit:  0 4 5 6 7 8 9 14 16 20	
 21		
	outgoing edges:7, 8, 
	Instructions:
		b_false(LBL_1:32, %v_8)		--org.jruby.ir.instructions.BFalseInstr(	%v_8[5.2 4.8 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  4 5 6 7 8 9 14 20 21		
	Vars Live on Exit:  4 5 6 7 8 9 14 20 21		
	outgoing edges:10, 
	Instructions:
		line_num(;n: 88)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  4 5 6 7 8 9 14 20 21		
	Vars Live on Exit:  0 4 5 6 7 8 9 14		
	outgoing edges:10, 
	Instructions:
		%v_11 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 91)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		upvote = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 92)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		downvote = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 94)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_13 = call(%v_12, %self:CLOSURE vote_thusly_on_story_or_comment_for_user_because_CLOSURE_1[./lobsters/models/vote.rb:94] ;n:transaction, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_12[8.6 ] %self[2.0 ] ) 
CLOSURE BEGIN: vote[2.5,] v[4.5,] upvote[8.2,] downvote[8.4,] reason[2.9,] update_counters[3.0,2.10,] user_id[2.8,] c[] s[] 
PRINT info for BB 1:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:46, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:4, 11, 44, 
	Instructions:
		line_num(;n: 96)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_1f(vote, Fixnum:0 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	vote[] ) 
		b_false(CL1_LBL_0:33, %cl_1_3)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  5 7 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:5, 6, 44, 
	Instructions:
		line_num(;n: 98)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_4 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		%cl_1_5 = call_1f(%cl_1_4, Fixnum:1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_4[4.1 ] ) 
		b_false(CL1_LBL_2:16, %cl_1_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_5[4.2 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  5 7 9 14 30 33 43		
	Vars Live on Exit:  5 7 14 30 33 43		
	outgoing edges:7, 
	Instructions:
		%cl_1_6 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_3:18)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  5 7 9 14 30 33 43		
	Vars Live on Exit:  5 7 14 30 33 43		
	outgoing edges:7, 
	Instructions:
		%cl_1_6 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  5 7 10 30 33 43		
	Vars Live on Exit:  5 7 9 14 30 33 43		
	outgoing edges:8, 9, 44, 
	Instructions:
		upvote = copy(%cl_1_6)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_6[6.0 5.0 ] ) 
		line_num(;n: 99)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_7 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		%cl_1_8 = call_1f(%cl_1_7, Fixnum:-1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_7[7.2 ] ) 
		b_false(CL1_LBL_4:26, %cl_1_8)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_8[7.3 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  5 7 10 13 30 33 43		
	Vars Live on Exit:  5 7 10 30 33 43		
	outgoing edges:10, 
	Instructions:
		%cl_1_9 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_5:28)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  5 7 10 13 30 33 43		
	Vars Live on Exit:  5 7 10 30 33 43		
	outgoing edges:10, 
	Instructions:
		%cl_1_9 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 13 30 33 43		
	outgoing edges:27, 44, 
	Instructions:
		downvote = copy(%cl_1_9)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_9[9.0 8.0 ] ) 
		line_num(;n: 100)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_10 = call_0o(v ;n:destroy!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		jump(CL1_LBL_1:89)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:12, 19, 44, 
	Instructions:
		line_num(;n: 104)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_11 = call_0o(v ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		%cl_1_12 = call_0o(%cl_1_11 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_11[11.1 ] ) 
		b_false(CL1_LBL_6:59, %cl_1_12)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_12[11.2 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  5 7 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:13, 14, 44, 
	Instructions:
		line_num(;n: 105)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_13 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		%cl_1_14 = call_1f(%cl_1_13, Fixnum:1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_13[12.1 ] ) 
		b_false(CL1_LBL_8:44, %cl_1_14)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_14[12.2 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  5 7 14 20 30 33 43		
	Vars Live on Exit:  5 7 14 30 33 43		
	outgoing edges:15, 
	Instructions:
		%cl_1_15 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_9:46)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 14:
	Vars Live on Entry:  5 7 14 20 30 33 43		
	Vars Live on Exit:  5 7 14 30 33 43		
	outgoing edges:15, 
	Instructions:
		%cl_1_15 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 15:
	Vars Live on Entry:  5 7 10 30 33 43		
	Vars Live on Exit:  5 7 14 20 30 33 43		
	outgoing edges:16, 17, 44, 
	Instructions:
		upvote = copy(%cl_1_15)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_15[14.0 13.0 ] ) 
		line_num(;n: 106)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_16 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[] ) 
		%cl_1_17 = call_1f(%cl_1_16, Fixnum:-1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_16[15.2 ] ) 
		b_false(CL1_LBL_10:54, %cl_1_17)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_17[15.3 ] ) 
PRINT info for BB 16:
	Vars Live on Entry:  5 7 10 23 30 33 43		
	Vars Live on Exit:  5 7 10 30 33 43		
	outgoing edges:18, 
	Instructions:
		%cl_1_18 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_11:56)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 17:
	Vars Live on Entry:  5 7 10 23 30 33 43		
	Vars Live on Exit:  5 7 10 30 33 43		
	outgoing edges:18, 
	Instructions:
		%cl_1_18 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 18:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 23 30 33 43		
	outgoing edges:20, 
	Instructions:
		downvote = copy(%cl_1_18)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_18[17.0 16.0 ] ) 
		jump(CL1_LBL_7:61)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 19:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:20, 
	Instructions:
		%cl_1_18 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 20:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:21, 22, 44, 
	Instructions:
		line_num(;n: 109)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_19 = call_1f(vote, Fixnum:1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	vote[] ) 
		b_false(CL1_LBL_12:67, %cl_1_19)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_19[20.1 ] ) 
PRINT info for BB 21:
	Vars Live on Entry:  5 7 10 14 25 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:23, 
	Instructions:
		%cl_1_20 = copy(Fixnum:1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_13:69)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 22:
	Vars Live on Entry:  5 7 10 14 25 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:23, 
	Instructions:
		%cl_1_20 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 23:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 25 30 33 43		
	outgoing edges:24, 25, 44, 
	Instructions:
		%cl_1_21 = call_1o(upvote, %cl_1_20 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	upvote[15.0 ] %cl_1_20[22.0 21.0 ] ) 
		upvote = copy(%cl_1_21)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_21[23.0 ] ) 
		line_num(;n: 110)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_22 = call_1f(vote, Fixnum:-1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	vote[] ) 
		b_false(CL1_LBL_14:77, %cl_1_22)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_22[23.3 ] ) 
PRINT info for BB 24:
	Vars Live on Entry:  5 7 10 14 28 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:26, 
	Instructions:
		%cl_1_23 = copy(Fixnum:1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(CL1_LBL_15:79)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 25:
	Vars Live on Entry:  5 7 10 14 28 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:26, 
	Instructions:
		%cl_1_23 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 26:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 28 30 33 43		
	outgoing edges:27, 44, 
	Instructions:
		%cl_1_24 = call_1o(downvote, %cl_1_23 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	downvote[18.0 ] %cl_1_23[25.0 24.0 ] ) 
		downvote = copy(%cl_1_24)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_24[26.0 ] ) 
		line_num(;n: 112)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(v, vote ;n:vote=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	v[] vote[] ) #<v>#	-- [PUT:v].vote 
		line_num(;n: 113)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(v, reason ;n:reason=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	v[26.3 ] reason[] ) #<v>#	-- [PUT:v].reason 
		line_num(;n: 114)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_25 = call_0o(v ;n:save!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[26.3 26.5 ] ) 
		%cl_1_10 = copy(%cl_1_25)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_25[26.7 ] ) 
PRINT info for BB 27:
	Vars Live on Entry:  5 7 10 14 30 32 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:28, 31, 
	Instructions:
		line_num(;n: 117)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_26 = copy(update_counters)		--org.jruby.ir.instructions.CopyInstr(	update_counters[] ) 
		b_false(CL1_LBL_18:99, update_counters)		--org.jruby.ir.instructions.BFalseInstr(	update_counters[] ) 
PRINT info for BB 28:
	Vars Live on Entry:  5 7 10 14 30 33 34 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:29, 30, 44, 
	Instructions:
		%cl_1_27 = call_1f(downvote, Fixnum:0 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	downvote[26.1 10.0 ] downvote[26.1 10.0 ] ) #<downvote># 
		b_true(CL1_LBL_19:97, %cl_1_27)		--org.jruby.ir.instructions.BTrueInstr(	%cl_1_27[28.0 ] ) 
PRINT info for BB 29:
	Vars Live on Entry:  5 7 10 14 30 33 34 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:30, 44, 
	Instructions:
		%cl_1_28 = call_1f(upvote, Fixnum:0 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	upvote[23.1 7.0 ] upvote[23.1 7.0 ] ) #<upvote># 
		%cl_1_27 = copy(%cl_1_28)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_28[29.0 ] ) 
PRINT info for BB 30:
	Vars Live on Entry:  5 7 10 14 30 32 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 34 43		
	outgoing edges:31, 
	Instructions:
		%cl_1_26 = copy(%cl_1_27)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_27[29.1 28.0 ] ) 
PRINT info for BB 31:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 32 33 43		
	outgoing edges:32, 42, 
	Instructions:
		b_false(CL1_LBL_16:151, %cl_1_26)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_26[30.0 27.1 ] ) 
PRINT info for BB 32:
	Vars Live on Entry:  5 7 10 14 30 33 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:33, 37, 44, 
	Instructions:
		line_num(;n: 118)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_29 = call_0o(v ;n:comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[26.3 26.5 ] ) 
		b_false(CL1_LBL_20:126, %cl_1_29)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_29[32.1 ] ) 
PRINT info for BB 33:
	Vars Live on Entry:  5 7 10 14 30 33 40 43		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:34, 35, 44, 
	Instructions:
		line_num(;n: 119)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_30 = search_const(scope<2> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_31 = call_0o(v ;n:comment_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[26.3 26.5 ] ) 
		%cl_1_32 = call_1o(%cl_1_30, %cl_1_31 ;n:find, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_30[33.1 ] %cl_1_31[33.2 ] ) 
		c = copy(%cl_1_32)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_32[33.3 ] ) 
		line_num(;n: 120)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_33 = call_0o(%cl_1_32 ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_32[33.3 ] ) 
		%cl_1_34 = call_1o(%cl_1_33, user_id ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_33[33.6 ] user_id[] %cl_1_33[33.6 ] ) #<%cl_1_33># 
		b_false(CL1_LBL_22:120, %cl_1_34)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_34[33.7 ] ) 
PRINT info for BB 34:
	Vars Live on Entry:  5 7 10 14 30 33 40 43		
	Vars Live on Exit:  5 7 10 14 30 33 40 43		
	outgoing edges:36, 44, 
	Instructions:
		line_num(;n: 121)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_35 = search_const(scope<2> ;name: User, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_36 = call_0o(c ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[33.4 ] ) 
		%cl_1_37 = call_1o(upvote, downvote ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	upvote[29.0 23.1 7.0 ] downvote[28.0 26.1 10.0 ] ) 
		%cl_1_38 = copy({:'karma'=>%cl_1_37})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_37[34.3 ] ) 
		%cl_1_39 = call(%cl_1_35, %cl_1_36, %cl_1_38 ;n:update_counters, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%cl_1_35[34.1 ] %cl_1_36[34.2 ] %cl_1_38[34.4 ] ) 
		jump(CL1_LBL_23:122)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 35:
	Vars Live on Entry:  5 7 10 14 30 33 40 43		
	Vars Live on Exit:  5 7 10 14 30 33 40 43		
	outgoing edges:36, 
	Instructions:
		%cl_1_39 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 36:
	Vars Live on Entry:  49		
	Vars Live on Exit:  5 7 10 14 30 33 40 43		
	outgoing edges:41, 44, 
	Instructions:
		line_num(;n: 124)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_40 = call(c, upvote, downvote ;n:give_upvote_or_downvote_and_recalculate_confidence!, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	c[33.4 ] upvote[29.0 23.1 7.0 ] downvote[28.0 26.1 10.0 ] ) 
		jump(CL1_LBL_21:149)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 37:
	Vars Live on Entry:  5 7 10 14 30 33 43 53		
	Vars Live on Exit:  5 7 10 14 30 33 43		
	outgoing edges:38, 39, 44, 
	Instructions:
		line_num(;n: 127)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_41 = search_const(scope<2> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_42 = call_0o(v ;n:story_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[26.3 26.5 ] ) 
		%cl_1_43 = call_1o(%cl_1_41, %cl_1_42 ;n:find, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_41[37.1 ] %cl_1_42[37.2 ] ) 
		s = copy(%cl_1_43)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_43[37.3 ] ) 
		line_num(;n: 128)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_44 = call_0o(%cl_1_43 ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_43[37.3 ] ) 
		%cl_1_45 = call_1o(%cl_1_44, user_id ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_44[37.6 ] user_id[] %cl_1_44[37.6 ] ) #<%cl_1_44># 
		b_false(CL1_LBL_24:143, %cl_1_45)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_45[37.7 ] ) 
PRINT info for BB 38:
	Vars Live on Entry:  5 7 10 14 30 33 43 53		
	Vars Live on Exit:  5 7 10 14 30 33 43 53		
	outgoing edges:40, 44, 
	Instructions:
		line_num(;n: 129)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_46 = search_const(scope<2> ;name: User, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_47 = call_0o(s ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	s[37.4 ] ) 
		%cl_1_48 = call_1o(upvote, downvote ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	upvote[29.0 23.1 7.0 ] downvote[28.0 26.1 10.0 ] ) 
		%cl_1_49 = copy({:'karma'=>%cl_1_48})		--org.jruby.ir.instructions.CopyInstr(	%cl_1_48[38.3 ] ) 
		%cl_1_50 = call(%cl_1_46, %cl_1_47, %cl_1_49 ;n:update_counters, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%cl_1_46[38.1 ] %cl_1_47[38.2 ] %cl_1_49[38.4 ] ) 
		jump(CL1_LBL_25:145)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 39:
	Vars Live on Entry:  5 7 10 14 30 33 43 53		
	Vars Live on Exit:  5 7 10 14 30 33 43 53		
	outgoing edges:40, 
	Instructions:
		%cl_1_50 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 40:
	Vars Live on Entry:  49		
	Vars Live on Exit:  5 7 10 14 30 33 43 53		
	outgoing edges:41, 44, 
	Instructions:
		line_num(;n: 132)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_51 = call(s, upvote, downvote ;n:give_upvote_or_downvote_and_recalculate_hotness!, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	s[37.4 ] upvote[29.0 23.1 7.0 ] downvote[28.0 26.1 10.0 ] ) 
		%cl_1_40 = copy(%cl_1_51)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_51[40.1 ] ) 
PRINT info for BB 41:
	Vars Live on Entry: 
	Vars Live on Exit:  49		
	outgoing edges:46, 
	Instructions:
		return(%cl_1_40)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_40[40.2 36.1 ] ) 
PRINT info for BB 42:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:46, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 44:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:46, 
	Instructions:
		%cl_1_52 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_53 = runtime_helper(%cl_1_52 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_52[44.0 ] ) 
		return(%cl_1_53)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_53[44.1 ] ) 
PRINT info for BB 46:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_13)		--org.jruby.ir.instructions.ReturnInstr(	%v_13[8.7 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  4 5 6 7 8 9 14 20 21		
	Vars Live on Exit:  4 5 6 7 8 9 14 20 21		
	outgoing edges:
	Instructions:

