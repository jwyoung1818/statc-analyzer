SET IRMethod, name = find_similar_by_url
PRINT info for BB 1:
	Vars Live on Entry:  4 7 10 23		
	Vars Live on Exit:  4 7 10 23		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 7 10 23		
	Vars Live on Exit:  4 7 10 23		
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		url = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 73)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(url ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	url[2.5 ] ) 
		%v_4 = copy(Array:[%v_3])		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.7 ] ) 
		urls = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.8 ] ) 
		line_num(;n: 74)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(url ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	url[2.5 2.7 ] ) 
		%v_6 = copy(Array:[%v_5])		--org.jruby.ir.instructions.CopyInstr(	%v_5[2.11 ] ) 
		urls2 = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.12 ] ) 
		line_num(;n: 77)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call(urls, %self:CLOSURE find_similar_by_url_CLOSURE_1[./lobsters/models/story.rb:77] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	urls[2.9 ] %self[2.0 ] ) 
CLOSURE BEGIN: u[] urls2[2.13,] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		u = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 9		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 78)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = copy(RE:|^http:\/\/|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_4 = copy("https://")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_5 = call(u, RE:|^http:\/\/|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault), %cl_1_4 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	u[2.2 ] %cl_1_4[3.2 ] ) 
		%cl_1_6 = call_1o(urls2, %cl_1_5 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[] %cl_1_5[3.3 ] ) 
		line_num(;n: 79)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_7 = copy(RE:|^https:\/\/|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_8 = copy("http://")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_9 = call(u, RE:|^https:\/\/|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault), %cl_1_8 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	u[3.3 2.2 ] %cl_1_8[3.7 ] ) 
		%cl_1_10 = call_1o(urls2, %cl_1_9 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[3.4 ] %cl_1_9[3.8 ] ) 
		return(%cl_1_10)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_10[3.9 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_11 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_12 = runtime_helper(%cl_1_11 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_11[4.0 ] ) 
		return(%cl_1_12)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_12[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 81)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(urls2 ;n:clone, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	urls2[2.13 ] ) 
		urls = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[2.17 ] ) 
		line_num(;n: 84)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call(%v_8, %self:CLOSURE find_similar_by_url_CLOSURE_2[./lobsters/models/story.rb:84] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_8[2.17 ] %self[2.0 ] ) 
CLOSURE BEGIN: u[] urls2[2.13,2.17,] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		u = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 9		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 85)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = copy(RE:|\/+\z|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_4 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_5 = call(u, RE:|\/+\z|RegexpOptions(kcode: NONE, kcodeDefault), %cl_2_4 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	u[2.2 ] %cl_2_4[3.2 ] ) 
		%cl_2_6 = call_1o(urls2, %cl_2_5 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[] %cl_2_5[3.3 ] ) 
		line_num(;n: 86)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_7 = copy("/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_8 = call_1o(u, %cl_2_7 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	u[3.3 2.2 ] %cl_2_7[3.6 ] ) 
		%cl_2_9 = call_1o(urls2, %cl_2_8 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[3.4 ] %cl_2_8[3.7 ] ) 
		return(%cl_2_9)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_9[3.8 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_2_10 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_11 = runtime_helper(%cl_2_10 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_10[4.0 ] ) 
		return(%cl_2_11)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_11[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 88)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(urls2 ;n:clone, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	urls2[2.13 2.17 ] ) 
		urls = copy(%v_10)		--org.jruby.ir.instructions.CopyInstr(	%v_10[2.22 ] ) 
		line_num(;n: 91)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call(%v_10, %self:CLOSURE find_similar_by_url_CLOSURE_3[./lobsters/models/story.rb:91] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_10[2.22 ] %self[2.0 ] ) 
CLOSURE BEGIN: u[] %self[2.0,] urls2[2.13,2.17,2.22,] 
PRINT info for BB 1:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  8		
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_3_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		u = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 92)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_3 = copy(RE:|^(https?:\/\/)www\d*\.|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_3_4 = call_1ob(u, RE:|^(https?:\/\/)www\d*\.|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault), %self:CLOSURE find_similar_by_url_CLOSURE_3_CLOSURE_4[./lobsters/models/story.rb:92] ;n:gsub, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.specialized.OneOperandArgBlockCallInstr(	u[2.2 ] %self[2.0 ] ) 
CLOSURE BEGIN: 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_4_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		_ = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 92)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_4_3 = copy($1)		--org.jruby.ir.instructions.CopyInstr(	) 
		return(%cl_4_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_4_3[2.6 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%cl_3_5 = call_1o(urls2, %cl_3_4 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[] %cl_3_4[3.2 ] ) 
		line_num(;n: 93)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_6 = copy(RE:|^(https?:\/\/)|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_3_7 = call_1ob(u, RE:|^(https?:\/\/)|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault), %self:CLOSURE find_similar_by_url_CLOSURE_3_CLOSURE_5[./lobsters/models/story.rb:93] ;n:gsub, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.specialized.OneOperandArgBlockCallInstr(	u[2.2 ] %self[2.0 ] ) 
CLOSURE BEGIN: 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_5_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		_ = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 93)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_5_3 = copy($1)		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_5_4 = copy("www.")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_5_5 = build_compound_string(#{%cl_5_3}, %cl_5_4)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_5_3[3.1 ] %cl_5_4[3.2 ] ) 
		return(%cl_5_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_5_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_5_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_5_7 = runtime_helper(%cl_5_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_5_6[4.0 ] ) 
		return(%cl_5_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_5_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%cl_3_8 = call_1o(urls2, %cl_3_7 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	urls2[3.3 ] %cl_3_7[3.6 ] ) 
		return(%cl_3_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_8[3.7 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:6, 
	Instructions:
		%cl_3_9 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_3_10 = runtime_helper(%cl_3_9 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_3_9[4.0 ] ) 
		return(%cl_3_10)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_10[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 95)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = call_0o(urls2 ;n:clone, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	urls2[2.13 2.17 2.22 ] ) 
		urls = copy(%v_12)		--org.jruby.ir.instructions.CopyInstr(	%v_12[2.27 ] ) 
		line_num(;n: 97)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_14 = copy({:'url'=>%v_12, :'is_expired'=>false})		--org.jruby.ir.instructions.CopyInstr(	%v_12[2.27 ] ) 
		%v_15 = call_1o(%v_13, %v_14 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_13[2.30 ] %v_14[2.31 ] ) 
		%v_16 = copy("id DESC")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_17 = call_1o(%v_15, %v_16 ;n:order, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_15[2.32 ] %v_16[2.33 ] ) 
		%v_18 = call_0o(%v_17 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_17[2.34 ] ) 
		s = copy(%v_18)		--org.jruby.ir.instructions.CopyInstr(	%v_18[2.35 ] ) 
		b_false(LBL_0:41, %v_18)		--org.jruby.ir.instructions.BFalseInstr(	%v_18[2.35 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 7 10 23		
	Vars Live on Exit:  4 7 10 23		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 98)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(s)		--org.jruby.ir.instructions.ReturnInstr(	s[2.36 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  4 7 10 23		
	Vars Live on Exit:  4 7 10 23		
	outgoing edges:6, 
	Instructions:
		%v_19 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 102)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  4 7 10 23		
	Vars Live on Exit:  4 7 10 23		
	outgoing edges:
	Instructions:

SET IRMethod, name = recalculate_all_hotnesses!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 105)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%v_3 ;n:all, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("id DESC")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_1o(%v_4, %v_5 ;n:order, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_5[2.8 ] ) 
		%v_7 = call(%v_6, %self:CLOSURE recalculate_all_hotnesses!_CLOSURE_1[./lobsters/models/story.rb:105] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_6[2.9 ] %self[2.0 ] ) 
CLOSURE BEGIN: s[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		s = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 106)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(s ;n:recalculate_hotness!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	s[2.2 ] ) 
		return(%cl_1_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_5 = runtime_helper(%cl_1_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_4[4.0 ] ) 
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 109)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = score_sql
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 112)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("(CAST(upvotes AS ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call_0o(%self ;n:votes_cast_type, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = copy(") - ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = build_compound_string(%v_3, #{%v_4}, %v_5)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		%v_7 = copy("CAST(downvotes AS ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 113)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:votes_cast_type, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_9 = copy("))")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_10 = build_compound_string(%v_7, #{%v_8}, %v_9)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_7[2.10 ] %v_8[2.12 ] %v_9[2.13 ] ) 
		%v_11 = call_1o(%v_6, %v_10 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[2.9 ] %v_10[2.14 ] ) 
		return(%v_11)		--org.jruby.ir.instructions.ReturnInstr(	%v_11[2.15 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = votes_cast_type
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 117)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%v_3 ;n:connection, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = call_0o(%v_4 ;n:adapter_name, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = copy(RE:|mysql|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = call_1o(%v_5, RE:|mysql|RegexpOptions(kcode: NONE, ignorecase, kcodeDefault) ;n:match, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		b_false(LBL_0:15, %v_7)		--org.jruby.ir.instructions.BFalseInstr(	%v_7[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%v_8 = copy("signed")		--org.jruby.ir.instructions.CopyInstr(	) 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%v_9 = copy("integer")		--org.jruby.ir.instructions.CopyInstr(	) 
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[4.0 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = as_json
PRINT info for BB 1:
	Vars Live on Entry:  4 14 21		
	Vars Live on Exit:  4 14 21		
	outgoing edges:13, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 14 21		
	Vars Live on Exit:  4 14 21		
	outgoing edges:4, 5, 11, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 1, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		options = recv_opt_arg(;index:0, req: 0, pre: 0)		--org.jruby.ir.instructions.ReceiveOptArgInstr(	) 
		bne(LBL_0:12, options, %undefined)		--org.jruby.ir.instructions.BNEInstr(	options[2.5 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 14 21		
	Vars Live on Exit:  0 14 21		
	outgoing edges:5, 
	Instructions:
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		options = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[4.0 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 14 15 21		
	Vars Live on Exit:  0 4 14 21		
	outgoing edges:6, 7, 11, 
	Instructions:
		line_num(;n: 121)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy({:'comment_count'=>:'comments_count'})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = copy({:'description'=>:'markeddown_description'})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = copy({:'submitter_user'=>:'user'})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = call_0o(%self ;n:tags, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = call(%v_7, %self:CLOSURE as_json_CLOSURE_1[./lobsters/models/story.rb:134] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_7[5.4 ] %self[5.4 2.0 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 134)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		return(%cl_1_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_5 = runtime_helper(%cl_1_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_4[4.0 ] ) 
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_9 = call_0o(%v_8 ;n:sort, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[5.5 ] ) 
		%v_10 = copy({:'tags'=>%v_9})		--org.jruby.ir.instructions.CopyInstr(	%v_9[5.6 ] ) 
		%v_11 = copy(Array:[:'short_id', :'short_id_url', :'created_at', :'title', :'url', :'score', :'upvotes', :'downvotes', %v_4, %v_5, :'comments_url', %v_6, %v_10])		--org.jruby.ir.instructions.CopyInstr(	%v_4[5.1 ] %v_5[5.2 ] %v_6[5.3 ] %v_10[5.7 ] ) 
		h = copy(%v_11)		--org.jruby.ir.instructions.CopyInstr(	%v_11[5.8 ] ) 
		line_num(;n: 137)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = copy(options)		--org.jruby.ir.instructions.CopyInstr(	options[4.1 2.5 ] ) 
		b_false(LBL_3:28, options)		--org.jruby.ir.instructions.BFalseInstr(	options[4.1 2.5 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 14 15 21		
	Vars Live on Exit:  0 4 14 21		
	outgoing edges:7, 11, 
	Instructions:
		%v_13 = call_1o(options, :'with_comments' ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	options[4.1 2.5 ] ) 
		%v_12 = copy(%v_13)		--org.jruby.ir.instructions.CopyInstr(	%v_13[6.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 4 14 21		
	Vars Live on Exit:  0 4 14 15 21		
	outgoing edges:8, 9, 
	Instructions:
		b_false(LBL_1:35, %v_12)		--org.jruby.ir.instructions.BFalseInstr(	%v_12[6.1 5.11 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 4 14 21		
	Vars Live on Exit:  0 4 14 21		
	outgoing edges:10, 11, 
	Instructions:
		line_num(;n: 138)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = call_1o(options, :'with_comments' ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	options[4.1 2.5 ] ) 
		%v_15 = copy({:'comments'=>%v_14})		--org.jruby.ir.instructions.CopyInstr(	%v_14[8.1 ] ) 
		%v_16 = call_1o(h, %v_15 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	h[5.9 ] %v_15[8.2 ] ) 
		jump(LBL_2:37)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  0 4 14		
	Vars Live on Exit:  0 4 14		
	outgoing edges:10, 
	Instructions:
		%v_16 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  4 14 21		
	Vars Live on Exit:  0 4 14		
	outgoing edges:11, 13, 
	Instructions:
		line_num(;n: 141)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		js = copy(%v_17)		--org.jruby.ir.instructions.CopyInstr(	%v_17[10.1 ] ) 
		line_num(;n: 142)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_18 = call(h, %self:CLOSURE as_json_CLOSURE_2[./lobsters/models/story.rb:142] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	h[5.9 ] %self[2.0 ] ) 
CLOSURE BEGIN: k[] %self[2.0,] js[10.2,] 
PRINT info for BB 1:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:15, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  8		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		k = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:4, 5, 13, 
	Instructions:
		line_num(;n: 143)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = search_const(scope<2> ;name: Symbol, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_4 = call_1o(k, %cl_2_3 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_2_3[3.1 ] ) 
		b_false(CL2_LBL_0:16, %cl_2_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 7 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:12, 13, 
	Instructions:
		line_num(;n: 144)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_5 = call_1o(%self, k ;n:send, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] k[2.2 ] ) 
		attr_assign(js, k, %cl_2_5 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] k[2.2 ] %cl_2_5[4.1 ] ) #<js>#	-- [PUT:js].[] 
		jump(CL2_LBL_1:49)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:6, 10, 13, 
	Instructions:
		line_num(;n: 145)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_6 = search_const(scope<2> ;name: Hash, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_7 = call_1o(k, %cl_2_6 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_2_6[5.1 ] ) 
		b_false(CL2_LBL_2:45, %cl_2_7)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_7[5.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 2 8		
	Vars Live on Exit:  0 2 8		
	outgoing edges:7, 8, 13, 
	Instructions:
		line_num(;n: 146)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_8 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_2_9 = call_0o(%cl_2_8 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_8[6.1 ] ) 
		%cl_2_10 = search_const(scope<2> ;name: Symbol, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_11 = call_1o(%cl_2_9, %cl_2_10 ;n:is_a?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_9[6.2 ] %cl_2_10[6.3 ] ) 
		b_false(CL2_LBL_4:35, %cl_2_11)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_11[6.4 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  0 2 8		
	outgoing edges:9, 13, 
	Instructions:
		line_num(;n: 147)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_12 = call_0o(k ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_2_13 = call_0o(%cl_2_12 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_12[7.1 ] ) 
		%cl_2_14 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[7.1 2.2 ] ) 
		%cl_2_15 = call_0o(%cl_2_14 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_14[7.3 ] ) 
		%cl_2_16 = call_1o(%self, %cl_2_15 ;n:send, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_2_15[7.4 ] ) 
		attr_assign(js, %cl_2_13, %cl_2_16 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] %cl_2_13[7.2 ] %cl_2_16[7.5 ] ) #<js>#	-- [PUT:js].[] 
		jump(CL2_LBL_5:43)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8		
	outgoing edges:9, 13, 
	Instructions:
		line_num(;n: 149)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_17 = call_0o(k ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[2.2 ] ) 
		%cl_2_18 = call_0o(%cl_2_17 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_17[8.1 ] ) 
		%cl_2_19 = call_0o(k ;n:values, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	k[8.1 2.2 ] ) 
		%cl_2_20 = call_0o(%cl_2_19 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_19[8.3 ] ) 
		attr_assign(js, %cl_2_18, %cl_2_20 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	js[] %cl_2_18[8.2 ] %cl_2_20[8.4 ] ) #<js>#	-- [PUT:js].[] 
		%cl_2_16 = copy(%cl_2_20)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_20[8.4 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8 19		
	outgoing edges:11, 
	Instructions:
		jump(CL2_LBL_3:47)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  2 8 19		
	Vars Live on Exit:  2 8		
	outgoing edges:11, 
	Instructions:
		%cl_2_16 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8 19		
	outgoing edges:15, 
	Instructions:
		return(%cl_2_16)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_16[10.0 8.6 7.5 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 7 8		
	outgoing edges:15, 
	Instructions:
		return(%cl_2_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_5[4.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:15, 
	Instructions:
		%cl_2_21 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_22 = runtime_helper(%cl_2_21 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_21[13.0 ] ) 
		return(%cl_2_22)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_22[13.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 154)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(js)		--org.jruby.ir.instructions.ReturnInstr(	js[10.2 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  4 14 21		
	Vars Live on Exit:  4 14 21		
	outgoing edges:13, 
	Instructions:
		%v_19 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_20 = runtime_helper(%v_19 ;method: HANDLE_NONLOCAL_RETURN)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_19[11.0 ] ) 
		return(%v_20)		--org.jruby.ir.instructions.ReturnInstr(	%v_20[11.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  4 14 21		
	Vars Live on Exit:  4 14 21		
	outgoing edges:
	Instructions:

SET IRMethod, name = assign_initial_hotness
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 158)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:calculated_hotness, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		attr_assign(%self, %v_3 ;n:hotness=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.6 ] %v_3[2.6 ] ) #<%self>#	-- [PUT:%self].hotness 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = assign_short_id_and_upvote
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 162)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: ShortId, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:generate, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		attr_assign(%self, %v_6 ;n:short_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.7 ] %v_6[2.9 ] ) #<%self>#	-- [PUT:%self].short_id 
		line_num(;n: 163)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, Fixnum:1 ;n:upvotes=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.7 2.10 ] ) #<%self>#	-- [PUT:%self].upvotes 
		return(Fixnum:1)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = calculated_hotness
PRINT info for BB 1:
	Vars Live on Entry:  4 17 26 29 36		
	Vars Live on Exit:  4 17 26 29 36		
	outgoing edges:12, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 17 26 29 36		
	Vars Live on Exit:  4 17 26 29 36		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 167)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		base = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 168)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:tags, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call(%v_3, %self:CLOSURE calculated_hotness_CLOSURE_1[./lobsters/models/story.rb:168] ;n:select, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_3[2.8 ] %self[2.0 2.8 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 168)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(t ;n:hotness_mod, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_4 = call_1f(%cl_1_3, Fixnum:0 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_3[3.1 ] %cl_1_3[3.1 ] ) #<%cl_1_3># 
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_5 = call(%v_4, %self:CLOSURE calculated_hotness_CLOSURE_2[./lobsters/models/story.rb:168] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_4[2.9 ] %self[2.0 2.8 ] ) 
CLOSURE BEGIN: t[] base[2.6,] 
PRINT info for BB 1:
	Vars Live on Entry:  7		
	Vars Live on Exit:  7		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 7		
	Vars Live on Exit:  7		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2 7		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 169)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(t ;n:hotness_mod, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_2_4 = call_1o(base, %cl_2_3 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	base[] %cl_2_3[3.1 ] ) 
		base = copy(%cl_2_4)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_4[3.2 ] ) 
		return(%cl_2_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_2_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_6 = runtime_helper(%cl_2_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_5[4.0 ] ) 
		return(%cl_2_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 174)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = call_0o(%self ;n:comments, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 ] ) 
		%v_7 = copy("user_id <> ?")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.12 ] ) 
		%v_9 = call(%v_6, %v_7, %v_8 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_6[2.12 ] %v_7[2.13 ] %v_8[2.14 ] ) 
		%v_10 = call(%v_9, :'upvotes', :'downvotes' ;n:select, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_9[2.15 ] ) 
		%v_11 = call(%v_10, %self:CLOSURE calculated_hotness_CLOSURE_3[./lobsters/models/story.rb:175] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_10[2.16 ] %self[2.0 2.8 2.12 2.14 ] ) 
CLOSURE BEGIN: c[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_3_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		c = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 175)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_3 = call_0o(c ;n:upvotes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[2.2 ] ) 
		%cl_3_4 = call_1f(%cl_3_3, Fixnum:1 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_3_3[3.1 ] ) 
		%cl_3_5 = call_0o(c ;n:downvotes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[3.1 2.2 ] ) 
		%cl_3_6 = call_1o(%cl_3_4, %cl_3_5 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_3_4[3.2 ] %cl_3_5[3.3 ] ) 
		return(%cl_3_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_6[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_3_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_3_8 = runtime_helper(%cl_3_7 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_3_7[4.0 ] ) 
		return(%cl_3_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_12 = call(%v_11, :'+' ;n:inject, t:NO, cl:true(org.jruby.ir.operands.Symbol))		--org.jruby.ir.instructions.CallInstr(	%v_11[2.17 ] ) 
		%v_13 = call_0o(%v_12 ;n:to_f, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_12[2.18 ] ) 
		%v_14 = call_1d(%v_13, Float:0.5 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFloatArgNoBlockCallInstr(	%v_13[2.19 ] ) 
		cpoints = copy(%v_14)		--org.jruby.ir.instructions.CopyInstr(	%v_14[2.20 ] ) 
		line_num(;n: 179)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_15 = search_const(scope<1> ;name: Math, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_16 = call_0o(%self ;n:score, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.12 2.14 ] ) 
		%v_17 = call_1f(%v_16, Fixnum:1 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_16[2.24 ] ) 
		%v_18 = call_0o(%v_17 ;n:abs, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_17[2.25 ] ) 
		%v_19 = call_1o(%v_18, cpoints ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_18[2.26 ] cpoints[2.21 ] ) 
		%v_20 = copy(Array:[%v_19, Fixnum:1])		--org.jruby.ir.instructions.CopyInstr(	%v_19[2.27 ] ) 
		%v_21 = call_0o(%v_20 ;n:max, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_20[2.28 ] ) 
		%v_22 = call(%v_15, %v_21, Fixnum:10 ;n:log, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_15[2.23 ] %v_21[2.29 ] ) 
		order = copy(%v_22)		--org.jruby.ir.instructions.CopyInstr(	%v_22[2.30 ] ) 
		line_num(;n: 180)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_23 = call_0o(%self ;n:score, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.12 2.14 2.24 ] ) 
		%v_24 = call_1f(%v_23, Fixnum:0 ;n:>, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_23[2.33 ] ) 
		b_false(LBL_0:41, %v_24)		--org.jruby.ir.instructions.BFalseInstr(	%v_24[2.34 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 17 26 29 36		
	Vars Live on Exit:  0 4 17 26 36		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 181)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		sign = copy(Fixnum:1)		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_25 = copy(Fixnum:1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_1:56)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 17 26 36		
	Vars Live on Exit:  0 4 17 26 29 36		
	outgoing edges:5, 6, 
	Instructions:
		line_num(;n: 182)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_26 = call_0o(%self ;n:score, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_27 = call_1f(%v_26, Fixnum:0 ;n:<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_26[4.1 ] ) 
		b_false(LBL_2:50, %v_27)		--org.jruby.ir.instructions.BFalseInstr(	%v_27[4.2 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 17 26 29 33 36		
	Vars Live on Exit:  0 4 17 26 36		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 183)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		sign = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_28 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_3:54)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 17 26 29 33 36		
	Vars Live on Exit:  0 4 17 26 36		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 185)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		sign = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_28 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 4 17 26 29 36		
	Vars Live on Exit:  0 4 17 26 29 33 36		
	outgoing edges:8, 
	Instructions:
		%v_25 = copy(%v_28)		--org.jruby.ir.instructions.CopyInstr(	%v_28[6.2 5.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  4 17 26 29 36 38 39		
	Vars Live on Exit:  0 4 17 26 29 36		
	outgoing edges:9, 10, 
	Instructions:
		line_num(;n: 189)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_29 = call_1f(Fixnum:60, Fixnum:60 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	) 
		%v_30 = call_1f(%v_29, Fixnum:24 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_29[8.1 ] ) 
		window = copy(%v_30)		--org.jruby.ir.instructions.CopyInstr(	%v_30[8.2 ] ) 
		line_num(;n: 191)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_31 = call_1o(order, sign ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	order[2.31 ] sign[3.1 6.1 5.1 ] ) 
		%v_32 = call_1o(%v_31, base ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_31[8.5 ] base[2.6 ] ) 
		line_num(;n: 192)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_33 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_true(LBL_4:70, %v_33)		--org.jruby.ir.instructions.BTrueInstr(	%v_33[8.8 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  4 17 26 29 36 38 39		
	Vars Live on Exit:  4 17 26 29 36 38		
	outgoing edges:10, 
	Instructions:
		%v_34 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_35 = call_0o(%v_34 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_34[9.0 ] ) 
		%v_33 = copy(%v_35)		--org.jruby.ir.instructions.CopyInstr(	%v_35[9.1 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  4 17 26 29 36		
	Vars Live on Exit:  4 17 26 29 36 38 39		
	outgoing edges:12, 
	Instructions:
		%v_36 = call_0o(%v_33 ;n:to_f, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_33[9.2 8.8 ] ) 
		%v_37 = call_1o(%v_36, window ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_36[10.0 ] window[8.3 ] ) 
		%v_38 = call_1o(%v_32, %v_37 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_32[8.6 ] %v_37[10.1 ] ) 
		%v_39 = call_1f(%v_38, Fixnum:7 ;n:round, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_38[10.2 ] ) 
		%v_40 = call_0o(%v_39 ;n:-@, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_39[10.3 ] ) 
		return(%v_40)		--org.jruby.ir.instructions.ReturnInstr(	%v_40[10.4 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  4 17 26 29 36		
	Vars Live on Exit:  4 17 26 29 36		
	outgoing edges:
	Instructions:

SET IRMethod, name = can_be_seen_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 8, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 196)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:is_gone?, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_2:23, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 6		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 7, 
	Instructions:
		%v_4 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_3:20, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 6, 
	Instructions:
		%v_5 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		b_true(LBL_4:18, %v_5)		--org.jruby.ir.instructions.BTrueInstr(	%v_5[4.0 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  7		
	Vars Live on Exit:  0 4		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_7 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = call_1o(%v_6, %v_7 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[5.0 ] %v_7[5.1 ] ) 
		%v_5 = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[5.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  6		
	Vars Live on Exit:  7		
	outgoing edges:7, 
	Instructions:
		%v_4 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[5.3 4.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  5		
	Vars Live on Exit:  6		
	outgoing edges:8, 
	Instructions:
		%v_9 = call_0o(%v_4 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[6.0 3.0 ] ) 
		%v_3 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[7.0 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  5		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_0:27, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[7.1 2.7 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		line_num(;n: 197)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		%v_10 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 201)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = check_tags
PRINT info for BB 1:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 6		
	Vars Live on Exit:  6		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 206)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:editor, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_true(LBL_0:11, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 6		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 6, 
	Instructions:
		u = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[3.1 2.6 ] ) 
		line_num(;n: 208)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = call(%v_5, %self:CLOSURE check_tags_CLOSURE_1[./lobsters/models/story.rb:208] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_5[4.2 ] %self[4.2 2.0 ] ) 
CLOSURE BEGIN: t[] u[4.0,] %self[4.2,2.0,] 
PRINT info for BB 1:
	Vars Live on Entry:  7		
	Vars Live on Exit:  7		
	outgoing edges:16, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2 7		
	Vars Live on Exit:  7		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 2 7		
	Vars Live on Exit:  0 2 7		
	outgoing edges:4, 5, 14, 
	Instructions:
		line_num(;n: 209)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_4 = call_1o(%cl_1_3, u ;n:valid_for?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] u[] ) 
		%cl_1_5 = call_0o(%cl_1_4 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_4[3.2 ] ) 
		b_false(CL1_LBL_0:25, %cl_1_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  17		
	Vars Live on Exit:  0 2 7		
	outgoing edges:13, 14, 
	Instructions:
		line_num(;n: 210)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_6 = call_0o(u ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[] ) 
		%cl_1_7 = copy(" does not have permission to use privileged ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_8 = build_compound_string(#{%cl_1_6}, %cl_1_7)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_6[4.1 ] %cl_1_7[4.2 ] ) 
		%cl_1_9 = copy("tag ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 211)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_10 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_11 = call_0o(%cl_1_10 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_10[4.6 ] ) 
		%cl_1_12 = build_compound_string(%cl_1_9, #{%cl_1_11})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_9[4.4 ] %cl_1_11[4.7 ] ) 
		%cl_1_13 = call_1o(%cl_1_8, %cl_1_12 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_8[4.3 ] %cl_1_12[4.8 ] ) 
		%cl_1_14 = call_1o(%self, %cl_1_13 ;n:raise, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_1_13[4.9 ] ) 
		jump(CL1_LBL_1:52)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  0 2 7 19		
	Vars Live on Exit:  0 2 7		
	outgoing edges:6, 7, 14, 
	Instructions:
		line_num(;n: 212)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_15 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_16 = call_0o(%cl_1_15 ;n:inactive?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_15[5.1 ] ) 
		b_false(CL1_LBL_5:33, %cl_1_16)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_16[5.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 2 7 19		
	Vars Live on Exit:  0 2 7		
	outgoing edges:7, 14, 
	Instructions:
		%cl_1_17 = call_0o(t ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_18 = call_0o(%cl_1_17 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_17[6.0 ] ) 
		%cl_1_16 = copy(%cl_1_18)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_18[6.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 2 7 19		
	Vars Live on Exit:  0 2 7 19		
	outgoing edges:8, 9, 
	Instructions:
		b_false(CL1_LBL_4:38, %cl_1_16)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_16[6.2 5.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 2 7 19		
	Vars Live on Exit:  0 2 7		
	outgoing edges:9, 14, 
	Instructions:
		%cl_1_19 = call_0o(t ;n:marked_for_destruction?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_20 = call_0o(%cl_1_19 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_19[8.0 ] ) 
		%cl_1_16 = copy(%cl_1_20)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_20[8.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  0 2 7		
	Vars Live on Exit:  0 2 7 19		
	outgoing edges:10, 11, 
	Instructions:
		b_false(CL1_LBL_2:48, %cl_1_16)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_16[8.2 6.2 5.2 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  29		
	Vars Live on Exit:  0 2 7		
	outgoing edges:12, 14, 
	Instructions:
		line_num(;n: 214)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_21 = call_0o(u ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[] ) 
		%cl_1_22 = copy(" cannot add inactive tag ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_23 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_24 = call_0o(%cl_1_23 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_23[10.3 ] ) 
		%cl_1_25 = build_compound_string(#{%cl_1_21}, %cl_1_22, #{%cl_1_24})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_21[10.1 ] %cl_1_22[10.2 ] %cl_1_24[10.4 ] ) 
		%cl_1_26 = call_1o(%self, %cl_1_25 ;n:raise, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_1_25[10.5 ] ) 
		jump(CL1_LBL_3:50)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  29		
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		%cl_1_26 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit:  29		
	outgoing edges:16, 
	Instructions:
		return(%cl_1_26)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_26[11.0 10.6 ] ) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit:  17		
	outgoing edges:16, 
	Instructions:
		return(%cl_1_14)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_14[4.10 ] ) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:16, 
	Instructions:
		%cl_1_27 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_28 = runtime_helper(%cl_1_27 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_27[14.0 ] ) 
		return(%cl_1_28)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_28[14.1 ] ) 
PRINT info for BB 16:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 218)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[4.2 2.0 ] ) 
		%v_8 = call(%v_7, %self:CLOSURE check_tags_CLOSURE_2[./lobsters/models/story.rb:218] ;n:reject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_7[4.5 ] %self[4.2 4.5 2.0 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 5		
	Vars Live on Exit:  2		
	outgoing edges:4, 5, 6, 
	Instructions:
		line_num(;n: 218)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(t ;n:marked_for_destruction?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		b_true(CL2_LBL_0:14, %cl_2_3)		--org.jruby.ir.instructions.BTrueInstr(	%cl_2_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:6, 8, 
	Instructions:
		%cl_2_4 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_2_5 = call_0o(%cl_2_4 ;n:is_media?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_4[4.0 ] ) 
		return(%cl_2_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_5[4.1 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  5		
	outgoing edges:8, 
	Instructions:
		return(%cl_2_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_3[3.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 
	Instructions:
		%cl_2_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_7 = runtime_helper(%cl_2_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_6[6.0 ] ) 
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[6.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_9 = call_0o(%v_8 ;n:any?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[4.6 ] ) 
		%v_10 = call_0o(%v_9 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[4.7 ] ) 
		b_false(LBL_1:31, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[4.8 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  6		
	Vars Live on Exit:  0 6		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 220)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(%self ;n:errors, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_12 = copy("Must have at least one non-media (PDF, video) ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_13 = copy("tag.  If no tags apply to your content, it probably doesn't ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = call_1o(%v_12, %v_13 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[5.2 ] %v_13[5.3 ] ) 
		%v_15 = copy("belong here.")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = call_1o(%v_14, %v_15 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_14[5.4 ] %v_15[5.5 ] ) 
		%v_17 = call(%v_11, :'base', %v_16 ;n:add, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_11[5.1 ] %v_16[5.6 ] ) 
		return(%v_17)		--org.jruby.ir.instructions.ReturnInstr(	%v_17[5.7 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:8, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:
	Instructions:

SET IRMethod, name = comments_path
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 227)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:short_id_path, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = copy("/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_0o(%self ;n:title_as_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_6 = build_compound_string(#{%v_3}, %v_4, #{%v_5})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = comments_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 231)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:short_id_url, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = copy("/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_0o(%self ;n:title_as_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_6 = build_compound_string(#{%v_3}, %v_4, #{%v_5})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = description=
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		desc = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 235)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(desc ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	desc[2.5 ] ) 
		%v_4 = call_0o(%v_3 ;n:rstrip, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.7 ] ) 
		attr_assign(%self, :'description', %v_4 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	%self[2.0 ] %v_4[2.8 ] ) #<%self>#	-- [PUT:%self].[] 
		line_num(;n: 236)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(%self ;n:generated_markeddown_description, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.9 ] ) 
		attr_assign(%self, %v_5 ;n:markeddown_description=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.9 2.11 ] %v_5[2.11 ] ) #<%self>#	-- [PUT:%self].markeddown_description 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.11 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = description_or_story_cache
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 1, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		chars = recv_opt_arg(;index:0, req: 0, pre: 0)		--org.jruby.ir.instructions.ReceiveOptArgInstr(	) 
		bne(LBL_0:9, chars, %undefined)		--org.jruby.ir.instructions.BNEInstr(	chars[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		chars = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 6, 
	Instructions:
		line_num(;n: 240)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:description, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[4.1 ] ) 
		b_false(LBL_1:20, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[4.2 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  4 10		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 241)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_0o(%self ;n:markeddown_description, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = copy(RE:|<[^>]*>|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call(%v_5, RE:|<[^>]*>|RegexpOptions(kcode: NONE, kcodeDefault), %v_7 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_5[5.1 ] %v_7[5.3 ] ) 
		jump(LBL_2:24)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  4 10		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 243)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call_0o(%self ;n:story_cache, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[6.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  4 12		
	Vars Live on Exit:  4 10		
	outgoing edges:8, 9, 
	Instructions:
		s = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[6.2 5.4 ] ) 
		line_num(;n: 246)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_1f(chars, Fixnum:0 ;n:>, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	chars[3.0 2.5 ] ) 
		b_false(LBL_3:37, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[7.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  12		
	Vars Live on Exit:  4 12		
	outgoing edges:10, 
	Instructions:
		line_num(;n: 248)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(s ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	s[7.0 ] ) 
		%v_12 = call(%v_11, Fixnum:0, chars ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_11[8.1 ] chars[3.0 2.5 ] ) 
		%v_13 = copy(RE:| [^ ]*\z|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call(%v_12, RE:| [^ ]*\z|RegexpOptions(kcode: NONE, kcodeDefault), %v_14 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_12[8.2 ] %v_14[8.4 ] ) 
		s = copy(%v_15)		--org.jruby.ir.instructions.CopyInstr(	%v_15[8.5 ] ) 
		jump(LBL_4:39)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  12		
	Vars Live on Exit:  12		
	outgoing edges:10, 
	Instructions:
		%v_15 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit:  12		
	outgoing edges:11, 
	Instructions:
		line_num(;n: 251)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = search_const(scope<1> ;name: HTMLEntities, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_17 = call_0o(%v_16 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_16[10.1 ] ) 
		%v_18 = call_0o(s ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	s[8.6 7.0 ] ) 
		%v_19 = call_1o(%v_17, %v_18 ;n:decode, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_17[10.2 ] %v_18[10.3 ] ) 
		return(%v_19)		--org.jruby.ir.instructions.ReturnInstr(	%v_19[10.4 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = domain
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 255)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:blank?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		b_false(LBL_0:13, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		line_num(;n: 257)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 259)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = copy(RE:|^[^:]+:\/\/|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = call(%v_6, RE:|^[^:]+:\/\/|RegexpOptions(kcode: NONE, kcodeDefault), %v_8 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_6[4.1 ] %v_8[4.3 ] ) 
		%v_10 = copy(RE:|\/.*|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_11 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = call(%v_9, RE:|\/.*|RegexpOptions(kcode: NONE, kcodeDefault), %v_11 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_9[4.4 ] %v_11[4.6 ] ) 
		%v_13 = copy(RE:|:\d+$|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call(%v_12, RE:|:\d+$|RegexpOptions(kcode: NONE, kcodeDefault), %v_14 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_12[4.7 ] %v_14[4.9 ] ) 
		%v_16 = copy(RE:|^www\d*\.(.+\..+)|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_17 = copy("\1")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_18 = call(%v_15, RE:|^www\d*\.(.+\..+)|RegexpOptions(kcode: NONE, kcodeDefault), %v_17 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_15[4.10 ] %v_17[4.12 ] ) 
		return(%v_18)		--org.jruby.ir.instructions.ReturnInstr(	%v_18[4.13 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = domain_search_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 269)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("/search?q=domain:")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call_0o(%self ;n:domain, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = copy("&order=newest")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = build_compound_string(%v_3, #{%v_4}, %v_5)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = fetch_story_cache!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 273)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		b_false(LBL_0:16, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 274)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = search_const(scope<1> ;name: StoryCacher, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_6 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = call_1o(%v_5, %v_6 ;n:get_story_text, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[3.1 ] %v_6[3.2 ] ) 
		attr_assign(%self, %v_7 ;n:story_cache=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[3.2 2.0 ] %v_7[3.3 ] ) #<%self>#	-- [PUT:%self].story_cache 
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = generated_markeddown_description
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 279)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Markdowner, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:description, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = copy({:'allow_images'=>true})		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call(%v_3, %v_4, %v_5 ;n:to_html, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = give_upvote_or_downvote_and_recalculate_hotness!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 2, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		upvote = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		downvote = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 283)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:upvotes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(upvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	upvote[2.5 ] ) 
		%v_6 = call_1o(%v_3, %v_5 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.8 ] %v_5[2.9 ] ) 
		%v_4 = call_1o(%self, %v_6 ;n:upvotes=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 2.8 ] %v_6[2.10 ] ) #<%self>#	-- [PUT:%self].upvotes 
		line_num(;n: 284)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_0o(%self ;n:downvotes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.11 ] ) 
		%v_9 = call_0o(downvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	downvote[2.6 ] ) 
		%v_10 = call_1o(%v_7, %v_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[2.13 ] %v_9[2.14 ] ) 
		%v_8 = call_1o(%self, %v_10 ;n:downvotes=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.11 2.13 ] %v_10[2.15 ] ) #<%self>#	-- [PUT:%self].downvotes 
		line_num(;n: 286)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_12 = call_0o(%v_11 ;n:connection, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_11[2.18 ] ) 
		%v_13 = copy("UPDATE ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_15 = call_0o(%v_14 ;n:table_name, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_14[2.21 ] ) 
		%v_16 = copy(" SET ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_17 = build_compound_string(%v_13, #{%v_15}, %v_16)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_13[2.20 ] %v_15[2.22 ] %v_16[2.23 ] ) 
		%v_18 = copy("upvotes = COALESCE(upvotes, 0) + ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 287)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_19 = call_0o(upvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	upvote[2.5 2.9 ] ) 
		%v_20 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_21 = build_compound_string(%v_18, #{%v_19}, %v_20)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_18[2.25 ] %v_19[2.27 ] %v_20[2.28 ] ) 
		%v_22 = call_1o(%v_17, %v_21 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_17[2.24 ] %v_21[2.29 ] ) 
		%v_23 = copy("downvotes = COALESCE(downvotes, 0) + ")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 288)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_24 = call_0o(downvote ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	downvote[2.6 2.14 ] ) 
		%v_25 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_26 = build_compound_string(%v_23, #{%v_24}, %v_25)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_23[2.31 ] %v_24[2.33 ] %v_25[2.34 ] ) 
		%v_27 = call_1o(%v_22, %v_26 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_22[2.30 ] %v_26[2.35 ] ) 
		%v_28 = copy("hotness = '")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 289)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_29 = call_0o(%self ;n:calculated_hotness, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.11 2.13 2.16 ] ) 
		%v_30 = copy("' WHERE id = ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_31 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 2.11 2.13 2.16 2.39 ] ) 
		%v_32 = call_0o(%v_31 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_31[2.41 ] ) 
		%v_33 = build_compound_string(%v_28, #{%v_29}, %v_30, #{%v_32})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_28[2.37 ] %v_29[2.39 ] %v_30[2.40 ] %v_32[2.42 ] ) 
		%v_34 = call_1o(%v_27, %v_33 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_27[2.36 ] %v_33[2.43 ] ) 
		%v_35 = call_1o(%v_12, %v_34 ;n:execute, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[2.19 ] %v_34[2.44 ] ) 
		return(%v_35)		--org.jruby.ir.instructions.ReturnInstr(	%v_35[2.45 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = hider_count
PRINT info for BB 1:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:7, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 5 6		
	Vars Live on Exit:  6		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 293)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = runtime_helper(%self, "@hider_count" ;method: IS_DEFINED_INSTANCE_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%self[2.0 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.6 ] ) 
		b_nil(LBL_1:12, %v_4)		--org.jruby.ir.instructions.BNilInstr(	%v_4[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 5 6		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		%v_5 = get_field(%self ;name: @hider_count)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].hider_count 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 5 6		
	outgoing edges:5, 6, 
	Instructions:
		b_true(LBL_0:21, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		%v_6 = search_const(scope<1> ;name: HiddenStory, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_7 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = copy({:'story_id'=>%v_7})		--org.jruby.ir.instructions.CopyInstr(	%v_7[5.1 ] ) 
		%v_9 = call_1o(%v_6, %v_8 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[5.0 ] %v_8[5.2 ] ) 
		%v_10 = call_0o(%v_9 ;n:count, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[5.3 ] ) 
		put_field(%self, %v_10 ;name: @hider_count)		--org.jruby.ir.instructions.PutFieldInstr(	%self[5.1 2.0 ] %v_10[5.4 ] ) #<%self>#	-- [PUT:%self].hider_count 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[5.4 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  6		
	outgoing edges:7, 
	Instructions:
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[3.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = html_class_for_user
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 1, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		u = recv_opt_arg(;index:0, req: 0, pre: 0)		--org.jruby.ir.instructions.ReceiveOptArgInstr(	) 
		bne(LBL_0:9, u, %undefined)		--org.jruby.ir.instructions.BNEInstr(	u[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		u = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0		
	outgoing edges:5, 6, 
	Instructions:
		line_num(;n: 297)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		c = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[4.1 ] ) 
		line_num(;n: 298)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%v_4 ;n:is_active?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[4.4 ] ) 
		%v_6 = call_0o(%v_5 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[4.5 ] ) 
		b_false(LBL_1:22, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[4.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:13, 
	Instructions:
		line_num(;n: 299)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = copy("inactive_user")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1o(c, %v_7 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	c[4.2 ] %v_7[5.1 ] ) 
		jump(LBL_2:45)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 6		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 300)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call_0o(%self ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_10 = call_0o(%v_9 ;n:is_new?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[6.1 ] ) 
		b_false(LBL_3:31, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[6.2 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  6 15		
	Vars Live on Exit:  6		
	outgoing edges:12, 
	Instructions:
		line_num(;n: 301)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = copy("new_user")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = call_1o(c, %v_11 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	c[4.2 ] %v_11[7.1 ] ) 
		jump(LBL_4:43)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  6		
	Vars Live on Exit:  0 6		
	outgoing edges:9, 10, 
	Instructions:
		line_num(;n: 302)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = call_0o(%self ;n:user_is_author?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_5:39, %v_13)		--org.jruby.ir.instructions.BFalseInstr(	%v_13[8.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  6 18		
	Vars Live on Exit:  6		
	outgoing edges:11, 
	Instructions:
		line_num(;n: 303)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy("user_is_author")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call_1o(c, %v_14 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	c[4.2 ] %v_14[9.1 ] ) 
		jump(LBL_6:41)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  6 18		
	Vars Live on Exit:  6		
	outgoing edges:11, 
	Instructions:
		%v_15 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  6 15		
	Vars Live on Exit:  6 18		
	outgoing edges:12, 
	Instructions:
		%v_12 = copy(%v_15)		--org.jruby.ir.instructions.CopyInstr(	%v_15[10.0 9.2 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6 15		
	outgoing edges:13, 
	Instructions:
		%v_8 = copy(%v_12)		--org.jruby.ir.instructions.CopyInstr(	%v_12[11.0 7.2 ] ) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit:  6		
	outgoing edges:14, 
	Instructions:
		line_num(;n: 306)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_17 = call_1o(c, %v_16 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	c[4.2 ] %v_16[13.1 ] ) 
		return(%v_17)		--org.jruby.ir.instructions.ReturnInstr(	%v_17[13.2 ] ) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_downvotable?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 310)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_editable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 319)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_2:12, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4 5		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:16, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 320)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 321)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_5:24, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 4		
	outgoing edges:8, 
	Instructions:
		%v_7 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_9 = call_1o(%v_7, %v_8 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[7.0 ] %v_8[7.1 ] ) 
		%v_6 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[7.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 7		
	outgoing edges:9, 12, 
	Instructions:
		b_false(LBL_3:43, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[7.3 6.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:10, 11, 
	Instructions:
		line_num(;n: 322)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(%self ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_6:31, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[9.1 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 323)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:14, 
	Instructions:
		line_num(;n: 325)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_13 = call_0o(%v_12 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_12[11.1 ] ) 
		%v_14 = call_0o(%v_13 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_13[11.2 ] ) 
		%v_15 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_16 = call_0o(%v_15 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_15[11.4 ] ) 
		%v_17 = call_1o(%v_14, %v_16 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_14[11.3 ] %v_16[11.5 ] ) 
		%v_18 = search_const(scope<1> ;name: MAX_EDIT_MINS, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_19 = call_1o(Fixnum:60, %v_18 ;n:*, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_18[11.7 ] ) 
		%v_20 = call_1o(%v_17, %v_19 ;n:<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_17[11.6 ] %v_19[11.8 ] ) 
		return(%v_20)		--org.jruby.ir.instructions.ReturnInstr(	%v_20[11.9 ] ) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 328)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_gone?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 333)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:is_expired?, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_hidden_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 337)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: HiddenStory, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_5 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = copy({:'user_id'=>%v_4, :'story_id'=>%v_5})		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.8 ] %v_5[2.9 ] ) 
		%v_7 = call_1o(%v_3, %v_6 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.7 ] %v_6[2.10 ] ) 
		%v_8 = call_0o(%v_7 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[2.11 ] ) 
		%v_9 = call_0o(%v_8 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_8[2.12 ] ) 
		%v_10 = call_0o(%v_9 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.13 ] ) 
		return(%v_10)		--org.jruby.ir.instructions.ReturnInstr(	%v_10[2.14 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_recent?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 341)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:created_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = search_const(scope<1> ;name: RECENT_DAYS, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_0o(%v_4 ;n:days, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:ago, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		%v_7 = call_1o(%v_3, %v_6 ;n:>=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_6[2.9 ] %v_3[2.6 ] ) #<%v_3># 
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_unavailable
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 345)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:unavailable_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_1o(%v_3, nil ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_3[2.6 ] ) #<%v_3># 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_unavailable=
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 6		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		what = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 348)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(what ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	what[2.5 ] ) 
		%v_4 = call_1f(%v_3, Fixnum:1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_3[2.7 ] ) 
		b_false(LBL_2:14, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		%v_5 = call_0o(%self ;n:is_unavailable, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = call_0o(%v_5 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[3.0 ] ) 
		%v_4 = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 6		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:19, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[3.2 2.8 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 10		
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		%v_7 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_8 = call_0o(%v_7 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[5.0 ] ) 
		jump(LBL_1:21)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 10		
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit:  0 10		
	outgoing edges:8, 
	Instructions:
		attr_assign(%self, %v_8 ;n:unavailable_at=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_8[6.0 5.1 ] ) #<%self>#	-- [PUT:%self].unavailable_at 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[6.0 5.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = is_undeletable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 353)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_2:12, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5		
	Vars Live on Exit:  0 4		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0 4 5		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:16, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 354)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 355)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_6:24, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 4		
	outgoing edges:8, 
	Instructions:
		%v_7 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_9 = call_1o(%v_7, %v_8 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[7.0 ] %v_8[7.1 ] ) 
		%v_6 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[7.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_5:29, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[7.3 6.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  7		
	Vars Live on Exit:  0		
	outgoing edges:10, 
	Instructions:
		%v_10 = call_0o(%self ;n:is_moderated?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_11 = call_0o(%v_10 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[9.0 ] ) 
		%v_6 = copy(%v_11)		--org.jruby.ir.instructions.CopyInstr(	%v_11[9.1 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit:  7		
	outgoing edges:11, 12, 
	Instructions:
		b_false(LBL_3:33, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[9.2 7.3 6.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 356)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		line_num(;n: 358)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = log_moderation
PRINT info for BB 1:
	Vars Live on Entry:  15 23		
	Vars Live on Exit:  15 23		
	outgoing edges:23, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 15 23		
	Vars Live on Exit:  15 23		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 363)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_true(LBL_3:12, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 15 23		
	Vars Live on Exit:  0 15 23		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(%self ;n:editor, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%v_4 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[3.0 ] ) 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 15 23		
	Vars Live on Exit:  0 4 15 23		
	outgoing edges:5, 6, 
	Instructions:
		b_true(LBL_2:19, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[3.2 2.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 15 23		
	Vars Live on Exit:  0 15 23		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(%self ;n:editor, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = call_0o(%v_6 ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[5.0 ] ) 
		%v_8 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[5.0 2.0 ] ) 
		%v_9 = call_1o(%v_7, %v_8 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[5.1 ] %v_8[5.2 ] ) 
		%v_3 = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[5.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 4 15 23		
	outgoing edges:7, 8, 
	Instructions:
		b_false(LBL_0:23, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[5.4 3.2 2.6 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  15 23		
	Vars Live on Exit:  15 23		
	outgoing edges:23, 
	Instructions:
		line_num(;n: 364)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 15 23		
	outgoing edges:10, 11, 
	Instructions:
		%v_10 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 367)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(%self ;n:changes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_12 = call_0o(%self ;n:tagging_changes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[8.2 2.0 ] ) 
		%v_13 = call_1o(%v_11, %v_12 ;n:merge, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_11[8.2 ] %v_12[8.3 ] ) 
		all_changes = copy(%v_13)		--org.jruby.ir.instructions.CopyInstr(	%v_13[8.4 ] ) 
		line_num(;n: 368)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy("unavailable_at")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call_1o(%v_13, %v_14 ;n:delete, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_13[8.4 ] %v_14[8.7 ] ) 
		line_num(;n: 370)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_16 = call_0o(all_changes ;n:any?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	all_changes[8.5 ] ) 
		%v_17 = call_0o(%v_16 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_16[8.10 ] ) 
		b_false(LBL_4:40, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[8.11 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  15 23		
	Vars Live on Exit:  15 23		
	outgoing edges:23, 
	Instructions:
		line_num(;n: 371)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry:  0 15 23 28		
	Vars Live on Exit:  0 15 23		
	outgoing edges:13, 14, 
	Instructions:
		%v_18 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 374)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_19 = search_const(scope<1> ;name: Moderation, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_20 = call_0o(%v_19 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_19[11.2 ] ) 
		m = copy(%v_20)		--org.jruby.ir.instructions.CopyInstr(	%v_20[11.3 ] ) 
		line_num(;n: 375)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_21 = call_0o(%self ;n:editor, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_22 = call_1o(%v_21, :'id' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_21[11.6 ] ) 
		attr_assign(m, %v_22 ;n:moderator_user_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[11.4 ] %v_22[11.7 ] ) #<m>#	-- [PUT:m].moderator_user_id 
		line_num(;n: 376)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_23 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[11.6 2.0 ] ) 
		attr_assign(m, %v_23 ;n:story_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[11.4 11.8 ] %v_23[11.10 ] ) #<m>#	-- [PUT:m].story_id 
		line_num(;n: 378)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_24 = copy("is_expired")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_25 = call_1o(all_changes, %v_24 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	all_changes[8.5 ] %v_24[11.13 ] ) 
		b_false(LBL_8:60, %v_25)		--org.jruby.ir.instructions.BFalseInstr(	%v_25[11.14 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  0 15 23 28		
	Vars Live on Exit:  0 15 23		
	outgoing edges:14, 
	Instructions:
		%v_26 = call_0o(%self ;n:is_expired?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_25 = copy(%v_26)		--org.jruby.ir.instructions.CopyInstr(	%v_26[13.0 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 15 23 28		
	outgoing edges:15, 16, 
	Instructions:
		b_false(LBL_6:66, %v_25)		--org.jruby.ir.instructions.BFalseInstr(	%v_25[13.1 11.14 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 15 23		
	outgoing edges:22, 
	Instructions:
		line_num(;n: 379)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_27 = copy("deleted story")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(m, %v_27 ;n:action=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[11.4 11.8 11.11 ] %v_27[15.1 ] ) #<m>#	-- [PUT:m].action 
		jump(LBL_7:89)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 16:
	Vars Live on Entry:  0 15 23 32		
	Vars Live on Exit:  0 15 23		
	outgoing edges:17, 18, 
	Instructions:
		line_num(;n: 380)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_28 = copy("is_expired")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_29 = call_1o(all_changes, %v_28 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	all_changes[8.5 ] %v_28[16.1 ] ) 
		b_false(LBL_11:74, %v_29)		--org.jruby.ir.instructions.BFalseInstr(	%v_29[16.2 ] ) 
PRINT info for BB 17:
	Vars Live on Entry:  0 15 23 32		
	Vars Live on Exit:  0 15 23		
	outgoing edges:18, 
	Instructions:
		%v_30 = call_0o(%self ;n:is_expired?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_31 = call_0o(%v_30 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_30[17.0 ] ) 
		%v_29 = copy(%v_31)		--org.jruby.ir.instructions.CopyInstr(	%v_31[17.1 ] ) 
PRINT info for BB 18:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 15 23 32		
	outgoing edges:19, 20, 
	Instructions:
		b_false(LBL_9:80, %v_29)		--org.jruby.ir.instructions.BFalseInstr(	%v_29[17.2 16.2 ] ) 
PRINT info for BB 19:
	Vars Live on Entry:  0 15 23 35		
	Vars Live on Exit:  0 15 23		
	outgoing edges:21, 
	Instructions:
		line_num(;n: 381)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_32 = copy("undeleted story")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(m, %v_32 ;n:action=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[11.4 11.8 11.11 ] %v_32[19.1 ] ) #<m>#	-- [PUT:m].action 
		jump(LBL_10:87)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 20:
	Vars Live on Entry:  0 15 23 35		
	Vars Live on Exit:  0 15 23		
	outgoing edges:21, 
	Instructions:
		line_num(;n: 383)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_33 = call(all_changes, %self:CLOSURE log_moderation_CLOSURE_1[./lobsters/models/story.rb:383] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	all_changes[8.5 ] %self[2.0 ] ) 
CLOSURE BEGIN: k[] v[] %self[2.0,] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2 3		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		k = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 2 3		
	Vars Live on Exit:  0 2 3		
	outgoing edges:4, 8, 10, 
	Instructions:
		line_num(;n: 384)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = copy("merged_story_id")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_4 = call_1o(k, %cl_1_3 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_1_3[3.1 ] ) 
		b_false(CL1_LBL_0:36, %cl_1_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 3		
	outgoing edges:5, 6, 10, 
	Instructions:
		line_num(;n: 385)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_5 = call_1f(v, Fixnum:1 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	v[2.3 ] ) 
		b_false(CL1_LBL_2:30, %cl_1_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  19		
	Vars Live on Exit:  0		
	outgoing edges:7, 10, 
	Instructions:
		line_num(;n: 386)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_6 = copy("merged into ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_7 = call_0o(%self ;n:merged_into_story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%cl_1_8 = call_0o(%cl_1_7 ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_7[5.2 ] ) 
		%cl_1_9 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_10 = build_compound_string(%cl_1_6, #{%cl_1_8}, %cl_1_9)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_6[5.1 ] %cl_1_8[5.3 ] %cl_1_9[5.4 ] ) 
		%cl_1_11 = copy("(")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 387)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_12 = call_0o(%self ;n:merged_into_story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[5.2 2.0 ] ) 
		%cl_1_13 = call_0o(%cl_1_12 ;n:title, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_12[5.8 ] ) 
		%cl_1_14 = copy(")")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_15 = build_compound_string(%cl_1_11, #{%cl_1_13}, %cl_1_14)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_11[5.6 ] %cl_1_13[5.9 ] %cl_1_14[5.10 ] ) 
		%cl_1_16 = call_1o(%cl_1_10, %cl_1_15 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_10[5.5 ] %cl_1_15[5.11 ] ) 
		jump(CL1_LBL_3:34)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  19		
	Vars Live on Exit: 
	outgoing edges:7, 
	Instructions:
		line_num(;n: 389)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_17 = copy("unmerged from another story")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_16 = copy(%cl_1_17)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_17[6.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit:  19		
	outgoing edges:12, 
	Instructions:
		return(%cl_1_16)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_16[6.2 5.12 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  2 3		
	outgoing edges:10, 12, 
	Instructions:
		line_num(;n: 392)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_18 = copy("changed ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_19 = copy(" from ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_20 = call_1f(v, Fixnum:0 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	v[2.3 ] ) 
		%cl_1_21 = call_0o(%cl_1_20 ;n:inspect, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_20[8.3 ] ) 
		%cl_1_22 = copy(" to ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_23 = call_1f(v, Fixnum:1 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	v[2.3 ] ) 
		%cl_1_24 = call_0o(%cl_1_23 ;n:inspect, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_23[8.6 ] ) 
		%cl_1_25 = build_compound_string(%cl_1_18, #{k}, %cl_1_19, #{%cl_1_21}, %cl_1_22, #{%cl_1_24})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_1_18[8.1 ] k[2.2 ] %cl_1_19[8.2 ] %cl_1_21[8.4 ] %cl_1_22[8.5 ] %cl_1_24[8.7 ] ) 
		return(%cl_1_25)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_25[8.8 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:12, 
	Instructions:
		%cl_1_26 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_27 = runtime_helper(%cl_1_26 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_26[10.0 ] ) 
		return(%cl_1_27)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_27[10.1 ] ) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_34 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_35 = call_1o(%v_33, %v_34 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_33[20.1 ] %v_34[20.2 ] ) 
		attr_assign(m, %v_35 ;n:action=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[11.4 11.8 11.11 ] %v_35[20.3 ] ) #<m>#	-- [PUT:m].action 
		%v_32 = copy(%v_35)		--org.jruby.ir.instructions.CopyInstr(	%v_35[20.3 ] ) 
PRINT info for BB 21:
	Vars Live on Entry:  0 15 23		
	Vars Live on Exit:  0 15 23 35		
	outgoing edges:22, 
	Instructions:
		%v_27 = copy(%v_32)		--org.jruby.ir.instructions.CopyInstr(	%v_32[20.5 19.1 ] ) 
PRINT info for BB 22:
	Vars Live on Entry:  15 23		
	Vars Live on Exit:  0 15 23		
	outgoing edges:23, 
	Instructions:
		line_num(;n: 397)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_36 = call_0o(%self ;n:moderation_reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		attr_assign(m, %v_36 ;n:reason=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	m[15.2 20.4 19.2 11.4 11.8 11.11 ] %v_36[22.1 ] ) #<m>#	-- [PUT:m].reason 
		line_num(;n: 398)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_37 = call_0o(m ;n:save, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	m[22.2 15.2 20.4 19.2 11.4 11.8 11.11 ] ) 
		line_num(;n: 400)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, true ;n:is_moderated=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[22.1 2.0 ] ) #<%self>#	-- [PUT:%self].is_moderated 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 23:
	Vars Live on Entry:  15 23		
	Vars Live on Exit:  15 23		
	outgoing edges:
	Instructions:

SET IRMethod, name = mailing_list_message_id
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 404)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("story.")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call_0o(%self ;n:short_id, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = copy(".")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_0o(%self ;n:created_at, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_7 = call_0o(%v_6 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[2.9 ] ) 
		%v_8 = copy("@")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[2.12 ] ) 
		%v_11 = call_0o(%v_10 ;n:domain, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[2.13 ] ) 
		%v_12 = build_compound_string(%v_3, #{%v_4}, %v_5, #{%v_7}, %v_8, #{%v_11})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] %v_7[2.10 ] %v_8[2.11 ] %v_11[2.14 ] ) 
		return(%v_12)		--org.jruby.ir.instructions.ReturnInstr(	%v_12[2.15 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = mark_submitter
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 408)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Keystore, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = copy("user:")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_6 = copy(":stories_submitted")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = build_compound_string(%v_4, #{%v_5}, %v_6)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_4[2.7 ] %v_5[2.8 ] %v_6[2.9 ] ) 
		%v_8 = call_1o(%v_3, %v_7 ;n:increment_value_for, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_7[2.10 ] ) 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[2.11 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = merge_into_story!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		story = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 412)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(story ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	story[2.5 ] ) 
		attr_assign(%self, %v_3 ;n:merged_story_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_3[2.7 ] ) #<%self>#	-- [PUT:%self].merged_story_id 
		line_num(;n: 413)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(%self ;n:save!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.8 ] ) 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = merged_comments
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 418)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = call_1o(%v_4, :'id' ;n:select, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = copy({:'merged_story_id'=>%v_6})		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.9 ] ) 
		%v_8 = call_1o(%v_5, %v_7 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.8 ] %v_7[2.10 ] ) 
		%v_9 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.9 ] ) 
		%v_10 = copy(Array:[%v_9])		--org.jruby.ir.instructions.CopyInstr(	%v_9[2.12 ] ) 
		%v_11 = call_1o(%v_8, %v_10 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_8[2.11 ] %v_10[2.13 ] ) 
		%v_12 = copy({:'story_id'=>%v_11})		--org.jruby.ir.instructions.CopyInstr(	%v_11[2.14 ] ) 
		%v_13 = call_1o(%v_3, %v_12 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_12[2.15 ] ) 
		return(%v_13)		--org.jruby.ir.instructions.ReturnInstr(	%v_13[2.16 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = merge_story_short_id=
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		sid = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 423)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(sid ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	sid[2.5 ] ) 
		b_false(LBL_0:16, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 10		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 
	Instructions:
		%v_4 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_5 = copy({:'short_id'=>sid})		--org.jruby.ir.instructions.CopyInstr(	sid[2.5 ] ) 
		%v_6 = call_1o(%v_4, %v_5 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[3.0 ] %v_5[3.1 ] ) 
		%v_7 = call_0o(%v_6 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[3.2 ] ) 
		%v_8 = call_0o(%v_7 ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[3.3 ] ) 
		jump(LBL_1:18)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 10		
	Vars Live on Exit:  0		
	outgoing edges:5, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  0 10		
	outgoing edges:6, 
	Instructions:
		attr_assign(%self, %v_8 ;n:merged_story_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_8[4.0 3.4 ] ) #<%self>#	-- [PUT:%self].merged_story_id 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[4.0 3.4 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = recalculate_hotness!
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 428)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:calculated_hotness, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call(%self, :'hotness', %v_3 ;n:update_column, t:FU, cl:false)		--org.jruby.ir.instructions.CallInstr(	%self[2.0 2.6 ] %v_3[2.6 ] ) 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = record_initial_upvote
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 432)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%self ;n:user_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_6 = call(%v_3, Fixnum:1, %v_4, nil, %v_5, nil, false ;n:vote_thusly_on_story_or_comment_for_user_because, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = fix_bogus_chars
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 437)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:title, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_1o(%v_4, %v_5 ;n:split, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_5[2.8 ] ) 
		%v_7 = call(%v_6, %self:CLOSURE fix_bogus_chars_CLOSURE_1[./lobsters/models/story.rb:437] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_6[2.9 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: chr[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		chr = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:4, 5, 7, 
	Instructions:
		line_num(;n: 438)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(chr ;n:ord, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	chr[2.2 ] ) 
		%cl_1_4 = call_1f(%cl_1_3, Fixnum:160 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%cl_1_3[3.1 ] ) 
		b_false(CL1_LBL_0:15, %cl_1_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		line_num(;n: 439)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_5 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		return(" ")		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:9, 
	Instructions:
		line_num(;n: 441)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(chr)		--org.jruby.ir.instructions.ReturnInstr(	chr[2.2 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_1_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_7 = runtime_helper(%cl_1_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_6[7.0 ] ) 
		return(%cl_1_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_7[7.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_8 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = call_1o(%v_7, %v_8 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[2.10 ] %v_8[2.11 ] ) 
		attr_assign(%self, %v_9 ;n:title=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.6 ] %v_9[2.12 ] ) #<%self>#	-- [PUT:%self].title 
		line_num(;n: 446)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = score
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 449)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:upvotes, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%self ;n:downvotes, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_5 = call_1o(%v_3, %v_4 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] %v_4[2.7 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = short_id_path
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 453)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%v_3 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = call_0o(%v_4 ;n:routes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:url_helpers, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.8 ] ) 
		%v_7 = call_0o(%v_6 ;n:root_path, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[2.9 ] ) 
		%v_8 = copy("s/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_10 = build_compound_string(%v_8, #{%v_9})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_8[2.11 ] %v_9[2.12 ] ) 
		%v_11 = call_1o(%v_7, %v_10 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_7[2.10 ] %v_10[2.13 ] ) 
		return(%v_11)		--org.jruby.ir.instructions.ReturnInstr(	%v_11[2.14 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = short_id_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 457)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = call_0o(%v_3 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = call_0o(%v_4 ;n:root_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		%v_6 = copy("s/")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = build_compound_string(%v_6, #{%v_7})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_6[2.9 ] %v_7[2.10 ] ) 
		%v_9 = call_1o(%v_5, %v_8 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.8 ] %v_8[2.11 ] ) 
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[2.12 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = sorted_taggings
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 461)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call(%v_3, %self:CLOSURE sorted_taggings_CLOSURE_1[./lobsters/models/story.rb:461] ;n:sort_by, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 461)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_4 = call_0o(%cl_1_3 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] ) 
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_5 = call(%v_4, %self:CLOSURE sorted_taggings_CLOSURE_2[./lobsters/models/story.rb:461] ;n:sort_by, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_4[2.7 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 5, 7, 
	Instructions:
		line_num(;n: 461)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_2_4 = call_0o(%cl_2_3 ;n:is_media?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_3[3.1 ] ) 
		b_false(CL2_LBL_0:14, %cl_2_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_2_5 = copy(Fixnum:-1)		--org.jruby.ir.instructions.CopyInstr(	) 
		return(%cl_2_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_5[4.0 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		return(Fixnum:0)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_2_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_7 = runtime_helper(%cl_2_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_6[7.0 ] ) 
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[7.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.8 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = tagging_changes
PRINT info for BB 1:
	Vars Live on Entry:  9 15		
	Vars Live on Exit:  9 15		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  9 15		
	Vars Live on Exit:  9 15		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 465)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call(%v_3, %self:CLOSURE tagging_changes_CLOSURE_1[./lobsters/models/story.rb:465] ;n:reject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: tg[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tg = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 465)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(tg ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tg[2.2 ] ) 
		return(%cl_1_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_5 = runtime_helper(%cl_1_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_4[4.0 ] ) 
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_5 = call(%v_4, %self:CLOSURE tagging_changes_CLOSURE_2[./lobsters/models/story.rb:465] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_4[2.7 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: tg[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tg = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 466)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(tg ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tg[2.2 ] ) 
		%cl_2_4 = call_0o(%cl_2_3 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_3[3.1 ] ) 
		return(%cl_2_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_2_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_6 = runtime_helper(%cl_2_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_5[4.0 ] ) 
		return(%cl_2_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_6 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = call_1o(%v_5, %v_6 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.8 ] %v_6[2.9 ] ) 
		old_tags_a = copy(%v_7)		--org.jruby.ir.instructions.CopyInstr(	%v_7[2.10 ] ) 
		line_num(;n: 467)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 ] ) 
		%v_9 = call(%v_8, %self:CLOSURE tagging_changes_CLOSURE_3[./lobsters/models/story.rb:467] ;n:reject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_8[2.13 ] %self[2.0 2.6 2.13 ] ) 
CLOSURE BEGIN: tg[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_3_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tg = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 467)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_3 = call_0o(tg ;n:marked_for_destruction?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tg[2.2 ] ) 
		return(%cl_3_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_3_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_3_5 = runtime_helper(%cl_3_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_3_4[4.0 ] ) 
		return(%cl_3_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_10 = call(%v_9, %self:CLOSURE tagging_changes_CLOSURE_4[./lobsters/models/story.rb:468] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_9[2.14 ] %self[2.0 2.6 2.13 ] ) 
CLOSURE BEGIN: tg[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_4_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tg = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 468)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_4_3 = call_0o(tg ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tg[2.2 ] ) 
		%cl_4_4 = call_0o(%cl_4_3 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_4_3[3.1 ] ) 
		return(%cl_4_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_4_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_4_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_4_6 = runtime_helper(%cl_4_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_4_5[4.0 ] ) 
		return(%cl_4_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_4_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_11 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = call_1o(%v_10, %v_11 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_10[2.15 ] %v_11[2.16 ] ) 
		new_tags_a = copy(%v_12)		--org.jruby.ir.instructions.CopyInstr(	%v_12[2.17 ] ) 
		line_num(;n: 470)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = call_1o(old_tags_a, %v_12 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	old_tags_a[2.11 ] %v_12[2.17 ] ) 
		b_false(LBL_0:26, %v_13)		--org.jruby.ir.instructions.BFalseInstr(	%v_13[2.20 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  9 15		
	Vars Live on Exit:  9 15		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 471)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		return({})		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  9 15		
	Vars Live on Exit:  9 15		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 473)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_15 = copy("tags")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = copy(Array:[old_tags_a, new_tags_a])		--org.jruby.ir.instructions.CopyInstr(	old_tags_a[2.11 ] new_tags_a[2.18 ] ) 
		%v_17 = copy({%v_15=>%v_16})		--org.jruby.ir.instructions.CopyInstr(	%v_15[4.1 ] %v_16[4.2 ] ) 
		return(%v_17)		--org.jruby.ir.instructions.ReturnInstr(	%v_17[4.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  9 15		
	Vars Live on Exit:  9 15		
	outgoing edges:
	Instructions:

SET IRMethod, name = tags_a
PRINT info for BB 1:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:7, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 5 6		
	Vars Live on Exit:  6		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 479)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = runtime_helper(%self, "@_tags_a" ;method: IS_DEFINED_INSTANCE_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%self[2.0 ] ) 
		%v_3 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.6 ] ) 
		b_nil(LBL_1:12, %v_4)		--org.jruby.ir.instructions.BNilInstr(	%v_4[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 5 6		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		%v_5 = get_field(%self ;name: @_tags_a)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self]._tags_a 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 5 6		
	outgoing edges:5, 6, 
	Instructions:
		b_true(LBL_0:18, %v_3)		--org.jruby.ir.instructions.BTrueInstr(	%v_3[3.1 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		%v_6 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = call(%v_6, %self:CLOSURE tags_a_CLOSURE_1[./lobsters/models/story.rb:479] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_6[5.0 ] %self[5.0 2.0 ] ) 
CLOSURE BEGIN: t[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 479)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(t ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.2 ] ) 
		%cl_1_4 = call_0o(%cl_1_3 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] ) 
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		put_field(%self, %v_7 ;name: @_tags_a)		--org.jruby.ir.instructions.PutFieldInstr(	%self[5.0 2.0 ] %v_7[5.1 ] ) #<%self>#	-- [PUT:%self]._tags_a 
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[5.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  6		
	outgoing edges:7, 
	Instructions:
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[3.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = tags_a=
PRINT info for BB 1:
	Vars Live on Entry:  4		
	Vars Live on Exit:  4		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4		
	Vars Live on Exit:  4		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		new_tag_names_a = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 483)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call(%v_3, %self:CLOSURE tags_a=_CLOSURE_1[./lobsters/models/story.rb:483] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_3[2.7 ] %self[2.0 2.7 ] ) 
CLOSURE BEGIN: tagging[] new_tag_names_a[2.5,] 
PRINT info for BB 1:
	Vars Live on Entry:  8		
	Vars Live on Exit:  8		
	outgoing edges:9, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  8		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tagging = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 8		
	Vars Live on Exit:  2 8		
	outgoing edges:4, 5, 7, 
	Instructions:
		line_num(;n: 484)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(tagging ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tagging[2.2 ] ) 
		%cl_1_4 = call_0o(%cl_1_3 ;n:tag, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] ) 
		%cl_1_5 = call_1o(new_tag_names_a, %cl_1_4 ;n:include?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	new_tag_names_a[] %cl_1_4[3.2 ] ) 
		%cl_1_6 = call_0o(%cl_1_5 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_5[3.3 ] ) 
		b_false(CL1_LBL_0:17, %cl_1_6)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_6[3.4 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  10		
	Vars Live on Exit:  2 8		
	outgoing edges:6, 7, 
	Instructions:
		line_num(;n: 485)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_7 = call_0o(tagging ;n:mark_for_destruction, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tagging[2.2 ] ) 
		jump(CL1_LBL_1:19)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  10		
	outgoing edges:9, 
	Instructions:
		return(%cl_1_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_7[4.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_1_8 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_9 = runtime_helper(%cl_1_8 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_8[7.0 ] ) 
		return(%cl_1_9)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_9[7.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 489)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call(new_tag_names_a, %self:CLOSURE tags_a=_CLOSURE_2[./lobsters/models/story.rb:489] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	new_tag_names_a[2.5 ] %self[2.0 2.7 ] ) 
CLOSURE BEGIN: tag_name[] %self[2.0,2.7,] t[] tg[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		tag_name = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  0 2 7		
	Vars Live on Exit:  0 2		
	outgoing edges:4, 5, 12, 
	Instructions:
		line_num(;n: 490)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(tag_name ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	tag_name[2.2 ] ) 
		%cl_2_4 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_5 = call_1o(%cl_2_3, %cl_2_4 ;n:!=, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_3[3.1 ] %cl_2_4[3.2 ] %cl_2_3[3.1 ] ) #<%cl_2_3># 
		b_false(CL2_LBL_2:18, %cl_2_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 2 7		
	Vars Live on Exit:  0 2		
	outgoing edges:5, 12, 
	Instructions:
		%cl_2_6 = call_0o(%self ;n:tags, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%cl_2_7 = copy({:'tag'=>tag_name})		--org.jruby.ir.instructions.CopyInstr(	tag_name[2.2 ] ) 
		%cl_2_8 = call_1o(%cl_2_6, %cl_2_7 ;n:exists?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_6[4.0 ] %cl_2_7[4.1 ] ) 
		%cl_2_9 = call_0o(%cl_2_8 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_8[4.2 ] ) 
		%cl_2_5 = copy(%cl_2_9)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_9[4.3 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 2		
	Vars Live on Exit:  0 2 7		
	outgoing edges:6, 10, 
	Instructions:
		b_false(CL2_LBL_0:40, %cl_2_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_5[4.4 3.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 17		
	Vars Live on Exit:  0 2		
	outgoing edges:7, 8, 12, 
	Instructions:
		line_num(;n: 491)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_10 = search_const(scope<2> ;name: Tag, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_11 = call_0o(%cl_2_10 ;n:active, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_10[6.1 ] ) 
		%cl_2_12 = copy({:'tag'=>tag_name})		--org.jruby.ir.instructions.CopyInstr(	tag_name[2.2 ] ) 
		%cl_2_13 = call_1o(%cl_2_11, %cl_2_12 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_11[6.2 ] %cl_2_12[6.3 ] ) 
		%cl_2_14 = call_0o(%cl_2_13 ;n:first, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_13[6.4 ] ) 
		t = copy(%cl_2_14)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_14[6.5 ] ) 
		b_false(CL2_LBL_3:36, %cl_2_14)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_14[6.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  21		
	Vars Live on Exit:  0 17		
	outgoing edges:9, 12, 
	Instructions:
		line_num(;n: 495)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_15 = call_0o(%self ;n:taggings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%cl_2_16 = call_0o(%cl_2_15 ;n:build, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_2_15[7.1 ] ) 
		tg = copy(%cl_2_16)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_16[7.2 ] ) 
		line_num(;n: 496)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_17 = call_0o(t ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[6.6 ] ) 
		attr_assign(tg, %cl_2_17 ;n:tag_id=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	tg[7.3 ] %cl_2_17[7.5 ] ) #<tg>#	-- [PUT:tg].tag_id 
		jump(CL2_LBL_4:38)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  21		
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_2_17 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit:  21		
	outgoing edges:14, 
	Instructions:
		return(%cl_2_17)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_17[8.0 7.5 ] ) 
PRINT info for BB 10:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:14, 
	Instructions:
		%cl_2_18 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_19 = runtime_helper(%cl_2_18 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_18[12.0 ] ) 
		return(%cl_2_19)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_19[12.1 ] ) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4		
	Vars Live on Exit:  4		
	outgoing edges:
	Instructions:

SET IRMethod, name = title=
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		t = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 504)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(t ;n:strip, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	t[2.5 ] ) 
		attr_assign(%self, :'title', %v_3 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	%self[2.0 ] %v_3[2.7 ] ) #<%self>#	-- [PUT:%self].[] 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = title_as_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  9		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 508)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:title, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:downcase, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		%v_5 = copy(RE:|[^a-z0-9_-]|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = copy("_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_7 = call(%v_4, RE:|[^a-z0-9_-]|RegexpOptions(kcode: NONE, kcodeDefault), %v_6 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_4[2.7 ] %v_6[2.9 ] ) 
		u = copy(%v_7)		--org.jruby.ir.instructions.CopyInstr(	%v_7[2.10 ] ) 
		line_num(;n: 509)		--org.jruby.ir.instructions.LineNumberInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:4, 6, 
	Instructions:
		%v_9 = copy(RE:|__|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_10 = call_1o(u, RE:|__|RegexpOptions(kcode: NONE, kcodeDefault) ;n:match, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	u[2.11 ] ) 
		b_false(LBL_0:26, %v_10)		--org.jruby.ir.instructions.BFalseInstr(	%v_10[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		thread_poll()		--org.jruby.ir.instructions.ThreadPollInstr(	) 
		line_num(;n: 510)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = copy("__")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = copy("_")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_13 = call(u, %v_11, %v_12 ;n:gsub!, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	u[2.11 ] %v_11[4.2 ] %v_12[4.3 ] ) 
		jump(_LOOP_BEGIN_0:14)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  9		
	outgoing edges:8, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 512)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = copy(RE:|^_+|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = call(u, RE:|^_+|RegexpOptions(kcode: NONE, kcodeDefault), %v_15 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	u[2.11 ] %v_15[6.3 ] ) 
		%v_17 = copy(RE:|_+$|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_18 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_19 = call(%v_16, RE:|_+$|RegexpOptions(kcode: NONE, kcodeDefault), %v_18 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_16[6.4 ] %v_18[6.6 ] ) 
		return(%v_19)		--org.jruby.ir.instructions.ReturnInstr(	%v_19[6.7 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = to_param
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 516)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:short_id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_3)		--org.jruby.ir.instructions.ReturnInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = update_availability
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 520)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:is_unavailable, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_2:12, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4		
	Vars Live on Exit:  0		
	outgoing edges:4, 
	Instructions:
		%v_4 = call_0o(%self ;n:unavailable_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%v_4 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[3.0 ] ) 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:19, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.2 2.6 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:13, 
	Instructions:
		line_num(;n: 521)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = search_const(scope<1> ;name: Time, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_7 = call_0o(%v_6 ;n:now, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_6[5.1 ] ) 
		attr_assign(%self, %v_7 ;n:unavailable_at=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_7[5.2 ] ) #<%self>#	-- [PUT:%self].unavailable_at 
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[5.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0		
	outgoing edges:7, 8, 
	Instructions:
		line_num(;n: 522)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:unavailable_at, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_5:26, %v_8)		--org.jruby.ir.instructions.BFalseInstr(	%v_8[6.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0		
	outgoing edges:8, 
	Instructions:
		%v_9 = call_0o(%self ;n:is_unavailable, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_10 = call_0o(%v_9 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[7.0 ] ) 
		%v_8 = copy(%v_10)		--org.jruby.ir.instructions.CopyInstr(	%v_10[7.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0 9		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_3:32, %v_8)		--org.jruby.ir.instructions.BFalseInstr(	%v_8[7.2 6.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  12		
	Vars Live on Exit:  0		
	outgoing edges:11, 
	Instructions:
		line_num(;n: 523)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, nil ;n:unavailable_at=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] ) #<%self>#	-- [PUT:%self].unavailable_at 
		%v_11 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_4:34)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  12		
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		%v_11 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit:  12		
	outgoing edges:13, 
	Instructions:
		return(%v_11)		--org.jruby.ir.instructions.ReturnInstr(	%v_11[10.0 9.2 ] ) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = update_comments_count!
PRINT info for BB 1:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 528)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:merged_comments, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_1o(%v_3, nil ;n:arrange_for_user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		comments = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.7 ] ) 
		line_num(;n: 531)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		line_num(;n: 532)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call(%v_4, %self:CLOSURE update_comments_count!_CLOSURE_1[./lobsters/models/story.rb:532] ;n:count, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_4[2.7 ] %self[2.0 2.6 ] ) 
CLOSURE BEGIN: c[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		c = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 532)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call_0o(c ;n:is_gone?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[2.2 ] ) 
		%cl_1_4 = call_0o(%cl_1_3 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_3[3.1 ] ) 
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		attr_assign(%self, %v_5 ;n:comments_count=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 2.6 ] %v_5[2.11 ] ) #<%self>#	-- [PUT:%self].comments_count 
		%v_6 = call(%self, :'comments_count', %v_5 ;n:update_column, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%self[2.0 2.6 2.12 ] %v_5[2.11 ] ) 
		line_num(;n: 534)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call_0o(%self ;n:recalculate_hotness!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.6 2.12 2.13 ] ) 
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[2.15 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  6		
	Vars Live on Exit:  6		
	outgoing edges:
	Instructions:

SET IRMethod, name = update_merged_into_story_comments
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 538)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:merged_into_story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_0:13, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		line_num(;n: 539)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(%self ;n:merged_into_story, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_5 = call_0o(%v_4 ;n:update_comments_count!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[3.1 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = url=
PRINT info for BB 1:
	Vars Live on Entry:  4 8 12		
	Vars Live on Exit:  4 8 12		
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 5 8 12		
	Vars Live on Exit:  4 8 12		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		u = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 545)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(u)		--org.jruby.ir.instructions.CopyInstr(	u[2.5 ] ) 
		b_false(LBL_2:14, u)		--org.jruby.ir.instructions.BFalseInstr(	u[2.5 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 5 8 12		
	Vars Live on Exit:  0 4 8 12		
	outgoing edges:4, 
	Instructions:
		%v_4 = copy(RE:|\A([^\?]+)\?(.+)\z|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_5 = call_1o(u, RE:|\A([^\?]+)\?(.+)\z|RegexpOptions(kcode: NONE, kcodeDefault) ;n:match, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	u[2.5 ] ) 
		m = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
		%v_3 = copy(%v_5)		--org.jruby.ir.instructions.CopyInstr(	%v_5[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 8 12		
	Vars Live on Exit:  0 4 5 8 12		
	outgoing edges:5, 9, 
	Instructions:
		b_false(LBL_0:39, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[3.3 2.7 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 8 12 14		
	Vars Live on Exit:  0 4 8 12		
	outgoing edges:6, 7, 
	Instructions:
		line_num(;n: 546)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = call_1f(m, Fixnum:2 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	m[3.2 ] ) 
		%v_7 = copy("&")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1o(%v_6, %v_7 ;n:split, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[5.1 ] %v_7[5.2 ] ) 
		params = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[5.3 ] ) 
		line_num(;n: 547)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call(%v_8, %self:CLOSURE url=_CLOSURE_1[./lobsters/models/story.rb:547] ;n:reject!, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_8[5.3 ] %self[2.0 ] ) 
CLOSURE BEGIN: p[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		p = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 548)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = copy(RE:|^utm_(source|medium|campaign|term|content)=|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_4 = call_1o(p, RE:|^utm_(source|medium|campaign|term|content)=|RegexpOptions(kcode: NONE, kcodeDefault) ;n:match, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	p[2.2 ] ) 
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 550)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_1f(m, Fixnum:1 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	m[3.2 ] ) 
		%v_11 = call_0o(params ;n:any?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	params[5.4 ] ) 
		b_false(LBL_3:32, %v_11)		--org.jruby.ir.instructions.BFalseInstr(	%v_11[5.9 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 8 12 14 19		
	Vars Live on Exit:  0 4 8 12 14		
	outgoing edges:8, 
	Instructions:
		%v_12 = copy("?")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_13 = copy("&")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = call_1o(params, %v_13 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	params[5.4 ] %v_13[6.1 ] ) 
		%v_15 = call_1o(%v_12, %v_14 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[6.0 ] %v_14[6.2 ] ) 
		jump(LBL_4:35)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 4 8 12 14 19		
	Vars Live on Exit:  0 4 8 12 14		
	outgoing edges:8, 
	Instructions:
		%v_16 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[7.0 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 4 8 12		
	Vars Live on Exit:  0 4 8 12 14 19		
	outgoing edges:10, 
	Instructions:
		%v_17 = call_1o(%v_10, %v_15 ;n:<<, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_10[5.8 ] %v_15[7.1 6.3 ] ) 
		u = copy(%v_17)		--org.jruby.ir.instructions.CopyInstr(	%v_17[8.0 ] ) 
		jump(LBL_1:41)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  0 4 8 12		
	Vars Live on Exit:  0 4 8 12		
	outgoing edges:10, 
	Instructions:
		%v_17 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  4 8 12		
	Vars Live on Exit:  0 4 8 12		
	outgoing edges:11, 
	Instructions:
		line_num(;n: 553)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_18 = call_0o(u ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	u[8.1 2.5 ] ) 
		%v_19 = call_0o(%v_18 ;n:strip, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_18[10.1 ] ) 
		attr_assign(%self, :'url', %v_19 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	%self[2.0 ] %v_19[10.2 ] ) #<%self>#	-- [PUT:%self].[] 
		return(%v_19)		--org.jruby.ir.instructions.ReturnInstr(	%v_19[10.2 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  4 8 12		
	Vars Live on Exit:  4 8 12		
	outgoing edges:
	Instructions:

SET IRMethod, name = url_is_editable_by_user?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 557)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:new_record?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		b_false(LBL_0:13, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:13, 
	Instructions:
		line_num(;n: 559)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy(true)		--org.jruby.ir.instructions.CopyInstr(	) 
		return(true)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 7		
	Vars Live on Exit:  0 4		
	outgoing edges:5, 6, 
	Instructions:
		%v_5 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
		b_false(LBL_5:18, user)		--org.jruby.ir.instructions.BFalseInstr(	user[2.5 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 4		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_5 = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[5.0 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:7, 8, 
	Instructions:
		b_false(LBL_4:23, %v_5)		--org.jruby.ir.instructions.BFalseInstr(	%v_5[5.1 4.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  7		
	Vars Live on Exit:  0		
	outgoing edges:8, 
	Instructions:
		%v_7 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = call_0o(%v_7 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[7.0 ] ) 
		%v_5 = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[7.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  7		
	outgoing edges:9, 10, 
	Instructions:
		b_false(LBL_2:28, %v_5)		--org.jruby.ir.instructions.BFalseInstr(	%v_5[7.2 5.1 4.0 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  11		
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		line_num(;n: 561)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = copy(true)		--org.jruby.ir.instructions.CopyInstr(	) 
		jump(LBL_3:31)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 10:
	Vars Live on Entry:  11		
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		line_num(;n: 563)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = copy(false)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit:  11		
	outgoing edges:13, 
	Instructions:
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[10.1 9.1 ] ) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = url_or_comments_path
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 567)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:blank?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		b_false(LBL_0:12, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_5 = call_0o(%self ;n:comments_path, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[4.0 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = url_or_comments_url
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 571)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:blank?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		b_false(LBL_0:12, %v_4)		--org.jruby.ir.instructions.BFalseInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_5 = call_0o(%self ;n:comments_url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_5)		--org.jruby.ir.instructions.ReturnInstr(	%v_5[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_6 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[4.0 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = vote_summary_for
PRINT info for BB 1:
	Vars Live on Entry:  4 6 8		
	Vars Live on Exit:  4 6 8		
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 6 8		
	Vars Live on Exit:  4 6 8		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 575)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		r_counts = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.7 ] ) 
		line_num(;n: 576)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy({})		--org.jruby.ir.instructions.CopyInstr(	) 
		r_whos = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.10 ] ) 
		line_num(;n: 577)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_6 = call_0o(%self ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = copy({:'story_id'=>%v_6, :'comment_id'=>nil})		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.14 ] ) 
		%v_8 = call_1o(%v_5, %v_7 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.13 ] %v_7[2.15 ] ) 
		%v_9 = copy("vote != 0")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_10 = call_1o(%v_8, %v_9 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_8[2.16 ] %v_9[2.17 ] ) 
		%v_11 = call(%v_10, %self:CLOSURE vote_summary_for_CLOSURE_1[./lobsters/models/story.rb:577] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_10[2.18 ] %self[2.0 2.14 ] ) 
CLOSURE BEGIN: v[] r_counts[2.8,] user[2.5,] r_whos[2.11,] 
PRINT info for BB 1:
	Vars Live on Entry:  8 15 20		
	Vars Live on Exit:  8 15 20		
	outgoing edges:15, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 8 15 20		
	Vars Live on Exit:  8 15 20		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		v = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 6 8 15 20		
	Vars Live on Exit:  2 8 15 20		
	outgoing edges:4, 5, 13, 
	Instructions:
		line_num(;n: 578)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_4 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_5 = call_0o(%cl_1_4 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_4[3.1 ] ) 
		%cl_1_3 = call_1o(r_counts, %cl_1_5 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] %cl_1_5[3.2 ] ) 
		b_true(CL1_LBL_0:15, %cl_1_3)		--org.jruby.ir.instructions.BTrueInstr(	%cl_1_3[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 8 15 20		
	Vars Live on Exit:  2 6 8 15 20		
	outgoing edges:5, 13, 
	Instructions:
		%cl_1_3 = call(r_counts, %cl_1_5, Fixnum:0 ;n:[]=, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	r_counts[] %cl_1_5[3.2 ] r_counts[] ) #<r_counts># 
		%cl_1_3 = copy(Fixnum:0)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  2 8 14 15 20		
	Vars Live on Exit:  2 8 15 20		
	outgoing edges:6, 7, 13, 
	Instructions:
		line_num(;n: 579)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_6 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_7 = call_0o(%cl_1_6 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_6[5.1 ] ) 
		%cl_1_8 = call_1o(r_counts, %cl_1_7 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[4.0 ] %cl_1_7[5.2 ] ) 
		%cl_1_9 = call_0o(v ;n:vote, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[5.1 2.2 ] ) 
		%cl_1_8 = call_1o(%cl_1_8, %cl_1_9 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_8[5.3 ] %cl_1_9[5.4 ] ) 
		%cl_1_10 = call(r_counts, %cl_1_7, %cl_1_8 ;n:[]=, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	r_counts[4.0 ] %cl_1_7[5.2 ] %cl_1_8[5.3 5.5 ] r_counts[4.0 ] ) #<r_counts># 
		line_num(;n: 580)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_11 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[] ) 
		b_false(CL1_LBL_3:28, user)		--org.jruby.ir.instructions.BFalseInstr(	user[] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2 8 14 15 20		
	Vars Live on Exit:  2 8 15 20		
	outgoing edges:7, 13, 
	Instructions:
		%cl_1_12 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[] ) 
		%cl_1_11 = copy(%cl_1_12)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_12[6.0 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  2 8 15 20		
	Vars Live on Exit:  2 8 14 15 20		
	outgoing edges:8, 11, 
	Instructions:
		b_false(CL1_LBL_1:47, %cl_1_11)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_11[6.1 5.8 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  2 8 15 18 20		
	Vars Live on Exit:  2 8 15 20		
	outgoing edges:9, 10, 13, 
	Instructions:
		line_num(;n: 581)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_14 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_15 = call_0o(%cl_1_14 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_14[8.1 ] ) 
		%cl_1_13 = call_1o(r_whos, %cl_1_15 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_whos[] %cl_1_15[8.2 ] ) 
		b_true(CL1_LBL_4:38, %cl_1_13)		--org.jruby.ir.instructions.BTrueInstr(	%cl_1_13[8.3 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  2 8 15 20		
	Vars Live on Exit:  2 8 15 18 20		
	outgoing edges:10, 13, 
	Instructions:
		%cl_1_16 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_13 = call(r_whos, %cl_1_15, %cl_1_16 ;n:[]=, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	r_whos[] %cl_1_15[8.2 ] %cl_1_16[9.0 ] r_whos[] ) #<r_whos># 
		%cl_1_13 = copy(%cl_1_16)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_16[9.0 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  27		
	Vars Live on Exit:  2 8 15 20		
	outgoing edges:12, 13, 
	Instructions:
		line_num(;n: 582)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_17 = call_0o(v ;n:reason, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[2.2 ] ) 
		%cl_1_18 = call_0o(%cl_1_17 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_17[10.1 ] ) 
		%cl_1_19 = call_1o(r_whos, %cl_1_18 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_whos[9.1 ] %cl_1_18[10.2 ] ) 
		%cl_1_20 = call_0o(v ;n:user, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	v[10.1 2.2 ] ) 
		%cl_1_21 = call_0o(%cl_1_20 ;n:username, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_20[10.4 ] ) 
		%cl_1_22 = call_1o(%cl_1_19, %cl_1_21 ;n:push, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_19[10.3 ] %cl_1_21[10.5 ] ) 
		jump(CL1_LBL_2:49)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:15, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 12:
	Vars Live on Entry: 
	Vars Live on Exit:  27		
	outgoing edges:15, 
	Instructions:
		return(%cl_1_22)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_22[10.6 ] ) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:15, 
	Instructions:
		%cl_1_23 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_24 = runtime_helper(%cl_1_23 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_23[13.0 ] ) 
		return(%cl_1_24)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_24[13.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 586)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_12 = call_0o(r_counts ;n:keys, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r_counts[2.8 ] ) 
		%v_13 = call_0o(%v_12 ;n:sort, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_12[2.21 ] ) 
		%v_14 = call(%v_13, %self:CLOSURE vote_summary_for_CLOSURE_2[./lobsters/models/story.rb:586] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_13[2.22 ] %self[2.0 2.14 ] ) 
CLOSURE BEGIN: k[] r_counts[2.8,2.21,] user[2.5,] r_whos[2.11,] 
PRINT info for BB 1:
	Vars Live on Entry:  9 22 26		
	Vars Live on Exit:  9 22 26		
	outgoing edges:22, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9 22 26		
	Vars Live on Exit:  9 22 26		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		k = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 9 22 26		
	Vars Live on Exit:  2 9 22 26		
	outgoing edges:4, 5, 20, 
	Instructions:
		line_num(;n: 587)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_4 = call_1o(k, %cl_2_3 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	k[2.2 ] %cl_2_3[3.1 ] ) 
		b_false(CL2_LBL_0:17, %cl_2_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  10		
	Vars Live on Exit:  2 9 22 26		
	outgoing edges:19, 20, 
	Instructions:
		line_num(;n: 588)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_5 = copy("+")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_6 = call_1o(r_counts, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] k[2.2 ] ) 
		%cl_2_7 = build_compound_string(%cl_2_5, #{%cl_2_6})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_2_5[4.1 ] %cl_2_6[4.2 ] ) 
		jump(CL2_LBL_1:62)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry:  2 9 13 14 15 22 26		
	Vars Live on Exit:  2 9 22 26		
	outgoing edges:6, 7, 20, 
	Instructions:
		line_num(;n: 590)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_8 = call_1o(r_counts, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_counts[] k[2.2 ] ) 
		%cl_2_9 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_10 = build_compound_string(#{%cl_2_8}, %cl_2_9)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_2_8[5.1 ] %cl_2_9[5.2 ] ) 
		line_num(;n: 591)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_11 = search_const(scope<2> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_12 = inheritance_search_const(%cl_2_11 ;name: STORY_REASONS, no_priv: true)		--org.jruby.ir.instructions.InheritanceSearchConstInstr(	%cl_2_11[5.5 ] ) 
		bne(CL2_LBL_4:27, %cl_2_12, %undefined)		--org.jruby.ir.instructions.BNEInstr(	%cl_2_12[5.6 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2 9 13 15 22 26		
	Vars Live on Exit:  2 9 13 14 22 26		
	outgoing edges:7, 20, 
	Instructions:
		%cl_2_12 = const_missing(%cl_2_11, :'STORY_REASONS' ;n:const_missing, t:FU, cl:false, missing: STORY_REASONS)		--org.jruby.ir.instructions.ConstMissingInstr(	%cl_2_11[5.5 ] ) 
PRINT info for BB 7:
	Vars Live on Entry:  2 9 13 16 22 26		
	Vars Live on Exit:  2 9 13 15 22 26		
	outgoing edges:8, 11, 20, 
	Instructions:
		%cl_2_13 = call_1o(%cl_2_12, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_12[6.0 5.6 ] k[2.2 ] ) 
		b_true(CL2_LBL_3:37, %cl_2_13)		--org.jruby.ir.instructions.BTrueInstr(	%cl_2_13[7.0 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  2 9 13 17 18 22 26		
	Vars Live on Exit:  2 9 13 22 26		
	outgoing edges:9, 10, 20, 
	Instructions:
		%cl_2_14 = search_const(scope<2> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_15 = inheritance_search_const(%cl_2_14 ;name: OLD_STORY_REASONS, no_priv: true)		--org.jruby.ir.instructions.InheritanceSearchConstInstr(	%cl_2_14[8.0 ] ) 
		bne(CL2_LBL_5:34, %cl_2_15, %undefined)		--org.jruby.ir.instructions.BNEInstr(	%cl_2_15[8.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  2 9 13 18 22 26		
	Vars Live on Exit:  2 9 13 17 22 26		
	outgoing edges:10, 20, 
	Instructions:
		%cl_2_15 = const_missing(%cl_2_14, :'OLD_STORY_REASONS' ;n:const_missing, t:FU, cl:false, missing: OLD_STORY_REASONS)		--org.jruby.ir.instructions.ConstMissingInstr(	%cl_2_14[8.0 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  2 9 13 16 22 26		
	Vars Live on Exit:  2 9 13 18 22 26		
	outgoing edges:11, 20, 
	Instructions:
		%cl_2_16 = call_1o(%cl_2_15, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_15[9.0 8.1 ] k[2.2 ] ) 
		%cl_2_13 = copy(%cl_2_16)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_16[10.0 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  2 9 13 16 22 26		
	Vars Live on Exit:  2 9 13 16 22 26		
	outgoing edges:12, 13, 
	Instructions:
		b_true(CL2_LBL_2:40, %cl_2_13)		--org.jruby.ir.instructions.BTrueInstr(	%cl_2_13[10.1 7.0 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  2 9 13 16 22 26		
	Vars Live on Exit:  2 9 13 22 26		
	outgoing edges:13, 
	Instructions:
		%cl_2_13 = copy(k)		--org.jruby.ir.instructions.CopyInstr(	k[2.2 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  2 9 20 21 22 26		
	Vars Live on Exit:  2 9 13 16 22 26		
	outgoing edges:14, 15, 20, 
	Instructions:
		%cl_2_17 = call_1o(%cl_2_10, %cl_2_13 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_10[5.3 ] %cl_2_13[12.0 10.1 7.0 ] ) 
		line_num(;n: 592)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_18 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[] ) 
		b_false(CL2_LBL_8:47, user)		--org.jruby.ir.instructions.BFalseInstr(	user[] ) 
PRINT info for BB 14:
	Vars Live on Entry:  2 9 20 21 22 26		
	Vars Live on Exit:  2 9 20 22 26		
	outgoing edges:15, 20, 
	Instructions:
		%cl_2_19 = call_0o(user ;n:is_moderator?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[] ) 
		%cl_2_18 = copy(%cl_2_19)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_19[14.0 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  2 9 20 22 26		
	Vars Live on Exit:  2 9 20 21 22 26		
	outgoing edges:16, 17, 
	Instructions:
		b_false(CL2_LBL_6:56, %cl_2_18)		--org.jruby.ir.instructions.BFalseInstr(	%cl_2_18[14.1 13.2 ] ) 
PRINT info for BB 16:
	Vars Live on Entry:  9 20 22 26 30		
	Vars Live on Exit:  2 9 20 22 26		
	outgoing edges:18, 20, 
	Instructions:
		%cl_2_20 = copy(" (")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_21 = call_1o(r_whos, k ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	r_whos[] k[2.2 ] ) 
		%cl_2_22 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_23 = call_1o(%cl_2_21, %cl_2_22 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_21[16.1 ] %cl_2_22[16.2 ] ) 
		%cl_2_24 = copy(")")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_25 = build_compound_string(%cl_2_20, #{%cl_2_23}, %cl_2_24)		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%cl_2_20[16.0 ] %cl_2_23[16.3 ] %cl_2_24[16.4 ] ) 
		jump(CL2_LBL_7:59)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 17:
	Vars Live on Entry:  9 20 22 26 30		
	Vars Live on Exit:  9 20 22 26		
	outgoing edges:18, 
	Instructions:
		%cl_2_26 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_25 = copy(%cl_2_26)		--org.jruby.ir.instructions.CopyInstr(	%cl_2_26[17.0 ] ) 
PRINT info for BB 18:
	Vars Live on Entry: 
	Vars Live on Exit:  9 20 22 26 30		
	outgoing edges:20, 22, 
	Instructions:
		%cl_2_27 = call_1o(%cl_2_17, %cl_2_25 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_17[13.0 ] %cl_2_25[17.1 16.5 ] ) 
		return(%cl_2_27)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_27[18.0 ] ) 
PRINT info for BB 19:
	Vars Live on Entry: 
	Vars Live on Exit:  10		
	outgoing edges:22, 
	Instructions:
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[4.3 ] ) 
PRINT info for BB 20:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:22, 
	Instructions:
		%cl_2_28 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_29 = runtime_helper(%cl_2_28 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_28[20.0 ] ) 
		return(%cl_2_29)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_29[20.1 ] ) 
PRINT info for BB 22:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_15 = copy(", ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = call_1o(%v_14, %v_15 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_14[2.23 ] %v_15[2.24 ] ) 
		return(%v_16)		--org.jruby.ir.instructions.ReturnInstr(	%v_16[2.25 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  4 6 8		
	Vars Live on Exit:  4 6 8		
	outgoing edges:
	Instructions:

SET IRMethod, name = fetched_content
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:15, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 599)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @fetched_content)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].fetched_content 
		b_false(LBL_0:11, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:15, 
	Instructions:
		%v_4 = get_field(%self ;name: @fetched_content)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].fetched_content 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_5 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 600)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:8, 9, 
	Instructions:
		toggle_backtrace(;false)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 601)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = search_const(scope<1> ;name: Sponge, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_10 = call_0o(%v_9 ;n:new, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_9[6.2 ] ) 
		s = copy(%v_10)		--org.jruby.ir.instructions.CopyInstr(	%v_10[6.3 ] ) 
		line_num(;n: 602)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%v_10, Fixnum:3 ;n:timeout=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%v_10[6.3 ] ) #<%v_10>#	-- [PUT:%v_10].timeout 
		line_num(;n: 603)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_12 = copy("User-agent")		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 604)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_14 = call_0o(%v_13 ;n:application, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_13[6.11 ] ) 
		%v_15 = call_0o(%v_14 ;n:domain, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_14[6.12 ] ) 
		%v_16 = copy(" for ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_17 = call_0o(%self ;n:fetching_ip, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[6.8 2.0 ] ) 
		%v_18 = build_compound_string(#{%v_15}, %v_16, #{%v_17})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_15[6.13 ] %v_16[6.14 ] %v_17[6.15 ] ) 
		%v_19 = copy({%v_12=>%v_18})		--org.jruby.ir.instructions.CopyInstr(	%v_12[6.9 ] %v_18[6.16 ] ) 
		%v_20 = call(s, %v_11, :'get', nil, nil, %v_19, Fixnum:3 ;n:fetch, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	s[6.4 ] %v_11[6.8 ] %v_19[6.17 ] ) 
		put_field(%self, %v_20 ;name: @fetched_content)		--org.jruby.ir.instructions.PutFieldInstr(	%self[6.8 6.15 2.0 ] %v_20[6.18 ] ) #<%self>#	-- [PUT:%self].fetched_content 
		%v_8 = copy(%v_20)		--org.jruby.ir.instructions.CopyInstr(	%v_20[6.18 ] ) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_6)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_6[4.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:14, 
	Instructions:
		jump(LBL_4:68)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  0 7 22		
	Vars Live on Exit:  0 7		
	outgoing edges:10, 11, 13, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		%v_21 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_22 = rescue_eqq(StandardError, %v_21)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_21[9.1 ] ) 
		b_true(LBL_10:55, %v_22)		--org.jruby.ir.instructions.BTrueInstr(	%v_22[9.2 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  7		
	Vars Live on Exit:  7 22		
	outgoing edges:13, 15, 
	Instructions:
		throw(%v_21)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_21[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  0 7		
	Vars Live on Exit:  0 7		
	outgoing edges:12, 13, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_6)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_6[4.2 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:14, 
	Instructions:
		jump(LBL_4:68)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit:  7		
	outgoing edges:15, 
	Instructions:
		%v_23 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_24 = runtime_helper(%v_23, %v_6 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_23[13.0 ] %v_6[4.2 ] ) 
		throw(%v_23)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_23[13.0 ] ) 
PRINT info for BB 14:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:15, 
	Instructions:
		line_num(;n: 610)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_25 = get_field(%self ;name: @fetched_content)		--org.jruby.ir.instructions.GetFieldInstr(	%self[6.19 2.0 ] %self[6.19 2.0 ] ) #<%self>#	-- [GET:%self].fetched_content 
		return(%v_25)		--org.jruby.ir.instructions.ReturnInstr(	%v_25[14.1 ] ) 
PRINT info for BB 15:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = parsed_content
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 614)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @parsed_content)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].parsed_content 
		b_false(LBL_0:11, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_4 = get_field(%self ;name: @parsed_content)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].parsed_content 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:6, 
	Instructions:
		%v_5 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 615)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = search_const(scope<1> ;name: Nokogiri, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_7 = call_0o(%self ;n:fetched_content, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_8 = call_0o(%v_7 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_7[4.3 ] ) 
		%v_9 = call_1o(%v_6, %v_8 ;n:HTML, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[4.2 ] %v_8[4.4 ] ) 
		put_field(%self, %v_9 ;name: @parsed_content)		--org.jruby.ir.instructions.PutFieldInstr(	%self[4.3 2.0 ] %v_9[4.5 ] ) #<%self>#	-- [PUT:%self].parsed_content 
		return(%v_9)		--org.jruby.ir.instructions.ReturnInstr(	%v_9[4.5 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = fetched_title
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:31, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  5 7		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 619)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		title = copy(%v_3)		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.6 ] ) 
		line_num(;n: 621)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = call_0o(%self ;n:parsed_content, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		doc = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.9 ] ) 
		%v_5 = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.9 ] ) 
		%v_6 = call_0o(%v_4 ;n:!, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[2.9 ] ) 
		b_false(LBL_0:17, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[2.12 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  5		
	outgoing edges:31, 
	Instructions:
		line_num(;n: 622)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(title)		--org.jruby.ir.instructions.ReturnInstr(	title[2.7 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  5 7 11		
	Vars Live on Exit:  5 7		
	outgoing edges:6, 
	Instructions:
		%v_7 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 627)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  5 7 11		
	Vars Live on Exit:  5 7 11		
	outgoing edges:8, 9, 
	Instructions:
		toggle_backtrace(;false)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 628)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_11 = copy("meta[property='og:title']")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = call_1o(doc, %v_11 ;n:at_css, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	doc[2.10 ] %v_11[6.2 ] ) 
		%v_13 = call_0o(%v_12 ;n:attributes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_12[6.3 ] ) 
		%v_14 = copy("content")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_15 = call_1o(%v_13, %v_14 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_13[6.4 ] %v_14[6.5 ] ) 
		%v_16 = call_0o(%v_15 ;n:text, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_15[6.6 ] ) 
		title = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[6.7 ] ) 
		%v_10 = copy(%v_16)		--org.jruby.ir.instructions.CopyInstr(	%v_16[6.7 ] ) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_8)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_8[4.2 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:14, 
	Instructions:
		jump(LBL_4:63)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 9:
	Vars Live on Entry:  5 7 11 19		
	Vars Live on Exit:  5 7 11		
	outgoing edges:10, 11, 13, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		%v_17 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_18 = rescue_eqq(StandardError, %v_17)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_17[9.1 ] ) 
		b_true(LBL_10:50, %v_18)		--org.jruby.ir.instructions.BTrueInstr(	%v_18[9.2 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  11		
	Vars Live on Exit:  11 19		
	outgoing edges:13, 31, 
	Instructions:
		throw(%v_17)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_17[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  5 7 11		
	Vars Live on Exit:  5 7 11		
	outgoing edges:12, 13, 
	Instructions:
		%v_10 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_8)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_8[4.2 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:14, 
	Instructions:
		jump(LBL_4:63)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 13:
	Vars Live on Entry: 
	Vars Live on Exit:  11		
	outgoing edges:31, 
	Instructions:
		%v_19 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_20 = runtime_helper(%v_19, %v_8 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_19[13.0 ] %v_8[4.2 ] ) 
		throw(%v_19)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_19[13.0 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:15, 25, 
	Instructions:
		line_num(;n: 634)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_21 = call_0o(title ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	title[6.8 ] ) 
		%v_22 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_23 = call_1o(%v_21, %v_22 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_21[14.1 ] %v_22[14.2 ] ) 
		b_false(LBL_12:114, %v_23)		--org.jruby.ir.instructions.BFalseInstr(	%v_23[14.3 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  5 7 26		
	Vars Live on Exit:  5 7		
	outgoing edges:17, 
	Instructions:
		line_num(;n: 635)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_24 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 17:
	Vars Live on Entry:  5 7 26		
	Vars Live on Exit:  5 7 26		
	outgoing edges:18, 19, 
	Instructions:
		toggle_backtrace(;false)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 636)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_27 = copy("meta[name='title']")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_28 = call_1o(doc, %v_27 ;n:at_css, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	doc[2.10 ] %v_27[17.2 ] ) 
		%v_29 = call_0o(%v_28 ;n:attributes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_28[17.3 ] ) 
		%v_30 = copy("content")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_31 = call_1o(%v_29, %v_30 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_29[17.4 ] %v_30[17.5 ] ) 
		%v_32 = call_0o(%v_31 ;n:text, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_31[17.6 ] ) 
		title = copy(%v_32)		--org.jruby.ir.instructions.CopyInstr(	%v_32[17.7 ] ) 
		%v_26 = copy(%v_32)		--org.jruby.ir.instructions.CopyInstr(	%v_32[17.7 ] ) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_24)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_24[15.1 ] ) 
PRINT info for BB 18:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:24, 
	Instructions:
		jump(LBL_16:112)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 19:
	Vars Live on Entry:  5 7 26 34		
	Vars Live on Exit:  5 7 26		
	outgoing edges:20, 21, 23, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		%v_33 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_34 = rescue_eqq(StandardError, %v_33)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_33[19.1 ] ) 
		b_true(LBL_22:99, %v_34)		--org.jruby.ir.instructions.BTrueInstr(	%v_34[19.2 ] ) 
PRINT info for BB 20:
	Vars Live on Entry:  26		
	Vars Live on Exit:  26 34		
	outgoing edges:23, 31, 
	Instructions:
		throw(%v_33)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_33[19.1 ] ) 
PRINT info for BB 21:
	Vars Live on Entry:  5 7 26		
	Vars Live on Exit:  5 7 26		
	outgoing edges:22, 23, 
	Instructions:
		%v_26 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_24)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_24[15.1 ] ) 
PRINT info for BB 22:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:24, 
	Instructions:
		jump(LBL_16:112)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 23:
	Vars Live on Entry: 
	Vars Live on Exit:  26		
	outgoing edges:31, 
	Instructions:
		%v_35 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_36 = runtime_helper(%v_35, %v_24 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_35[23.0 ] %v_24[15.1 ] ) 
		throw(%v_35)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_35[23.0 ] ) 
PRINT info for BB 24:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:26, 
	Instructions:
		jump(LBL_13:116)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 25:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:26, 
	Instructions:
		%v_26 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 26:
	Vars Live on Entry:  5 7		
	Vars Live on Exit:  5 7		
	outgoing edges:27, 28, 
	Instructions:
		line_num(;n: 642)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_37 = call_0o(title ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	title[17.8 6.8 ] ) 
		%v_38 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_39 = call_1o(%v_37, %v_38 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_37[26.1 ] %v_38[26.2 ] ) 
		b_false(LBL_24:129, %v_39)		--org.jruby.ir.instructions.BFalseInstr(	%v_39[26.3 ] ) 
PRINT info for BB 27:
	Vars Live on Entry:  5		
	Vars Live on Exit:  7		
	outgoing edges:29, 
	Instructions:
		line_num(;n: 643)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_40 = copy("title")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_41 = call_1o(doc, %v_40 ;n:at_css, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	doc[2.10 ] %v_40[27.1 ] ) 
		%v_42 = call_1o(%v_41, :'text' ;n:try, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_41[27.2 ] ) 
		%v_43 = call_0o(%v_42 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_42[27.3 ] ) 
		title = copy(%v_43)		--org.jruby.ir.instructions.CopyInstr(	%v_43[27.4 ] ) 
		jump(LBL_25:131)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 28:
	Vars Live on Entry:  5		
	Vars Live on Exit:  5		
	outgoing edges:29, 
	Instructions:
		%v_43 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 29:
	Vars Live on Entry: 
	Vars Live on Exit:  5		
	outgoing edges:31, 
	Instructions:
		line_num(;n: 646)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(title)		--org.jruby.ir.instructions.ReturnInstr(	title[27.5 17.8 6.8 ] ) 
PRINT info for BB 31:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = fetched_canonical_url
PRINT info for BB 1:
	Vars Live on Entry:  21		
	Vars Live on Exit:  21		
	outgoing edges:29, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 21		
	Vars Live on Exit:  21		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 651)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = get_field(%self ;name: @fetched_canonical_url)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].fetched_canonical_url 
		b_false(LBL_0:11, %v_3)		--org.jruby.ir.instructions.BFalseInstr(	%v_3[2.6 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:29, 
	Instructions:
		%v_4 = get_field(%self ;name: @fetched_canonical_url)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].fetched_canonical_url 
		return(%v_4)		--org.jruby.ir.instructions.ReturnInstr(	%v_4[3.0 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 8 21		
	Vars Live on Exit:  0 21		
	outgoing edges:6, 26, 
	Instructions:
		%v_5 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 652)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = call_0o(%self ;n:parsed_content, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		doc = copy(%v_6)		--org.jruby.ir.instructions.CopyInstr(	%v_6[4.2 ] ) 
		b_false(LBL_2:94, %v_6)		--org.jruby.ir.instructions.BFalseInstr(	%v_6[4.2 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  0 8 9 21		
	Vars Live on Exit:  0 8 21		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 653)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry:  0 9 16 18 21		
	Vars Live on Exit:  0 8 9 21		
	outgoing edges:9, 10, 20, 
	Instructions:
		toggle_backtrace(;false)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 654)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = copy("link[rel='canonical']")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_11 = call_1o(doc, %v_10 ;n:at_css, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	doc[4.3 ] %v_10[8.2 ] ) 
		%v_12 = call_0o(%v_11 ;n:attributes, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_11[8.3 ] ) 
		%v_13 = copy("href")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_14 = call_1o(%v_12, %v_13 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_12[8.4 ] %v_13[8.5 ] ) 
		%v_15 = call_0o(%v_14 ;n:text, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_14[8.6 ] ) 
		cu = copy(%v_15)		--org.jruby.ir.instructions.CopyInstr(	%v_15[8.7 ] ) 
		%v_16 = copy(%v_15)		--org.jruby.ir.instructions.CopyInstr(	%v_15[8.7 ] ) 
		%v_17 = call_0o(%v_15 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_15[8.7 ] ) 
		b_false(LBL_14:41, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[8.10 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  0 9 16 18 21		
	Vars Live on Exit:  0 9 16		
	outgoing edges:10, 20, 
	Instructions:
		line_num(;n: 655)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_18 = search_const(scope<1> ;name: URI, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_19 = call_1o(%v_18, cu ;n:parse, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_18[9.1 ] cu[8.8 ] ) 
		ucu = copy(%v_19)		--org.jruby.ir.instructions.CopyInstr(	%v_19[9.2 ] ) 
		%v_17 = copy(%v_19)		--org.jruby.ir.instructions.CopyInstr(	%v_19[9.2 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  0 9 16 18 21		
	Vars Live on Exit:  0 9 16 18 21		
	outgoing edges:11, 12, 
	Instructions:
		b_false(LBL_13:46, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[9.4 8.10 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  0 9 16 18 21		
	Vars Live on Exit:  0 9 16 21		
	outgoing edges:12, 20, 
	Instructions:
		%v_20 = call_0o(ucu ;n:scheme, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	ucu[9.3 ] ) 
		%v_21 = call_0o(%v_20 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_20[11.0 ] ) 
		%v_17 = copy(%v_21)		--org.jruby.ir.instructions.CopyInstr(	%v_21[11.1 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  0 9 16 18 21		
	Vars Live on Exit:  0 9 16 18 21		
	outgoing edges:13, 14, 
	Instructions:
		b_false(LBL_12:51, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[11.2 9.4 8.10 ] ) 
PRINT info for BB 13:
	Vars Live on Entry:  0 9 16 18		
	Vars Live on Exit:  0 9 16 21		
	outgoing edges:14, 20, 
	Instructions:
		%v_22 = call_0o(ucu ;n:host, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	ucu[9.3 ] ) 
		%v_23 = call_0o(%v_22 ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_22[13.0 ] ) 
		%v_17 = copy(%v_23)		--org.jruby.ir.instructions.CopyInstr(	%v_23[13.1 ] ) 
PRINT info for BB 14:
	Vars Live on Entry:  0 9 16		
	Vars Live on Exit:  0 9 16 18		
	outgoing edges:15, 17, 
	Instructions:
		b_false(LBL_10:61, %v_17)		--org.jruby.ir.instructions.BFalseInstr(	%v_17[13.2 11.2 9.4 8.10 ] ) 
PRINT info for BB 15:
	Vars Live on Entry:  0 9 26		
	Vars Live on Exit:  0 9 16		
	outgoing edges:16, 20, 
	Instructions:
		line_num(;n: 657)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_24 = copy(cu)		--org.jruby.ir.instructions.CopyInstr(	cu[8.8 ] ) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_7)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_7[6.1 ] ) 
PRINT info for BB 16:
	Vars Live on Entry: 
	Vars Live on Exit:  26		
	outgoing edges:29, 
	Instructions:
		return(%v_24)		--org.jruby.ir.instructions.ReturnInstr(	%v_24[15.1 ] ) 
PRINT info for BB 17:
	Vars Live on Entry:  0 9 27		
	Vars Live on Exit:  0 9		
	outgoing edges:18, 
	Instructions:
		%v_25 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 18:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9 27		
	outgoing edges:19, 20, 
	Instructions:
		%v_9 = copy(%v_25)		--org.jruby.ir.instructions.CopyInstr(	%v_25[17.0 ] ) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_7)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_7[6.1 ] ) 
PRINT info for BB 19:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:25, 
	Instructions:
		jump(LBL_6:92)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 20:
	Vars Live on Entry:  0 9 29		
	Vars Live on Exit:  0 9		
	outgoing edges:21, 22, 24, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		%v_26 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_27 = rescue_eqq(StandardError, %v_26)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_26[20.1 ] ) 
		b_true(LBL_18:79, %v_27)		--org.jruby.ir.instructions.BTrueInstr(	%v_27[20.2 ] ) 
PRINT info for BB 21:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9 29		
	outgoing edges:24, 29, 
	Instructions:
		throw(%v_26)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_26[20.1 ] ) 
PRINT info for BB 22:
	Vars Live on Entry:  0 9		
	Vars Live on Exit:  0 9		
	outgoing edges:23, 24, 
	Instructions:
		%v_9 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		put_global_var($!, %v_7)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_7[6.1 ] ) 
PRINT info for BB 23:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:25, 
	Instructions:
		jump(LBL_6:92)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 24:
	Vars Live on Entry: 
	Vars Live on Exit:  9		
	outgoing edges:29, 
	Instructions:
		%v_28 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_29 = runtime_helper(%v_28, %v_7 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_28[24.0 ] %v_7[6.1 ] ) 
		throw(%v_28)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_28[24.0 ] ) 
PRINT info for BB 25:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:27, 
	Instructions:
		jump(LBL_3:96)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 26:
	Vars Live on Entry:  0		
	Vars Live on Exit:  0		
	outgoing edges:27, 
	Instructions:
		%v_9 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 27:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:29, 
	Instructions:
		line_num(;n: 663)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_30 = call_0o(%self ;n:url, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		return(%v_30)		--org.jruby.ir.instructions.ReturnInstr(	%v_30[27.1 ] ) 
PRINT info for BB 29:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

