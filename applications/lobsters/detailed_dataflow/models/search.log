SET IRMethod, name = initialize
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 12)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("")		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_3 ;name: @q)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 ] %v_3[2.6 ] ) #<%self>#	-- [PUT:%self].q 
		line_num(;n: 13)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy("all")		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_4 ;name: @what)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 ] %v_4[2.9 ] ) #<%self>#	-- [PUT:%self].what 
		line_num(;n: 14)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = copy("relevance")		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_5 ;name: @order)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 ] %v_5[2.12 ] ) #<%self>#	-- [PUT:%self].order 
		line_num(;n: 16)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		put_field(%self, Fixnum:1 ;name: @page)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 2.13 ] ) #<%self>#	-- [PUT:%self].page 
		line_num(;n: 17)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		put_field(%self, Fixnum:20 ;name: @per_page)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 2.13 2.15 ] ) #<%self>#	-- [PUT:%self].per_page 
		line_num(;n: 19)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_6 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_6 ;name: @results)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 2.13 2.15 2.17 ] %v_6[2.19 ] ) #<%self>#	-- [PUT:%self].results 
		line_num(;n: 20)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		put_field(%self, Fixnum:-1 ;name: @total_results)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 2.13 2.15 2.17 2.20 ] ) #<%self>#	-- [PUT:%self].total_results 
		return(Fixnum:-1)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = max_matches
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  4 5		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 24)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = search_const(scope<1> ;name: ThinkingSphinx, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_4 = inheritance_search_const(%v_3 ;name: Configuration, no_priv: true)		--org.jruby.ir.instructions.InheritanceSearchConstInstr(	%v_3[2.6 ] ) 
		bne(LBL_1:11, %v_4, %undefined)		--org.jruby.ir.instructions.BNEInstr(	%v_4[2.7 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  5		
	Vars Live on Exit:  4		
	outgoing edges:4, 
	Instructions:
		%v_4 = const_missing(%v_3, :'Configuration' ;n:const_missing, t:FU, cl:false, missing: Configuration)		--org.jruby.ir.instructions.ConstMissingInstr(	%v_3[2.6 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  9		
	Vars Live on Exit:  5		
	outgoing edges:5, 6, 
	Instructions:
		%v_5 = call_0o(%v_4 ;n:instance, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_4[3.0 2.7 ] ) 
		%v_6 = call_0o(%v_5 ;n:settings, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[4.0 ] ) 
		%v_7 = copy("max_matches")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_8 = call_1o(%v_6, %v_7 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_6[4.1 ] %v_7[4.2 ] ) 
		b_true(LBL_0:18, %v_8)		--org.jruby.ir.instructions.BTrueInstr(	%v_8[4.3 ] ) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:7, 
	Instructions:
		return(Fixnum:1000)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  9		
	outgoing edges:7, 
	Instructions:
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[4.3 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = persisted?
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 29)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = to_url_params
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:4, 6, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 32)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy(Array:[:'q', :'what', :'order'])		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_4 = call(%v_3, %self:CLOSURE to_url_params_CLOSURE_1[./lobsters/models/search.rb:32] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_3[2.6 ] %self[2.0 ] ) 
CLOSURE BEGIN: %self[2.0,] p[] 
PRINT info for BB 1:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		p = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2		
	Vars Live on Exit:  0 2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 32)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = copy("=")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_4 = search_const(scope<2> ;name: CGI, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_1_5 = call_1o(%self, p ;n:send, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] p[2.2 ] ) 
		%cl_1_6 = call_0o(%cl_1_5 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%cl_1_5[3.3 ] ) 
		%cl_1_7 = call_1o(%cl_1_4, %cl_1_6 ;n:escape, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_1_4[3.2 ] %cl_1_6[3.4 ] ) 
		%cl_1_8 = build_compound_string(#{p}, %cl_1_3, #{%cl_1_7})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	p[2.2 ] %cl_1_3[3.1 ] %cl_1_7[3.5 ] ) 
		return(%cl_1_8)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_8[3.6 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:6, 
	Instructions:
		%cl_1_9 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_10 = runtime_helper(%cl_1_9 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_9[4.0 ] ) 
		return(%cl_1_10)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_10[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:
	Instructions:
CLOSURE END
		%v_5 = copy("&amp;")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_6 = call_1o(%v_4, %v_5 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_4[2.7 ] %v_5[2.8 ] ) 
		return(%v_6)		--org.jruby.ir.instructions.ReturnInstr(	%v_6[2.9 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%v_7 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_8 = runtime_helper(%v_7 ;method: HANDLE_NONLOCAL_RETURN)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_7[4.0 ] ) 
		return(%v_8)		--org.jruby.ir.instructions.ReturnInstr(	%v_8[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = page_count
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:8, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 6 7		
	Vars Live on Exit: 
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 37)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:total_results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%v_3 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_3[2.6 ] ) 
		total = copy(%v_4)		--org.jruby.ir.instructions.CopyInstr(	%v_4[2.7 ] ) 
		line_num(;n: 39)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = call_1f(%v_4, Fixnum:-1 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_4[2.7 ] ) 
		b_true(LBL_2:16, %v_5)		--org.jruby.ir.instructions.BTrueInstr(	%v_5[2.10 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 6 7		
	Vars Live on Exit:  0 6		
	outgoing edges:4, 
	Instructions:
		%v_6 = call_0o(%self ;n:max_matches, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_7 = call_1o(total, %v_6 ;n:>, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	total[2.8 ] %v_6[3.0 ] ) 
		%v_5 = copy(%v_7)		--org.jruby.ir.instructions.CopyInstr(	%v_7[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 6 7		
	outgoing edges:5, 6, 
	Instructions:
		b_false(LBL_0:22, %v_5)		--org.jruby.ir.instructions.BFalseInstr(	%v_5[3.2 2.10 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 40)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_8 = call_0o(%self ;n:max_matches, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		total = copy(%v_8)		--org.jruby.ir.instructions.CopyInstr(	%v_8[5.1 ] ) 
		jump(LBL_1:24)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 6		
	Vars Live on Exit:  0 6		
	outgoing edges:7, 
	Instructions:
		%v_8 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit:  0 6		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 43)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_9 = call_1f(total, Fixnum:1 ;n:-, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	total[5.2 2.8 ] ) 
		%v_10 = call_0o(%self ;n:per_page, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_11 = call_0o(%v_10 ;n:to_i, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_10[7.2 ] ) 
		%v_12 = call_1o(%v_9, %v_11 ;n:/, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_9[7.1 ] %v_11[7.3 ] ) 
		%v_13 = call_1f(%v_12, Fixnum:1 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	%v_12[7.4 ] ) 
		return(%v_13)		--org.jruby.ir.instructions.ReturnInstr(	%v_13[7.5 ] ) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

SET IRMethod, name = search_for_user!
PRINT info for BB 1:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 78 100		
	outgoing edges:47, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 78 100		
	outgoing edges:3, 4, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 1, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		user = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		line_num(;n: 47)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = call_0o(%self ;n:page, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_4 = call_0o(%self ;n:page_count, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 ] ) 
		%v_5 = copy(Array:[%v_3, %v_4])		--org.jruby.ir.instructions.CopyInstr(	%v_3[2.7 ] %v_4[2.8 ] ) 
		%v_6 = call_0o(%v_5 ;n:min, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_5[2.9 ] ) 
		%v_7 = call_0o(%self ;n:per_page, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 2.8 ] ) 
		%v_8 = copy(Array:[:'story', :'user'])		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_9 = copy({:'ranker'=>:'bm25', :'page'=>%v_6, :'per_page'=>%v_7, :'include'=>%v_8})		--org.jruby.ir.instructions.CopyInstr(	%v_6[2.10 ] %v_7[2.11 ] %v_8[2.12 ] ) 
		opts = copy(%v_9)		--org.jruby.ir.instructions.CopyInstr(	%v_9[2.13 ] ) 
		line_num(;n: 54)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_10 = call_0o(%self ;n:order, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 2.7 2.8 2.11 ] ) 
		%v_11 = copy("newest")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_12 = call_1o(%v_10, %v_11 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_10[2.16 ] %v_11[2.17 ] ) 
		b_false(LBL_0:25, %v_12)		--org.jruby.ir.instructions.BFalseInstr(	%v_12[2.18 ] ) 
PRINT info for BB 3:
	Vars Live on Entry:  0 4 12 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:8, 
	Instructions:
		line_num(;n: 55)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_13 = copy("created_at DESC")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(opts, :'order', %v_13 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	opts[2.14 ] %v_13[3.1 ] ) #<opts>#	-- [PUT:opts].[] 
		jump(LBL_1:39)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 4:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:5, 6, 
	Instructions:
		line_num(;n: 56)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_14 = call_0o(%self ;n:order, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_15 = copy("points")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_16 = call_1o(%v_14, %v_15 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_14[4.1 ] %v_15[4.2 ] ) 
		b_false(LBL_2:35, %v_16)		--org.jruby.ir.instructions.BFalseInstr(	%v_16[4.3 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  0 4 12 20 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:7, 
	Instructions:
		line_num(;n: 57)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_17 = copy("score DESC")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(opts, :'order', %v_17 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	opts[2.14 ] %v_17[5.1 ] ) #<opts>#	-- [PUT:opts].[] 
		jump(LBL_3:37)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry:  0 4 12 20 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 29 44 67 78 100		
	outgoing edges:7, 
	Instructions:
		%v_17 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry:  0 4 12 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 20 29 44 67 78 100		
	outgoing edges:8, 
	Instructions:
		%v_13 = copy(%v_17)		--org.jruby.ir.instructions.CopyInstr(	%v_17[6.0 5.1 ] ) 
PRINT info for BB 8:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 29 44 67 78 100		
	outgoing edges:9, 15, 
	Instructions:
		line_num(;n: 61)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		domain = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
		line_num(;n: 62)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_18 = call_0o(%self ;n:q, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[2.0 ] ) 
		%v_19 = call_0o(%v_18 ;n:to_s, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_18[8.3 ] ) 
		%v_20 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_21 = call_1o(%v_19, %v_20 ;n:split, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_19[8.4 ] %v_20[8.5 ] ) 
		%v_22 = call(%v_21, %self:CLOSURE search_for_user!_CLOSURE_1[./lobsters/models/search.rb:62] ;n:reject, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_21[8.6 ] %self[8.3 2.0 ] ) 
CLOSURE BEGIN: w[] m[] 
PRINT info for BB 1:
	Vars Live on Entry:  9		
	Vars Live on Exit:  9		
	outgoing edges:9, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 9		
	Vars Live on Exit:  9		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		w = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  7 9		
	Vars Live on Exit:  2 9		
	outgoing edges:4, 5, 7, 
	Instructions:
		line_num(;n: 63)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = copy(RE:|^domain:(.+)$|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_1_4 = call_1o(w, RE:|^domain:(.+)$|RegexpOptions(kcode: NONE, kcodeDefault) ;n:match, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	w[2.2 ] ) 
		m = copy(%cl_1_4)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_4[3.2 ] ) 
		b_false(CL1_LBL_0:17, %cl_1_4)		--org.jruby.ir.instructions.BFalseInstr(	%cl_1_4[3.2 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  8		
	Vars Live on Exit:  7 9		
	outgoing edges:6, 7, 
	Instructions:
		line_num(;n: 64)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_5 = call_1f(m, Fixnum:1 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneFixnumArgNoBlockCallInstr(	m[3.3 ] ) 
		domain = copy(%cl_1_5)		--org.jruby.ir.instructions.CopyInstr(	%cl_1_5[4.1 ] ) 
		jump(CL1_LBL_1:19)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 5:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit:  8		
	outgoing edges:9, 
	Instructions:
		return(%cl_1_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_5[4.1 ] ) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:9, 
	Instructions:
		%cl_1_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_7 = runtime_helper(%cl_1_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_6[7.0 ] ) 
		return(%cl_1_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_7[7.1 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_23 = copy(" ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_24 = call_1o(%v_22, %v_23 ;n:join, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_22[8.7 ] %v_23[8.8 ] ) 
		words = copy(%v_24)		--org.jruby.ir.instructions.CopyInstr(	%v_24[8.9 ] ) 
		line_num(;n: 68)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_25 = call_0o(domain ;n:present?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	domain[8.1 ] ) 
		b_false(LBL_4:93, %v_25)		--org.jruby.ir.instructions.BFalseInstr(	%v_25[8.12 ] ) 
PRINT info for BB 9:
	Vars Live on Entry:  0 4 12 21 29 33 34 35 36 44	
 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:10, 11, 
	Instructions:
		line_num(;n: 69)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_26 = copy("stories")		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(%self, %v_26 ;n:what=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[2.0 ] %v_26[9.1 ] ) #<%self>#	-- [PUT:%self].what 
		line_num(;n: 70)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_27 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_28 = call_1o(%v_27, :'id' ;n:select, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_27[9.4 ] ) 
		%v_29 = copy("`url` REGEXP '//([^/]*.)?")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_30 = search_const(scope<1> ;name: ActiveRecord, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_31 = inheritance_search_const(%v_30 ;name: Base, no_priv: true)		--org.jruby.ir.instructions.InheritanceSearchConstInstr(	%v_30[9.7 ] ) 
		bne(LBL_6:65, %v_31, %undefined)		--org.jruby.ir.instructions.BNEInstr(	%v_31[9.8 ] ) 
PRINT info for BB 10:
	Vars Live on Entry:  0 4 12 21 29 33 34 36 44 67	
 78 100		
	Vars Live on Exit:  0 4 12 21 29 33 34 35 44 67	
 78 100		
	outgoing edges:11, 
	Instructions:
		%v_31 = const_missing(%v_30, :'Base' ;n:const_missing, t:FU, cl:false, missing: Base)		--org.jruby.ir.instructions.ConstMissingInstr(	%v_30[9.7 ] ) 
PRINT info for BB 11:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 33 34 36 44 67	
 78 100		
	outgoing edges:12, 13, 
	Instructions:
		%v_32 = call_0o(%v_31 ;n:connection, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_31[10.0 9.8 ] ) 
		%v_33 = call_1o(%v_32, domain ;n:quote_string, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_32[11.0 ] domain[8.1 ] ) 
		%v_34 = call_1o(%v_29, %v_33 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_29[9.6 ] %v_33[11.1 ] ) 
		%v_35 = copy("/'")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_36 = call_1o(%v_34, %v_35 ;n:+, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_34[11.2 ] %v_35[11.3 ] ) 
		%v_37 = call_1o(%v_28, %v_36 ;n:where, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_28[9.5 ] %v_36[11.4 ] ) 
		%v_38 = call(%v_37, :'id' ;n:collect, t:NO, cl:true(org.jruby.ir.operands.Symbol))		--org.jruby.ir.instructions.CallInstr(	%v_37[11.5 ] ) 
		story_ids = copy(%v_38)		--org.jruby.ir.instructions.CopyInstr(	%v_38[11.6 ] ) 
		line_num(;n: 74)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_39 = call_0o(%v_38 ;n:any?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_38[11.6 ] ) 
		b_false(LBL_7:81, %v_39)		--org.jruby.ir.instructions.BFalseInstr(	%v_39[11.9 ] ) 
PRINT info for BB 12:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:16, 
	Instructions:
		line_num(;n: 75)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_40 = copy({:'story_id'=>story_ids})		--org.jruby.ir.instructions.CopyInstr(	story_ids[11.7 ] ) 
		attr_assign(opts, :'with', %v_40 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	opts[3.2 5.2 2.14 ] %v_40[12.1 ] ) #<opts>#	-- [PUT:opts].[] 
		jump(LBL_5:95)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 13:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:47, 
	Instructions:
		line_num(;n: 77)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_41 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(%self, %v_41 ;n:results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[9.2 2.0 ] %v_41[13.1 ] ) #<%self>#	-- [PUT:%self].results 
		line_num(;n: 78)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, Fixnum:0 ;n:total_results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[13.2 9.2 2.0 ] ) #<%self>#	-- [PUT:%self].total_results 
		line_num(;n: 79)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, Fixnum:0 ;n:page=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[13.2 13.4 9.2 2.0 ] ) #<%self>#	-- [PUT:%self].page 
		line_num(;n: 80)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		return(false)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 15:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:16, 
	Instructions:
		%v_40 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 16:
	Vars Live on Entry:  0 4 12 21 29 44 48 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:17, 20, 
	Instructions:
		line_num(;n: 84)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_42 = call_0o(%self ;n:what, t:VA, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[9.2 2.0 ] ) 
		%v_45 = copy("all")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_44 = eqq(%v_45, %v_42)		--org.jruby.ir.instructions.EQQInstr(	%v_45[16.2 ] %v_42[16.1 ] ) 
		b_true(LBL_11:108, %v_44)		--org.jruby.ir.instructions.BTrueInstr(	%v_44[16.3 ] ) 
PRINT info for BB 17:
	Vars Live on Entry:  0 4 12 21 29 44 48 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 48 67 78 100	

	outgoing edges:18, 21, 
	Instructions:
		%v_47 = copy("comments")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_46 = eqq(%v_47, %v_42)		--org.jruby.ir.instructions.EQQInstr(	%v_47[17.0 ] %v_42[16.1 ] ) 
		b_true(LBL_12:115, %v_46)		--org.jruby.ir.instructions.BTrueInstr(	%v_46[17.1 ] ) 
PRINT info for BB 18:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 48 67 78 100	

	outgoing edges:19, 22, 
	Instructions:
		%v_49 = copy("stories")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_48 = eqq(%v_49, %v_42)		--org.jruby.ir.instructions.EQQInstr(	%v_49[18.0 ] %v_42[16.1 ] ) 
		b_true(LBL_13:121, %v_48)		--org.jruby.ir.instructions.BTrueInstr(	%v_48[18.1 ] ) 
PRINT info for BB 19:
	Vars Live on Entry:  0 4 12 21 29 44 56 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:24, 
	Instructions:
		line_num(;n: 92)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_57 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_43 = copy(%v_57)		--org.jruby.ir.instructions.CopyInstr(	%v_57[19.1 ] ) 
		jump(LBL_9:132)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 20:
	Vars Live on Entry:  0 4 12 21 29 44 56 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:24, 
	Instructions:
		line_num(;n: 86)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_50 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_51 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_52 = copy(Array:[%v_50, %v_51])		--org.jruby.ir.instructions.CopyInstr(	%v_50[20.1 ] %v_51[20.2 ] ) 
		%v_43 = copy(%v_52)		--org.jruby.ir.instructions.CopyInstr(	%v_52[20.3 ] ) 
		jump(LBL_9:132)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 21:
	Vars Live on Entry:  0 4 12 21 29 44 56 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:24, 
	Instructions:
		line_num(;n: 88)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_53 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_54 = copy(Array:[%v_53])		--org.jruby.ir.instructions.CopyInstr(	%v_53[21.1 ] ) 
		%v_43 = copy(%v_54)		--org.jruby.ir.instructions.CopyInstr(	%v_54[21.2 ] ) 
		jump(LBL_9:132)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 22:
	Vars Live on Entry:  0 4 12 21 29 44 56 67 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:24, 
	Instructions:
		line_num(;n: 90)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_55 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_56 = copy(Array:[%v_55])		--org.jruby.ir.instructions.CopyInstr(	%v_55[22.1 ] ) 
		%v_43 = copy(%v_56)		--org.jruby.ir.instructions.CopyInstr(	%v_56[22.2 ] ) 
		jump(LBL_9:132)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 24:
	Vars Live on Entry:  0 4 12 21 29 44 67 69 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 56 67 78 100	

	outgoing edges:26, 
	Instructions:
		attr_assign(opts, :'classes', %v_43 ;n:[]=, t:UN, cl:false)		--org.jruby.ir.instructions.AttrAssignInstr(	opts[12.2 3.2 5.2 2.14 ] %v_43[20.4 21.3 22.3 19.2 ] ) #<opts>#	-- [PUT:opts].[] 
		line_num(;n: 96)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_58 = copy(RE:|(['\/~"@])|RegexpOptions(kcode: NONE, kcodeDefault))		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_59 = copy("\\\1")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_60 = call(words, RE:|(['\/~"@])|RegexpOptions(kcode: NONE, kcodeDefault), %v_59 ;n:gsub, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	words[8.10 ] %v_59[24.3 ] ) 
		query = copy(%v_60)		--org.jruby.ir.instructions.CopyInstr(	%v_60[24.4 ] ) 
		line_num(;n: 99)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_61 = copy(Array:[])		--org.jruby.ir.instructions.CopyInstr(	) 
		attr_assign(%self, %v_61 ;n:results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[9.2 2.0 ] %v_61[24.7 ] ) #<%self>#	-- [PUT:%self].results 
		line_num(;n: 100)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		attr_assign(%self, Fixnum:0 ;n:total_results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[24.8 9.2 2.0 ] ) #<%self>#	-- [PUT:%self].total_results 
		line_num(;n: 101)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_62 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
PRINT info for BB 26:
	Vars Live on Entry:  0 4 12 21 29 44 67 69 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 69 78 100	

	outgoing edges:27, 28, 
	Instructions:
		toggle_backtrace(;true)		--org.jruby.ir.instructions.ToggleBacktraceInstr(	) 
		line_num(;n: 102)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_65 = search_const(scope<1> ;name: ThinkingSphinx, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_66 = call(%v_65, query, opts ;n:search, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_65[26.2 ] query[24.5 ] opts[24.0 12.2 3.2 5.2 2.14 ] ) 
		attr_assign(%self, %v_66 ;n:results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[24.8 24.10 9.2 2.0 ] %v_66[26.3 ] ) #<%self>#	-- [PUT:%self].results 
		line_num(;n: 103)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_67 = call_0o(%self ;n:results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[26.4 24.8 24.10 9.2 2.0 ] ) 
		%v_68 = call_0o(%v_67 ;n:total_entries, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_67[26.6 ] ) 
		attr_assign(%self, %v_68 ;n:total_results=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[26.4 26.6 24.8 24.10 9.2 2.0 ] %v_68[26.7 ] ) #<%self>#	-- [PUT:%self].total_results 
		%v_64 = copy(%v_68)		--org.jruby.ir.instructions.CopyInstr(	%v_68[26.7 ] ) 
		put_global_var($!, %v_62)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_62[24.12 ] ) 
PRINT info for BB 27:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:33, 
	Instructions:
		jump(LBL_16:193)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 28:
	Vars Live on Entry:  0 4 12 21 29 44 67 69 75 78	
 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 69 78 100	

	outgoing edges:29, 30, 32, 
	Instructions:
		%v_69 = recv_ruby_exc()		--org.jruby.ir.instructions.ReceiveRubyExceptionInstr(	) 
		%v_70 = rescue_eqq(StandardError, %v_69)		--org.jruby.ir.instructions.RescueEQQInstr(	%v_69[28.0 ] ) 
		b_true(LBL_22:172, %v_70)		--org.jruby.ir.instructions.BTrueInstr(	%v_70[28.1 ] ) 
PRINT info for BB 29:
	Vars Live on Entry:  4 12 21 29 44 67 69 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 69 75 78 100	

	outgoing edges:32, 47, 
	Instructions:
		throw(%v_69)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_69[28.0 ] ) 
PRINT info for BB 30:
	Vars Live on Entry:  0 4 12 21 29 44 67 69 78 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 69 100		
	outgoing edges:31, 32, 
	Instructions:
		%v_71 = get_global_var($!)		--org.jruby.ir.instructions.GetGlobalVariableInstr(	) 
		e = copy(%v_71)		--org.jruby.ir.instructions.CopyInstr(	%v_71[30.0 ] ) 
		line_num(;n: 105)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_72 = search_const(scope<1> ;name: Rails, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_73 = call_0o(%v_72 ;n:logger, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%v_72[30.3 ] ) 
		%v_74 = copy("Error from Sphinx: ")		--org.jruby.ir.instructions.CopyInstr(	) 
		%v_75 = call_0o(e ;n:inspect, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	e[30.1 ] ) 
		%v_76 = build_compound_string(%v_74, #{%v_75})		--org.jruby.ir.instructions.BuildCompoundStringInstr(	%v_74[30.5 ] %v_75[30.6 ] ) 
		%v_77 = call_1o(%v_73, %v_76 ;n:info, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_73[30.4 ] %v_76[30.7 ] ) 
		%v_64 = copy(%v_77)		--org.jruby.ir.instructions.CopyInstr(	%v_77[30.8 ] ) 
		put_global_var($!, %v_62)		--org.jruby.ir.instructions.PutGlobalVarInstr(	%v_62[24.12 ] ) 
PRINT info for BB 31:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:33, 
	Instructions:
		jump(LBL_16:193)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 32:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 69 78 100		
	outgoing edges:47, 
	Instructions:
		%v_78 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%v_79 = runtime_helper(%v_78, %v_62 ;method: RESTORE_EXCEPTION_VAR)		--org.jruby.ir.instructions.RuntimeHelperCall(	%v_78[32.0 ] %v_62[24.12 ] ) 
		throw(%v_78)		--org.jruby.ir.instructions.ThrowExceptionInstr(	%v_78[32.0 ] ) 
PRINT info for BB 33:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:34, 35, 
	Instructions:
		line_num(;n: 108)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_80 = call_0o(%self ;n:page, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_81 = call_0o(%self ;n:page_count, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[33.1 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_82 = call_1o(%v_80, %v_81 ;n:>, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_80[33.1 ] %v_81[33.2 ] ) 
		b_false(LBL_24:203, %v_82)		--org.jruby.ir.instructions.BFalseInstr(	%v_82[33.3 ] ) 
PRINT info for BB 34:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:36, 
	Instructions:
		line_num(;n: 109)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_83 = call_0o(%self ;n:page_count, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		attr_assign(%self, %v_83 ;n:page=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	%self[34.1 26.4 26.8 24.8 24.10 9.2 2.0 ] %v_83[34.1 ] ) #<%self>#	-- [PUT:%self].page 
		jump(LBL_25:205)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 35:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:36, 
	Instructions:
		%v_83 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 36:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 93 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:37, 38, 
	Instructions:
		line_num(;n: 114)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_84 = call_1o(opts, :'classes' ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	opts[24.0 12.2 3.2 5.2 2.14 ] ) 
		%v_85 = search_const(scope<1> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_86 = call_1o(%v_84, %v_85 ;n:include?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_84[36.1 ] %v_85[36.2 ] ) 
		b_false(LBL_28:212, %v_86)		--org.jruby.ir.instructions.BFalseInstr(	%v_86[36.3 ] ) 
PRINT info for BB 37:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 93 100	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:38, 
	Instructions:
		%v_86 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
PRINT info for BB 38:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 93 100	

	outgoing edges:39, 40, 
	Instructions:
		b_false(LBL_26:226, %v_86)		--org.jruby.ir.instructions.BFalseInstr(	%v_86[37.0 36.3 ] ) 
PRINT info for BB 39:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:41, 
	Instructions:
		line_num(;n: 115)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_87 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_88 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_89 = call_0o(%self ;n:results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_90 = call(%v_89, %self:CLOSURE search_for_user!_CLOSURE_2[./lobsters/models/search.rb:116] ;n:select, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_89[39.3 ] %self[39.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: r[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		r = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 116)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = call_0o(r ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_2_4 = search_const(scope<2> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_2_5 = call_1o(%cl_2_3, %cl_2_4 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_2_3[3.1 ] %cl_2_4[3.2 ] ) 
		return(%cl_2_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_2_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_7 = runtime_helper(%cl_2_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_6[4.0 ] ) 
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_91 = call(%v_90, %self:CLOSURE search_for_user!_CLOSURE_3[./lobsters/models/search.rb:116] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_90[39.4 ] %self[39.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: c[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_3_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		c = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 116)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_3 = call_0o(c ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	c[2.2 ] ) 
		return(%cl_3_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_3_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_3_5 = runtime_helper(%cl_3_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_3_4[4.0 ] ) 
		return(%cl_3_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_92 = call(%v_87, %v_88, %v_91 ;n:comment_votes_by_user_for_comment_ids_hash, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_87[39.1 ] %v_88[39.2 ] %v_91[39.5 ] ) 
		votes = copy(%v_92)		--org.jruby.ir.instructions.CopyInstr(	%v_92[39.6 ] ) 
		line_num(;n: 118)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_93 = call_0o(%self ;n:results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[39.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_94 = call(%v_93, %self:CLOSURE search_for_user!_CLOSURE_4[./lobsters/models/search.rb:118] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_93[39.9 ] %self[39.3 39.9 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: r[] votes[39.7,] 
PRINT info for BB 1:
	Vars Live on Entry:  10		
	Vars Live on Exit:  10		
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 10		
	Vars Live on Exit:  10		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_4_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		r = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 7 10		
	Vars Live on Exit:  2 10		
	outgoing edges:4, 5, 9, 
	Instructions:
		line_num(;n: 119)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_4_3 = call_0o(r ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_4_4 = search_const(scope<2> ;name: Comment, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_4_5 = call_1o(%cl_4_3, %cl_4_4 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_4_3[3.1 ] %cl_4_4[3.2 ] ) 
		b_false(CL4_LBL_2:16, %cl_4_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_4_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 7 10		
	Vars Live on Exit:  2 10		
	outgoing edges:5, 9, 
	Instructions:
		%cl_4_6 = call_0o(r ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_4_7 = call_1o(votes, %cl_4_6 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	votes[] %cl_4_6[4.0 ] ) 
		%cl_4_5 = copy(%cl_4_7)		--org.jruby.ir.instructions.CopyInstr(	%cl_4_7[4.1 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  2 10		
	Vars Live on Exit:  2 7 10		
	outgoing edges:6, 7, 
	Instructions:
		b_false(CL4_LBL_0:23, %cl_4_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_4_5[4.2 3.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  12		
	Vars Live on Exit:  2 10		
	outgoing edges:8, 9, 
	Instructions:
		line_num(;n: 120)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_4_8 = call_0o(r ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_4_9 = call_1o(votes, %cl_4_8 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	votes[] %cl_4_8[6.1 ] ) 
		attr_assign(r, %cl_4_9 ;n:current_vote=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	r[6.1 2.2 ] %cl_4_9[6.2 ] ) #<r>#	-- [PUT:r].current_vote 
		jump(CL4_LBL_1:25)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  12		
	outgoing edges:11, 
	Instructions:
		return(%cl_4_9)		--org.jruby.ir.instructions.ReturnInstr(	%cl_4_9[6.2 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		%cl_4_10 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_4_11 = runtime_helper(%cl_4_10 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_4_10[9.0 ] ) 
		return(%cl_4_11)		--org.jruby.ir.instructions.ReturnInstr(	%cl_4_11[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		jump(LBL_27:228)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 40:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:41, 
	Instructions:
		%v_94 = copy(nil)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 41:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100 105	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:42, 43, 
	Instructions:
		line_num(;n: 125)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_95 = call_1o(opts, :'classes' ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	opts[24.0 12.2 3.2 5.2 2.14 ] ) 
		%v_96 = search_const(scope<1> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_97 = call_1o(%v_95, %v_96 ;n:include?, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_95[41.1 ] %v_96[41.2 ] ) 
		b_false(LBL_31:235, %v_97)		--org.jruby.ir.instructions.BFalseInstr(	%v_97[41.3 ] ) 
PRINT info for BB 42:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100 105	

	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:43, 
	Instructions:
		%v_97 = copy(user)		--org.jruby.ir.instructions.CopyInstr(	user[2.5 ] ) 
PRINT info for BB 43:
	Vars Live on Entry:  0 4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100 105	

	outgoing edges:44, 45, 
	Instructions:
		b_false(LBL_29:249, %v_97)		--org.jruby.ir.instructions.BFalseInstr(	%v_97[42.0 41.3 ] ) 
PRINT info for BB 44:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  0 4 12 21 29 44 67 78 100		
	outgoing edges:47, 
	Instructions:
		line_num(;n: 126)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_98 = search_const(scope<1> ;name: Vote, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_99 = call_0o(user ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	user[2.5 ] ) 
		%v_100 = call_0o(%self ;n:results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_101 = call(%v_100, %self:CLOSURE search_for_user!_CLOSURE_5[./lobsters/models/search.rb:127] ;n:select, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_100[44.3 ] %self[44.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: r[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_5_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		r = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 127)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_5_3 = call_0o(r ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_5_4 = search_const(scope<2> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_5_5 = call_1o(%cl_5_3, %cl_5_4 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_5_3[3.1 ] %cl_5_4[3.2 ] ) 
		return(%cl_5_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_5_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_5_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_5_7 = runtime_helper(%cl_5_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_5_6[4.0 ] ) 
		return(%cl_5_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_5_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_102 = call(%v_101, %self:CLOSURE search_for_user!_CLOSURE_6[./lobsters/models/search.rb:127] ;n:map, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_101[44.4 ] %self[44.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: s[] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_6_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		s = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 127)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_6_3 = call_0o(s ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	s[2.2 ] ) 
		return(%cl_6_3)		--org.jruby.ir.instructions.ReturnInstr(	%cl_6_3[3.1 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_6_4 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_6_5 = runtime_helper(%cl_6_4 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_6_4[4.0 ] ) 
		return(%cl_6_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_6_5[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		%v_103 = call(%v_98, %v_99, %v_102 ;n:story_votes_by_user_for_story_ids_hash, t:NO, cl:false)		--org.jruby.ir.instructions.CallInstr(	%v_98[44.1 ] %v_99[44.2 ] %v_102[44.5 ] ) 
		votes = copy(%v_103)		--org.jruby.ir.instructions.CopyInstr(	%v_103[44.6 ] ) 
		line_num(;n: 129)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_104 = call_0o(%self ;n:results, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	%self[44.3 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
		%v_105 = call(%v_104, %self:CLOSURE search_for_user!_CLOSURE_7[./lobsters/models/search.rb:129] ;n:each, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%v_104[44.9 ] %self[44.3 44.9 34.2 26.4 26.8 24.8 24.10 9.2 2.0 ] ) 
CLOSURE BEGIN: r[] votes[44.7,] 
PRINT info for BB 1:
	Vars Live on Entry:  10		
	Vars Live on Exit:  10		
	outgoing edges:11, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  2 10		
	Vars Live on Exit:  10		
	outgoing edges:3, 
	Instructions:
		[DEAD]%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_7_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		r = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2 7 10		
	Vars Live on Exit:  2 10		
	outgoing edges:4, 5, 9, 
	Instructions:
		line_num(;n: 130)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_7_3 = call_0o(r ;n:class, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_7_4 = search_const(scope<2> ;name: Story, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%cl_7_5 = call_1o(%cl_7_3, %cl_7_4 ;n:==, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%cl_7_3[3.1 ] %cl_7_4[3.2 ] ) 
		b_false(CL7_LBL_2:16, %cl_7_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_7_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2 7 10		
	Vars Live on Exit:  2 10		
	outgoing edges:5, 9, 
	Instructions:
		%cl_7_6 = call_0o(r ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_7_7 = call_1o(votes, %cl_7_6 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	votes[] %cl_7_6[4.0 ] ) 
		%cl_7_5 = copy(%cl_7_7)		--org.jruby.ir.instructions.CopyInstr(	%cl_7_7[4.1 ] ) 
PRINT info for BB 5:
	Vars Live on Entry:  2 10		
	Vars Live on Exit:  2 7 10		
	outgoing edges:6, 7, 
	Instructions:
		b_false(CL7_LBL_0:23, %cl_7_5)		--org.jruby.ir.instructions.BFalseInstr(	%cl_7_5[4.2 3.3 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  12		
	Vars Live on Exit:  2 10		
	outgoing edges:8, 9, 
	Instructions:
		line_num(;n: 131)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_7_8 = call_0o(r ;n:id, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.ZeroOperandArgNoBlockCallInstr(	r[2.2 ] ) 
		%cl_7_9 = call_1o(votes, %cl_7_8 ;n:[], t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	votes[] %cl_7_8[6.1 ] ) 
		attr_assign(r, %cl_7_9 ;n:vote=, t:UN, cl:false)		--org.jruby.ir.instructions.specialized.OneArgOperandAttrAssignInstr(	r[6.1 2.2 ] %cl_7_9[6.2 ] ) #<r>#	-- [PUT:r].vote 
		jump(CL7_LBL_1:25)		--org.jruby.ir.instructions.JumpInstr(	) 
PRINT info for BB 7:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 8:
	Vars Live on Entry: 
	Vars Live on Exit:  12		
	outgoing edges:11, 
	Instructions:
		return(%cl_7_9)		--org.jruby.ir.instructions.ReturnInstr(	%cl_7_9[6.2 ] ) 
PRINT info for BB 9:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:11, 
	Instructions:
		%cl_7_10 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_7_11 = runtime_helper(%cl_7_10 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_7_10[9.0 ] ) 
		return(%cl_7_11)		--org.jruby.ir.instructions.ReturnInstr(	%cl_7_11[9.1 ] ) 
PRINT info for BB 11:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_105)		--org.jruby.ir.instructions.ReturnInstr(	%v_105[44.10 ] ) 
PRINT info for BB 45:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 78 100		
	outgoing edges:47, 
	Instructions:
		return(nil)		--org.jruby.ir.instructions.ReturnInstr(	) 
PRINT info for BB 47:
	Vars Live on Entry:  4 12 21 29 44 67 78 100		
	Vars Live on Exit:  4 12 21 29 44 67 78 100		
	outgoing edges:
	Instructions:

