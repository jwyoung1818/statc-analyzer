SET IRMethod, name = index
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%v_0 = load_implicit_closure()		--org.jruby.ir.instructions.LoadImplicitClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		check_arity(;req: 0, opt: 0, *r: false, kw: false)		--org.jruby.ir.instructions.CheckArityInstr(	) 
		line_num(;n: 2)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_3 = copy("/tags")		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_3 ;name: @cur_url)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 ] %v_3[2.6 ] ) #<%self>#	-- [PUT:%self].cur_url 
		line_num(;n: 3)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_4 = copy("Tags")		--org.jruby.ir.instructions.CopyInstr(	) 
		put_field(%self, %v_4 ;name: @title)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 ] %v_4[2.9 ] ) #<%self>#	-- [PUT:%self].title 
		line_num(;n: 5)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_5 = search_const(scope<1> ;name: Tag, no_priv: false)		--org.jruby.ir.instructions.SearchConstInstr(	) 
		%v_6 = call_1o(%v_5, nil ;n:all_with_story_counts_for, t:NO, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%v_5[2.12 ] ) 
		put_field(%self, %v_6 ;name: @tags)		--org.jruby.ir.instructions.PutFieldInstr(	%self[2.0 2.7 2.10 ] %v_6[2.13 ] ) #<%self>#	-- [PUT:%self].tags 
		line_num(;n: 7)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%v_7 = call(%self, %self:CLOSURE index_CLOSURE_1[./lobsters/merged_controllers/tags_controller.rb:7] ;n:respond_to, t:FU, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	%self[2.0 2.7 2.10 2.14 ] %self[2.0 2.7 2.10 2.14 ] ) 
CLOSURE BEGIN: format[] %self[2.0,2.7,2.10,2.14,] 
PRINT info for BB 1:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0 2		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_1_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		format = recv_pre_reqd_arg()		--org.jruby.ir.instructions.ReceivePreReqdArgInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry:  2		
	Vars Live on Exit:  0 2		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 8)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_3 = call(format, %self:CLOSURE index_CLOSURE_1_CLOSURE_2[./lobsters/merged_controllers/tags_controller.rb:8] ;n:html, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	format[2.2 ] %self[2.0 ] ) 
CLOSURE BEGIN: %self[2.0,] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_2_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 8)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_2_3 = copy("index")		--org.jruby.ir.instructions.CopyInstr(	) 
		%cl_2_4 = copy({:'action'=>%cl_2_3})		--org.jruby.ir.instructions.CopyInstr(	%cl_2_3[3.1 ] ) 
		%cl_2_5 = call_1o(%self, %cl_2_4 ;n:render, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_2_4[3.2 ] ) 
		return(%cl_2_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_2_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_2_7 = runtime_helper(%cl_2_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_2_6[4.0 ] ) 
		return(%cl_2_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_2_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		line_num(;n: 9)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_1_4 = call(format, %self:CLOSURE index_CLOSURE_1_CLOSURE_3[./lobsters/merged_controllers/tags_controller.rb:9] ;n:json, t:NO, cl:true(org.jruby.ir.operands.WrappedIRClosure))		--org.jruby.ir.instructions.CallInstr(	format[3.1 2.2 ] %self[2.0 ] ) 
CLOSURE BEGIN: %self[2.0,] 
PRINT info for BB 1:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 2, 
	Instructions:
PRINT info for BB 2:
	Vars Live on Entry:  0		
	Vars Live on Exit: 
	outgoing edges:3, 
	Instructions:
		%self = recv_self()		--org.jruby.ir.instructions.ReceiveSelfInstr(	) 
		%cl_3_0 = load_frame_closure()		--org.jruby.ir.instructions.LoadFrameClosureInstr(	) 
		%current_scope = copy(scope<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
		%current_module = copy(module<0>)		--org.jruby.ir.instructions.CopyInstr(	) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit:  0		
	outgoing edges:4, 6, 
	Instructions:
		line_num(;n: 9)		--org.jruby.ir.instructions.LineNumberInstr(	) 
		%cl_3_3 = get_field(%self ;name: @tags)		--org.jruby.ir.instructions.GetFieldInstr(	%self[2.0 ] %self[2.0 ] ) #<%self>#	-- [GET:%self].tags 
		%cl_3_4 = copy({:'json'=>%cl_3_3})		--org.jruby.ir.instructions.CopyInstr(	%cl_3_3[3.1 ] ) 
		%cl_3_5 = call_1o(%self, %cl_3_4 ;n:render, t:FU, cl:false)		--org.jruby.ir.instructions.specialized.OneOperandArgNoBlockCallInstr(	%self[2.0 ] %cl_3_4[3.2 ] ) 
		return(%cl_3_5)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_5[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:6, 
	Instructions:
		%cl_3_6 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_3_7 = runtime_helper(%cl_3_6 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_3_6[4.0 ] ) 
		return(%cl_3_7)		--org.jruby.ir.instructions.ReturnInstr(	%cl_3_7[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:
CLOSURE END
		return(%cl_1_4)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_4[3.3 ] ) 
PRINT info for BB 4:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:6, 
	Instructions:
		%cl_1_5 = recv_jruby_exc()		--org.jruby.ir.instructions.ReceiveJRubyExceptionInstr(	) 
		%cl_1_6 = runtime_helper(%cl_1_5 ;method: HANDLE_BREAK_AND_RETURNS_IN_LAMBDA)		--org.jruby.ir.instructions.RuntimeHelperCall(	%cl_1_5[4.0 ] ) 
		return(%cl_1_6)		--org.jruby.ir.instructions.ReturnInstr(	%cl_1_6[4.1 ] ) 
PRINT info for BB 6:
	Vars Live on Entry:  2		
	Vars Live on Exit:  2		
	outgoing edges:
	Instructions:
CLOSURE END
		return(%v_7)		--org.jruby.ir.instructions.ReturnInstr(	%v_7[2.16 ] ) 
PRINT info for BB 3:
	Vars Live on Entry: 
	Vars Live on Exit: 
	outgoing edges:
	Instructions:

