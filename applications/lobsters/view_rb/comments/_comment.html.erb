 comment.short_id 
 comment.short_id if comment.persisted? 
 comment.current_vote ? (comment.current_vote[:vote] == 1 ?
"upvoted" : "downvoted") : "" 
 comment.highlighted ? "highlighted" : "" 
 comment.score <= 0 ? "negative" : "" 
 comment.score <= -1 ? "negative_1" : "" 
 comment.score <= -3 ? "negative_3" : "" 
 comment.score <= -5 ? "negative_5" : "" 
 if !comment.is_gone? 
 if @user 
 else 
 link_to "", login_path, :class => "upvoter" 
 end 
 comment.score 
 if @user && @user.can_downvote?(comment) 
 else 
 end 
 end 
 comment.short_id 
 if @user 
 end 
 if @user && @user.show_avatars? 
 comment.user.username 
 comment.user.avatar_url(16) 
 end 
 if defined?(was_merged) && was_merged 
 end 
 comment.user.username 
 if !comment.user.is_active? 
 elsif comment.user.is_new? 
 end 
 comment.user.username 
 if comment.hat 
 comment.hat.to_html_label 
 end 
 if comment.previewing 
 else 
 if comment.has_been_edited? 
 elsif comment.is_from_email? 
 end 
 time_ago_in_words_label((comment.has_been_edited? ?
          comment.updated_at : comment.created_at), :strip_about => true) 
 end 
 if !comment.previewing 
 comment.url 
 if comment.is_editable_by_user?(@user) 
 end 
 if comment.is_gone? && comment.is_undeletable_by_user?(@user) 
 elsif !comment.is_gone? && comment.is_deletable_by_user?(@user) 
 end 
 if @user && !comment.story.is_gone? && !comment.is_gone? 
 end 
 if comment.downvotes > 0 &&
          ((comment.score <= 0 && comment.user_id == @user.try(:id)) ||
          @user.try("is_moderator?")) 
 comment.vote_summary.downcase 
 elsif comment.current_vote && comment.current_vote[:vote] == -1 
 Vote::COMMENT_REASONS[comment.current_vote[:reason]].downcase 
 end 
 end 
 if defined?(show_story) && show_story 
 comment.story.comments_path 
 comment.story.title
          
 end 
 if comment.is_gone? 
 comment.gone_text 
 else 
 raw comment.markeddown_comment 
 end 
