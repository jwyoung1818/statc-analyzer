 story.short_id 
 story.short_id 
 story.vote && story.vote[:vote] == 1 ? "upvoted" : "" 
 story.vote && story.vote[:vote] == -1 ? "downvoted" : "" 
 story.score <= -1 ? "negative_1" : "" 
 story.score <= -3 ? "negative_3" : "" 
 story.score <= -5 ? "negative_5" : "" 
 story.is_hidden_by_cur_user ? "hidden" : "" 
 story.is_expired? ? "expired" : "" 
 if @user 
 else 
 link_to "", login_path, :class => "upvoter" 
 end 
 story.score 
 if story.can_be_seen_by_user?(@user) 
 story.url_or_comments_path 

          break_long_words(story.title) 
 end 
 if story.is_gone? 
 story.is_moderated? ? "moderator" :
          "original submitter" 
 end 
 if story.can_be_seen_by_user?(@user) 
 story.sorted_taggings.each do |tagging| 
 tag_path(tagging.tag.tag) 
 tagging.tag.css_class 
 tagging.tag.description 
 tagging.tag.tag 
 end 
 if story.domain.present? 
 story.domain_search_url 

          break_long_words(story.domain) 
 end 
 if defined?(single_story) && single_story 
 story.merged_stories.each do |ms| 
 ms.url_or_comments_path 

              break_long_words(ms.title) 
 ms.sorted_taggings.each do |tagging| 
 tag_path(tagging.tag.tag) 
 tagging.tag.css_class 
 tagging.tag.description 
 tagging.tag.tag 
 end 
 if ms.domain.present? 
 ms.domain_search_url 

              break_long_words(ms.domain) 
 end 
 if @user && @user.show_avatars? 
 ms.user.username 
 ms.user.avatar_url(16) 
 end 
 if story.user_is_author? 
 end 
 ms.user.username 

              ms.html_class_for_user(@user) 
 ms.user.username 
 time_ago_in_words_label(ms.created_at, :strip_about => true) 
 end 
 end 
 end 
 if !(defined?(single_story) && single_story) && @user &&
    @user.show_story_previews? 
 if (sc = story.description_or_story_cache(500)).present? 
 break_long_words(sc) 
 end 
 end 
 if @user && @user.show_avatars? 
 story.user.username 
 story.user.avatar_url(16) 
 end 
 if story.user_is_author? 
 end 
 if story.previewing 
 story.html_class_for_user(@user) 

          story.user.username 
 else 
 story.user.username 

          story.html_class_for_user(@user) 
 story.user.username 
 time_ago_in_words_label(story.created_at, :strip_about => true) 
 if story.is_editable_by_user?(@user) 
 edit_story_path(story.short_id) 
 if story.is_gone? && story.is_undeletable_by_user?(@user) 
 link_to "undelete", story_undelete_path(story.short_id),
              :method => :post, :data => {
              :confirm => "Are you sure you want to undelete this story?" } 
 elsif !story.is_gone? 
 if story.user_id != @user.try(:id) &&
            @user.try(:is_moderator?) 
 link_to "delete", story_path(story.short_id),
                :method => :delete, :class => "mod_story_link" 
 else 
 link_to "delete", story_path(story.short_id),
                :method => :delete, :data => {
                :confirm => "Are you sure you want to delete this story?" } 
 end 
 end 
 end 
 if !story.is_gone? && @user 
 if @user && story.vote && story.vote[:vote] == -1 

              Vote::STORY_REASONS[story.vote[:reason]].to_s.downcase 
 elsif @user && @user.can_downvote?(story) 
 end 
 if story.is_hidden_by_cur_user 
 link_to "unhide", story_unhide_path(story.short_id),
              :class => "hider" 
 else 
 link_to "hide", story_hide_path(story.short_id),
              :class => "hider" 
 end 
 if defined?(single_story) && single_story && story.hider_count > 0 
 pluralize(story.hider_count, "user") 
 end 
 end 
 if !story.is_gone? && (@user || story.comments_count > 0) 
 story.comments_path 
 story.comments_count == 0 ?
              "discuss" : "#{story.comments_count} comment" <<
              (story.comments_count == 1 ? "" : "s") 
 end 
 if defined?(single_story) && single_story &&
        ((story.downvotes > 0 && @user && @user.is_moderator?) ||
        (story.downvotes >= 3)) 
 story.vote_summary_for(@user).downcase 
 end 
 end 
 story.comments_count == 0 ? "zero" : "" 
 story.comments_path 
 story.comments_count 
