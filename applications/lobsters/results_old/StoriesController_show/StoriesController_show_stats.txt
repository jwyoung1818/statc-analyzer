User.where <User,SELECT>
User.where(:session_token => session[:u].to_s).first <,SELECT>
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.id (integer)
+FIELD+ User.username (string)
Keystore.transaction <Keystore,TXN>
self.lock <Keystore,TRANSACTION> (c)
self.lock(true).where <Keystore,SELECT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Keystore.key (string)
self.where <Keystore,SELECT> (c)
+FIELD+ Keystore.value (integer)
traffic_kv.save! <Keystore,INSERT> (c)
date_kv.save! <Keystore,INSERT> (c)
+FIELD+ User.is_moderator (boolean)
Story.where <Story,SELECT>
Story.where(:short_id => params[:story_id] || params[:id]).first <,SELECT>
+FIELD+ User.id (integer)
Story.where <Story,SELECT>
Story.where(:short_id => params[:story_id] || params[:id]).first <,SELECT>
Story.where <Story,SELECT>
Story.where(:short_id => params[:id]).first! <,SELECT>
+FIELD+ Story.title (string)
+FIELD+ Story.short_id (string)
+FIELD+ Story.title (string)
+FIELD+ Story.is_expired (integer)
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.id (integer)
+FIELD+ Story.user_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Story.short_id (string)
Story.select <Story,SELECT>
+FIELD+ Story.id (integer)
Story.select(:id).where <,SELECT>
+FIELD+ Story.id (integer)
Comment.where <Comment,SELECT>
@story.merged_comments.includes <,SELECT>
self.order <Comment,SELECT>
+FIELD+ Comment.id (integer)
+FIELD+ Comment.is_deleted (boolean)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ User.is_moderator (boolean)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.id (integer)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ Comment.short_id (string)
+FIELD+ User.id (integer)
+FIELD+ User.id (integer)
Vote.where <Vote,SELECT> (c)
Vote.where(:user_id => @user.id, :story_id => @story.id,      :comment_id => nil).first <,SELECT> (c)
+FIELD+ User.id (integer)
+FIELD+ Story.id (integer)
HiddenStory.where <HiddenStory,SELECT> (c)
HiddenStory.where(:user_id => user.id, :story_id => self.id).first <,SELECT> (c)
+FIELD+ User.id (integer)
+FIELD+ User.id (integer)
Vote.where(      :user_id => user_id, :story_id => story_id    ).where <,SELECT> (c)
Vote.where(      :user_id => user_id, :story_id => story_id    ).where <,SELECT> (c)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.reason (string)
+FIELD+ Comment.id (integer)
+FIELD+ Comment.id (integer)
+FIELD+ Story.markeddown_description (text)
+FIELD+ Story.markeddown_description (text)
+FIELD+ Story.unavailable_at (datetime)
+FIELD+ Story.story_cache (text)
+FIELD+ Story.unavailable_at (datetime)
+FIELD+ Story.story_cache (text)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.id (integer)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.id (integer)
+FIELD+ Comment.id (integer)
k.values.first <,SELECT> (c)
k.keys.first <,SELECT> (c)
k.values.first <,SELECT> (c)
k.keys.first <,SELECT> (c)
k.values.first <,SELECT> (c)

query in total: 31
query in view: 0
query in closure: 17
read queries: 26
write queries: 3
