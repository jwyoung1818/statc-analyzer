User.where <User,SELECT>
User.where(:session_token => session[:u].to_s).first <,SELECT>
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.id (integer)
+FIELD+ User.username (string)
Keystore.transaction <Keystore,TXN>
self.lock <Keystore,TRANSACTION> (c)
self.lock(true).where <Keystore,SELECT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Keystore.key (string)
self.where <Keystore,SELECT> (c)
+FIELD+ Keystore.value (integer)
traffic_kv.save! <Keystore,INSERT> (c)
date_kv.save! <Keystore,INSERT> (c)
+FIELD+ User.is_moderator (boolean)
Story.where <Story,SELECT>
Story.where(:short_id => params[:story_id] || params[:id]).first <,SELECT>
+FIELD+ User.id (integer)
Story.where <Story,SELECT>
Story.where(:short_id => params[:story_id] || params[:id]).first <,SELECT>
Story.where <Story,SELECT>
Story.where(:short_id => params[:story_id]).first <,SELECT>
+FIELD+ User.id (integer)
+FIELD+ Story.id (integer)
Vote.where <Vote,SELECT>
Vote.where(:user_id => @user.id,        :story_id => story.id, :comment_id => nil).first <,SELECT>
+FIELD+ Story.id (integer)
+FIELD+ Story.id (integer)
Vote.where <Vote,SELECT>
Vote.where(:user_id => user_id, :story_id => story_id,      :comment_id => comment_id).first_or_initialize <,SELECT>
+FIELD+ Vote.vote (integer)
Vote.transaction <Vote,TXN>
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.vote (integer)
v.new_record? <Vote,INSERT> (c)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.vote (integer)
v.save! <Vote,INSERT> (c)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.comment_id (integer)
Comment.find <Comment,SELECT> (c)
User.update_counters <User,UPDATE> (c)
+FIELD+ Comment.upvotes (integer)
+FIELD+ Comment.downvotes (integer)
+FIELD+ Comment.upvotes (integer)
+FIELD+ Comment.id (integer)
Comment.connection.execute <,UPDATE> (c)
+FIELD+ Comment.story_id (integer)
self.tags.select <Tag,SELECT> (c)
+FIELD+ Story.user_id (integer)
self.comments.where <Comment,SELECT> (c)
self.comments.where("user_id <> ?", self.user_id).select <Story,SELECT> (c)
+FIELD+ Story.upvotes (integer)
+FIELD+ Story.downvotes (integer)
+FIELD+ Story.created_at (datetime)
+FIELD+ Vote.story_id (integer)
Story.find <Story,SELECT> (c)
User.update_counters <User,UPDATE> (c)
+FIELD+ Story.id (integer)
Story.connection.execute <,UPDATE> (c)

query in total: 31
query in view: 0
query in closure: 17
read queries: 19
write queries: 9
