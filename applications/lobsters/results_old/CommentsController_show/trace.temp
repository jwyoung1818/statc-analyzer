dir = ../applications/lobsters/
level 0: CommentsController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
				level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
				level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4:  +FIELD+ User . deleted_at?	(type: datetime) 
				level 4: User . is_banned? (params: ) # (returnv: )
					level 5:  +FIELD+ User . banned_at?	(type: datetime) 
					level 3:  +FIELD+ User . id	(type: integer) 
					level 3:  +FIELD+ User . username	(type: string) 
				level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
			level 2:  [QUERY] Keystore . transaction	{params: } # {returnv: } # {op: Keystore.TXN}
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
				level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: Keystore.TRANSACTION}
				level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
=====transaction begin=====
				level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
				level 4: Keystore . before_save (params: ) # (returnv: )
				level 4: Keystore . before_validation (params: ) # (returnv: )
					level 5:  +FIELD+ Keystore . key	(type: string) 
					level 5:  [QUERY] self . where	{params: } # {returnv: } # {op: Keystore.SELECT}
				level 4: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
					level 2:  +FIELD+ Keystore . value	(type: integer) 
=====transaction begin=====
					level 2:  [QUERY] traffic_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
=====transaction begin=====
					level 2:  [QUERY] date_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
	level 1: ApplicationController . find_user_from_rss_token (params: ) # (returnv: )
		level 2:  [QUERY] User . where	{params: params[:token], } # {returnv: } # {op: User.SELECT}
		level 2:  [QUERY] User.where(:rss_token => params[:token].to_s) . first	{params: } # {returnv: @user} # {op: .SELECT}
	level 1: ApplicationController . require_logged_in_user_or_400 (params: ) # (returnv: )
	level 0: CommentsController . show (params: ) # (returnv: )
	level 1: CommentsController . find_comment (params: ) # (returnv: comment)
			level 2:  [QUERY] Comment . where	{params: params[:id], } # {returnv: } # {op: Comment.SELECT}
			level 2:  [QUERY] Comment.where(:short_id => params[:id]) . first	{params: } # {returnv: comment} # {op: .SELECT}
			level 2:  +FIELD+ User . id	(type: integer) 
			level 2:  +FIELD+ Comment . story_id	(type: integer) 
			level 2:  +FIELD+ Comment . id	(type: integer) 
			level 2:  [QUERY] Vote . where	{params: @user, comment, comment, } # {returnv: } # {op: Vote.SELECT}
			level 2:  [QUERY] Vote.where(:user_id => @user.id,        :story_id => comment.story_id, :comment_id => comment.id) . first	{params: } # {returnv: comment.current_vote} # {op: .SELECT}
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . is_editable_by_user? (params: @user, ) # (returnv: true)
		level 2:  +FIELD+ User . id	(type: integer) 
		level 2:  +FIELD+ Comment . user_id	(type: integer) 
		level 2:  +FIELD+ Comment . is_moderated?	(type: boolean) 
		level 2:  +FIELD+ Comment . updated_at	(type: datetime) 
		level 2:  +FIELD+ Comment . updated_at	(type: datetime) 
		level 2:  +FIELD+ Comment . created_at	(type: datetime) 
		level 1:  +FIELD+ Comment . short_id	(type: string) 
		level 1:  +FIELD+ Comment . short_id	(type: string) 
	level 1: Comment . score (params: ) # (returnv: )
		level 2:  +FIELD+ Comment . upvotes	(type: integer) 
		level 2:  +FIELD+ Comment . downvotes	(type: integer) 
	level 1: Comment . is_gone? (params: ) # (returnv: true)
		level 2:  +FIELD+ Comment . is_deleted?	(type: boolean) 
		level 2:  +FIELD+ Comment . is_moderated?	(type: boolean) 
	level 1: User . can_downvote? (params: comment, ) # (returnv: true)
		level 2: User . is_new? (params: ) # (returnv: true)
			level 3:  +FIELD+ User . created_at	(type: datetime) 
			level 2:  [QUERY] obj.current_vote . try	{params: } # {returnv: true} # {op: .SELECT}
			level 1:  +FIELD+ Comment . short_id	(type: string) 
			level 1:  +FIELD+ User . show_avatars?	(type: boolean) 
			level 1:  +FIELD+ Comment . user	(type: integer) 
			level 1:  +FIELD+ User . username	(type: string) 
			level 1:  +FIELD+ Comment . user	(type: integer) 
		level 1:  +FIELD+ Comment . user	(type: integer) 
		level 1:  +FIELD+ User . username	(type: string) 
		level 1:  +FIELD+ Comment . user	(type: integer) 
		level 1:  +FIELD+ Comment . user	(type: integer) 
		level 1:  +FIELD+ Comment . user	(type: integer) 
		level 1:  +FIELD+ User . username	(type: string) 
		level 1:  +FIELD+ Comment . hat	(type: integer) 
		level 1:  +FIELD+ Comment . hat	(type: integer) 
	level 1: Hat . before_filter (params: ) # (returnv: )
	level 1: Hat . to_html_label (params: ) # (returnv: )
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . granted_by_user	(type: integer) 
		level 2:  +FIELD+ Hat . created_at	(type: datetime) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . hat	(type: string) 
	level 1: Comment . has_been_edited? (params: ) # (returnv: true)
		level 2:  +FIELD+ Comment . updated_at	(type: datetime) 
		level 2:  +FIELD+ Comment . updated_at	(type: datetime) 
		level 2:  +FIELD+ Comment . created_at	(type: datetime) 
		level 1:  +FIELD+ Comment . is_from_email?	(type: boolean) 
		level 1:  +FIELD+ Comment . updated_at	(type: datetime) 
		level 1:  +FIELD+ Comment . created_at	(type: datetime) 
	level 1: Comment . url (params: ) # (returnv: )
		level 2:  +FIELD+ Comment . story	(type: integer) 
		level 2: Story . before_filter (params: ) # (returnv: )
		level 2: Story . comments_url (params: ) # (returnv: )
			level 3: Story . short_id_url (params: ) # (returnv: )
				level 4:  +FIELD+ Story . short_id	(type: string) 
			level 3: Story . title_as_url (params: ) # (returnv: )
				level 4:  +FIELD+ Story . title	(type: string) 
				level 2:  +FIELD+ Comment . short_id	(type: string) 
				level 2:  +FIELD+ Comment . short_id	(type: string) 
	level 1: Comment . is_undeletable_by_user? (params: @user, ) # (returnv: true)
		level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 2:  +FIELD+ User . id	(type: integer) 
		level 2:  +FIELD+ Comment . user_id	(type: integer) 
		level 2:  +FIELD+ Comment . is_moderated?	(type: boolean) 
	level 1: Comment . is_deletable_by_user? (params: @user, ) # (returnv: true)
		level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 2:  +FIELD+ User . id	(type: integer) 
		level 2:  +FIELD+ Comment . user_id	(type: integer) 
		level 1:  +FIELD+ Comment . story	(type: integer) 
		level 1:  +FIELD+ Comment . downvotes	(type: integer) 
		level 1:  +FIELD+ Comment . user_id	(type: integer) 
		level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
		level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1: Comment . vote_summary (params: ) # (returnv: )
		level 2:  +FIELD+ Comment . id	(type: integer) 
		level 2:  [QUERY] Vote . where	{params: self, } # {returnv: } # {op: Vote.SELECT}
		level 2:  [QUERY] r_counts.keys.sort.map{|k|      k == "" ? "+#{r_counts[k]}" : "#{r_counts[k]} #{Vote::COMMENT_REASONS[k]}"    } . join	{params: } # {returnv: } # {op: .JOIN}
		level 1:  +FIELD+ Comment . story	(type: integer) 
	level 1: Story . comments_path (params: ) # (returnv: )
		level 2: Story . short_id_path (params: ) # (returnv: )
			level 3:  +FIELD+ Story . short_id	(type: string) 
			level 1:  +FIELD+ Comment . story	(type: integer) 
			level 1:  +FIELD+ Story . title	(type: string) 
	level 1: Comment . gone_text (params: ) # (returnv: )
		level 2:  +FIELD+ Comment . is_moderated?	(type: boolean) 
			level 2:  [QUERY] self.moderation.try(:moderator) . try	{params: } # {returnv: } # {op: .SELECT}
			level 2:  [QUERY] self.moderation.try(:moderator) . try	{params: } # {returnv: } # {op: .SELECT}
			level 2:  [QUERY] self.moderation.try(:moderator) . try	{params: } # {returnv: } # {op: .SELECT}
			level 1:  +FIELD+ Comment . markeddown_comment	(type: text) 
