User.where <User,SELECT>
User.where(:session_token => session[:u].to_s).first <,SELECT>
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.id (integer)
+FIELD+ User.username (string)
Keystore.transaction <Keystore,TXN>
self.lock <Keystore,TRANSACTION> (c)
self.lock(true).where <Keystore,SELECT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Keystore.key (string)
self.where <Keystore,SELECT> (c)
+FIELD+ Keystore.value (integer)
traffic_kv.save! <Keystore,INSERT> (c)
date_kv.save! <Keystore,INSERT> (c)
User.where <User,SELECT>
User.where(:rss_token => params[:token].to_s).first <,SELECT>
Comment.where <Comment,SELECT>
Comment.where(:short_id => params[:id]).first <,SELECT>
+FIELD+ User.id (integer)
+FIELD+ Comment.story_id (integer)
+FIELD+ Comment.id (integer)
Vote.where <Vote,SELECT>
Vote.where(:user_id => @user.id,        :story_id => comment.story_id, :comment_id => comment.id).first <,SELECT>
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ Comment.updated_at (datetime)
+FIELD+ Comment.updated_at (datetime)
+FIELD+ Comment.created_at (datetime)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.upvotes (integer)
+FIELD+ Comment.downvotes (integer)
+FIELD+ Comment.is_deleted (boolean)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ User.created_at (datetime)
obj.current_vote.try <,SELECT> (v)
+FIELD+ Comment.short_id (string)
+FIELD+ User.show_avatars (boolean)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.hat_id (integer)
+FIELD+ Comment.hat_id (integer)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.granted_by_user_id (integer)
+FIELD+ Hat.created_at (datetime)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.hat (string)
+FIELD+ Comment.updated_at (datetime)
+FIELD+ Comment.updated_at (datetime)
+FIELD+ Comment.created_at (datetime)
+FIELD+ Comment.is_from_email (boolean)
+FIELD+ Comment.updated_at (datetime)
+FIELD+ Comment.created_at (datetime)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.short_id (string)
+FIELD+ Story.title (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.story_id (integer)
+FIELD+ Comment.downvotes (integer)
+FIELD+ Comment.user_id (integer)
@user.try <User,SELECT> (v)
@user.try <User,SELECT> (v)
+FIELD+ Comment.id (integer)
Vote.where <Vote,SELECT> (v)
r_counts.keys.sort.map{|k|      k == "" ? "+#{r_counts[k]}" : "#{r_counts[k]} #{VoteCOMMENT_REASONS[k]}"    }.join <,JOIN> (v)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.short_id (string)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Comment.is_moderated (boolean)
self.moderation.try(:moderator).try <Comment,SELECT> (v)
self.moderation.try(:moderator).try <Comment,SELECT> (v)
self.moderation.try(:moderator).try <Comment,SELECT> (v)
+FIELD+ Comment.markeddown_comment (text)

query in total: 23
query in view: 8
query in closure: 14
read queries: 18
write queries: 3
