dir = ../applications/lobsters/
level 0: UsersController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
				level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
				level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4:  +FIELD+ User . deleted_at?	(type: datetime) 
				level 4: User . is_banned? (params: ) # (returnv: )
					level 5:  +FIELD+ User . banned_at?	(type: datetime) 
					level 3:  +FIELD+ User . id	(type: integer) 
					level 3:  +FIELD+ User . username	(type: string) 
				level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
			level 2:  [QUERY] Keystore . transaction	{params: } # {returnv: } # {op: Keystore.TXN}
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
				level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: Keystore.TRANSACTION}
				level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
=====transaction begin=====
				level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
				level 4: Keystore . before_save (params: ) # (returnv: )
				level 4: Keystore . before_validation (params: ) # (returnv: )
					level 5:  +FIELD+ Keystore . key	(type: string) 
					level 5:  [QUERY] self . where	{params: } # {returnv: } # {op: Keystore.SELECT}
				level 4: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
					level 2:  +FIELD+ Keystore . value	(type: integer) 
=====transaction begin=====
					level 2:  [QUERY] traffic_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
=====transaction begin=====
					level 2:  [QUERY] date_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
	level 1: ApplicationController . require_logged_in_moderator (params: ) # (returnv: )
		level 2: ApplicationController . require_logged_in_user (params: ) # (returnv: )
			level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 0: UsersController . show (params: ) # (returnv: )
		level 1:  [QUERY] User . where	{params: params[:username], } # {returnv: } # {op: User.SELECT}
		level 1:  [QUERY] User.where(:username => params[:username]) . first!	{params: } # {returnv: @showing_user} # {op: .SELECT}
		level 1:  +FIELD+ User . username	(type: string) 
	level 1: User . is_new? (params: ) # (returnv: true)
		level 2:  +FIELD+ User . created_at	(type: datetime) 
		level 1:  +FIELD+ User . username	(type: string) 
		level 1:  +FIELD+ User . username	(type: string) 
	level 1: User . avatar_url (params: ) # (returnv: )
		level 2:  +FIELD+ User . email	(type: string) 
		level 1:  +FIELD+ User . is_admin?	(type: boolean) 
		level 1:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 1:  +FIELD+ User . created_at	(type: datetime) 
		level 1:  +FIELD+ User . invited_by_user	(type: integer) 
		level 1:  +FIELD+ User . invited_by_user	(type: integer) 
		level 1:  [QUERY] @showing_user.invited_by_user . try	{params: } # {returnv: } # {op: .SELECT}
		level 1:  +FIELD+ User . invited_by_user	(type: integer) 
		level 1:  +FIELD+ User . banned_at	(type: datetime) 
		level 1:  +FIELD+ User . banned_by_user	(type: integer) 
		level 1:  +FIELD+ User . banned_by_user	(type: integer) 
		level 1:  [QUERY] @showing_user.invited_by_user . try	{params: } # {returnv: } # {op: .SELECT}
		level 1:  +FIELD+ User . banned_by_user	(type: integer) 
		level 1:  +FIELD+ User . banned_reason	(type: string) 
	level 1: Hat . before_filter (params: ) # (returnv: )
	level 1: Hat . to_html_label (params: ) # (returnv: )
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . granted_by_user	(type: integer) 
		level 2:  +FIELD+ Hat . created_at	(type: datetime) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . link	(type: string) 
		level 2:  +FIELD+ Hat . hat	(type: string) 
		level 1:  +FIELD+ User . deleted_at?	(type: datetime) 
		level 1:  +FIELD+ User . deleted_at	(type: datetime) 
		level 1:  +FIELD+ User . is_admin?	(type: boolean) 
		level 1:  +FIELD+ User . karma	(type: integer) 
	level 1: User . average_karma (params: ) # (returnv: )
		level 2:  +FIELD+ User . karma	(type: integer) 
		level 2: User . stories_submitted_count (params: ) # (returnv: )
			level 3:  +FIELD+ User . id	(type: integer) 
			level 3: Keystore . value_for (params: self, ) # (returnv: )
				level 4:  [QUERY] self . where	{params: key, } # {returnv: } # {op: Keystore.SELECT}
				level 4:  [QUERY] self.where(:key => key) . first	{params: } # {returnv: } # {op: .SELECT}
		level 2: User . comments_posted_count (params: ) # (returnv: )
			level 3:  +FIELD+ User . id	(type: integer) 
	level 1: User . most_common_story_tag (params: ) # (returnv: tag)
		level 2: Tag . before_filter (params: ) # (returnv: )
		level 2: Tag . active (params: ) # (returnv: )
			level 3:  [QUERY] self . where	{params: } # {returnv: } # {op: Tag.SELECT}
			level 2:  +FIELD+ User . id	(type: integer) 
			level 2:  [QUERY] Tag.active.joins(      :stories    ) . where	{params: self, } # {returnv: } # {op: .SELECT}
			level 1:  +FIELD+ User . username	(type: string) 
			level 1:  +FIELD+ Tag . tag	(type: string) 
	level 1: Tag . css_class (params: ) # (returnv: )
		level 2:  +FIELD+ Tag . tag	(type: string) 
		level 2:  +FIELD+ Tag . is_media?	(type: boolean) 
		level 1:  +FIELD+ Tag . description	(type: string) 
		level 1:  +FIELD+ Tag . tag	(type: string) 
		level 1:  +FIELD+ User . username	(type: string) 
		level 1:  +FIELD+ User . about	(type: text) 
	level 1: User . linkified_about (params: ) # (returnv: )
		level 2:  +FIELD+ User . about	(type: text) 
		level 1:  +FIELD+ User . is_admin?	(type: boolean) 
		level 1:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 1:  +FIELD+ User . email	(type: string) 
	level 1: User . votes_for_others (params: ) # (returnv: )
			level 2:  [QUERY] self.votes.joins(:story, :comment) . where	{params: } # {returnv: } # {op: .SELECT}
			level 1:  +FIELD+ Vote . vote	(type: integer) 
			level 1:  +FIELD+ Vote . vote	(type: integer) 
			level 1:  +FIELD+ Vote . comment_id	(type: integer) 
			level 1:  +FIELD+ Vote . reason	(type: string) 
			level 1:  +FIELD+ Vote . reason	(type: string) 
			level 1:  +FIELD+ Vote . comment_id	(type: integer) 
			level 1:  +FIELD+ Vote . comment	(type: integer) 
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . short_id_url (params: ) # (returnv: )
		level 2:  +FIELD+ Comment . story	(type: integer) 
		level 2: Story . before_filter (params: ) # (returnv: )
		level 2: Story . short_id_url (params: ) # (returnv: )
			level 3:  +FIELD+ Story . short_id	(type: string) 
			level 2:  +FIELD+ Comment . short_id	(type: string) 
			level 2:  +FIELD+ Comment . short_id	(type: string) 
			level 1:  +FIELD+ Vote . comment	(type: integer) 
			level 1:  +FIELD+ Comment . user	(type: integer) 
			level 1:  [QUERY] v.comment.user . try	{params: } # {returnv: } # {op: User.SELECT}
			level 1:  +FIELD+ Vote . comment	(type: integer) 
			level 1:  +FIELD+ Comment . user	(type: integer) 
			level 1:  [QUERY] v.comment.user . try	{params: } # {returnv: } # {op: User.SELECT}
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Story . title	(type: string) 
			level 1:  +FIELD+ Vote . story_id	(type: integer) 
			level 1:  +FIELD+ Vote . comment_id	(type: integer) 
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Story . title	(type: string) 
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Story . user	(type: integer) 
			level 1:  [QUERY] v.story.user . try	{params: } # {returnv: } # {op: User.SELECT}
			level 1:  +FIELD+ Vote . story	(type: integer) 
			level 1:  +FIELD+ Story . user	(type: integer) 
			level 1:  [QUERY] v.story.user . try	{params: } # {returnv: } # {op: User.SELECT}
