User.where <User,SELECT>
User.where(:session_token => session[:u].to_s).first <,SELECT>
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.id (integer)
+FIELD+ User.username (string)
Keystore.transaction <Keystore,TXN>
self.lock <Keystore,TRANSACTION> (c)
self.lock(true).where <Keystore,SELECT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Keystore.key (string)
self.where <Keystore,SELECT> (c)
+FIELD+ Keystore.value (integer)
traffic_kv.save! <Keystore,INSERT> (c)
date_kv.save! <Keystore,INSERT> (c)
+FIELD+ User.is_moderator (boolean)
User.where <User,SELECT>
User.where(:username => params[:username]).first! <,SELECT>
+FIELD+ User.username (string)
+FIELD+ User.created_at (datetime)
+FIELD+ User.username (string)
+FIELD+ User.username (string)
+FIELD+ User.email (string)
+FIELD+ User.is_admin (boolean)
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.created_at (datetime)
+FIELD+ User.invited_by_user_id (integer)
+FIELD+ User.invited_by_user_id (integer)
@showing_user.invited_by_user.try <,SELECT> (v) (c)
+FIELD+ User.invited_by_user_id (integer)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.banned_by_user_id (integer)
+FIELD+ User.banned_by_user_id (integer)
@showing_user.invited_by_user.try <,SELECT> (v) (c)
+FIELD+ User.banned_by_user_id (integer)
+FIELD+ User.banned_reason (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.granted_by_user_id (integer)
+FIELD+ Hat.created_at (datetime)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.link (string)
+FIELD+ Hat.hat (string)
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.is_admin (boolean)
+FIELD+ User.karma (integer)
+FIELD+ User.karma (integer)
+FIELD+ User.id (integer)
self.where <Keystore,SELECT> (v) (c)
self.where(:key => key).first <Keystore,SELECT> (v) (c)
+FIELD+ User.id (integer)
self.where <Tag,SELECT> (v) (c)
+FIELD+ User.id (integer)
Tag.active.joins(      :stories    ).where <,SELECT> (v) (c)
+FIELD+ User.username (string)
+FIELD+ Tag.tag (string)
+FIELD+ Tag.tag (string)
+FIELD+ Tag.is_media (boolean)
+FIELD+ Tag.description (string)
+FIELD+ Tag.tag (string)
+FIELD+ User.username (string)
+FIELD+ User.about (text)
+FIELD+ User.about (text)
+FIELD+ User.is_admin (boolean)
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.email (string)
self.votes.joins(:story, :comment).where <User,SELECT> (v) (c)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.reason (string)
+FIELD+ Vote.reason (string)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Comment.user_id (integer)
v.comment.user.try <User,SELECT> (v) (c)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Comment.user_id (integer)
v.comment.user.try <User,SELECT> (v) (c)
+FIELD+ Vote.story_id (integer)
+FIELD+ Vote.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Vote.story_id (integer)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.story_id (integer)
+FIELD+ Vote.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Vote.story_id (integer)
+FIELD+ Story.user_id (integer)
v.story.user.try <User,SELECT> (v) (c)
+FIELD+ Vote.story_id (integer)
+FIELD+ Story.user_id (integer)
v.story.user.try <User,SELECT> (v) (c)

query in total: 22
query in view: 11
query in closure: 17
read queries: 17
write queries: 3
