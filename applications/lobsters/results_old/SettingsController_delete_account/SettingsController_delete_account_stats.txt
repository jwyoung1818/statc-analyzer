User.where <User,SELECT>
User.where(:session_token => session[:u].to_s).first <,SELECT>
+FIELD+ User.deleted_at (datetime)
+FIELD+ User.banned_at (datetime)
+FIELD+ User.id (integer)
+FIELD+ User.username (string)
Keystore.transaction <Keystore,TXN>
self.lock <Keystore,TRANSACTION> (c)
self.lock(true).where <Keystore,SELECT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Keystore.key (string)
self.where <Keystore,SELECT> (c)
+FIELD+ Keystore.value (integer)
traffic_kv.save! <Keystore,INSERT> (c)
date_kv.save! <Keystore,INSERT> (c)
@user.try <User,SELECT>
User.transaction <User,TXN>
+FIELD+ User.is_moderator (boolean)
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Comment.id (integer)
+FIELD+ User.id (integer)
m.save <Moderation,INSERT> (c)
+FIELD+ Moderation.moderator_user_id (integer)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Story.user_id (integer)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Story.short_id (string)
+FIELD+ Story.title (string)
+FIELD+ Moderation.action (text)
+FIELD+ Moderation.reason (text)
+FIELD+ Message.body (text)
+FIELD+ Moderation.reason (text)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Moderation.story_id (integer)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Moderation.comment_id (integer)
+FIELD+ Moderation.reason (text)
+FIELD+ Message.body (text)
+FIELD+ Moderation.reason (text)
+FIELD+ Message.body (text)
m.save <Message,INSERT> (c)
+FIELD+ User.id (integer)
self.where <Message,SELECT> (c)
self.received_messages.unread.count <User,SELECT> (c)
Keystore.connection.execute <,INSERT> (c)
Keystore.connection.execute <,INSERT> (c)
kv.save! <Keystore,INSERT> (c)
+FIELD+ Message.deleted_by_author (boolean)
+FIELD+ Message.deleted_by_recipient (boolean)
self.where <Message,SELECT> (c)
+FIELD+ Message.subject (string)
+FIELD+ Message.body (text)
+FIELD+ User.username (string)
+FIELD+ Message.subject (string)
+FIELD+ Message.body (text)
+FIELD+ Message.short_id (string)
+FIELD+ User.username (string)
+FIELD+ User.pushover_user_key (string)
+FIELD+ User.pushover_user_key (string)
self.save <Comment,INSERT> (c)
+FIELD+ Comment.story_id (integer)
+FIELD+ Comment.id (integer)
+FIELD+ Comment.user_id (integer)
Vote.where <Vote,SELECT> (c)
Vote.where(:user_id => user_id, :story_id => story_id,      :comment_id => comment_id).first_or_initialize <,SELECT> (c)
+FIELD+ Vote.vote (integer)
Vote.transaction <Vote,TXN> (c)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.vote (integer)
v.new_record? <Vote,INSERT> (c)
+FIELD+ Vote.vote (integer)
+FIELD+ Vote.vote (integer)
v.save! <Vote,INSERT> (c)
+FIELD+ Vote.comment_id (integer)
+FIELD+ Vote.comment_id (integer)
Comment.find <Comment,SELECT> (c)
User.update_counters <User,UPDATE> (c)
+FIELD+ Comment.upvotes (integer)
+FIELD+ Comment.downvotes (integer)
+FIELD+ Comment.upvotes (integer)
+FIELD+ Comment.id (integer)
Comment.connection.execute <,UPDATE> (c)
+FIELD+ Comment.story_id (integer)
self.tags.select <Tag,SELECT> (c)
+FIELD+ Story.user_id (integer)
self.comments.where <Comment,SELECT> (c)
self.comments.where("user_id <> ?", self.user_id).select <Story,SELECT> (c)
+FIELD+ Story.upvotes (integer)
+FIELD+ Story.downvotes (integer)
+FIELD+ Story.created_at (datetime)
+FIELD+ Vote.story_id (integer)
Story.find <Story,SELECT> (c)
User.update_counters <User,UPDATE> (c)
+FIELD+ Story.id (integer)
Story.connection.execute <,UPDATE> (c)
+FIELD+ Comment.story_id (integer)
Story.select <Story,SELECT> (c)
+FIELD+ Story.id (integer)
Story.select(:id).where <,SELECT> (c)
+FIELD+ Story.id (integer)
Comment.where <Comment,SELECT> (c)
self.order <Comment,SELECT> (c)
+FIELD+ Comment.id (integer)
+FIELD+ Comment.is_deleted (boolean)
+FIELD+ Comment.is_moderated (boolean)
+FIELD+ User.is_moderator (boolean)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.id (integer)
+FIELD+ Comment.is_moderated (boolean)
comments.count <Comment,SELECT> (c)
+FIELD+ Comment.user_id (integer)
Keystore.transaction <Keystore,TXN> (c)
Keystore.connection.execute <,INSERT> (c)
Keystore.connection.execute <,INSERT> (c)
Keystore.connection.execute <,INSERT> (c)
kv.save! <,INSERT> (c)
self.where <Keystore,SELECT> (c)
self.where(:key => key).first <Keystore,SELECT> (c)
+FIELD+ Comment.parent_comment_id (integer)
+FIELD+ Comment.parent_comment_id (integer)
self.parent_comment.try <Comment,SELECT> (c)
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.id (integer)
+FIELD+ User.email_replies (boolean)
User.where <User,SELECT> (c)
User.where(:rss_token => params[:token].to_s).first <,SELECT> (c)
Comment.where <Comment,SELECT> (c)
Comment.where(:short_id => params[:id]).first <,SELECT> (c)
+FIELD+ User.id (integer)
+FIELD+ Comment.story_id (integer)
+FIELD+ Comment.id (integer)
Vote.where <Vote,SELECT> (c)
Vote.where(:user_id => @user.id,        :story_id => comment.story_id, :comment_id => comment.id).first <,SELECT> (c)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.parent_comment_id (integer)
+FIELD+ Comment.parent_comment_id (integer)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.comment (text)
comment.new_record? <Comment,INSERT> (v) (c)
+FIELD+ Comment.parent_comment_id (integer)
+FIELD+ Comment.hat_id (integer)
+FIELD+ User.email (string)
+FIELD+ User.pushover_replies (boolean)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Comment.comment (text)
+FIELD+ Comment.story_id (integer)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.short_id (string)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
User.where <User,SELECT> (c)
User.where(:username => mention).first <,SELECT> (c)
+FIELD+ User.id (integer)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.id (integer)
+FIELD+ User.email_mentions (boolean)
+FIELD+ User.email (string)
+FIELD+ User.pushover_mentions (boolean)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.story_id (integer)
+FIELD+ Story.title (string)
+FIELD+ Comment.user_id (integer)
+FIELD+ User.username (string)
+FIELD+ Comment.story_id (integer)
m.save <,INSERT> (c)
m.save <,INSERT> (c)
+FIELD+ User.session_token (string)
self.save! <User,INSERT> (c)
+FIELD+ User.email (string)
+FIELD+ User.username (string)
+FIELD+ User.username (string)

query in total: 59
query in view: 1
query in closure: 54
read queries: 31
write queries: 23
