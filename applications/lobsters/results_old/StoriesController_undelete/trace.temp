dir = ../applications/lobsters/
level 0: StoriesController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
				level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
				level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4:  +FIELD+ User . deleted_at?	(type: datetime) 
				level 4: User . is_banned? (params: ) # (returnv: )
					level 5:  +FIELD+ User . banned_at?	(type: datetime) 
					level 3:  +FIELD+ User . id	(type: integer) 
					level 3:  +FIELD+ User . username	(type: string) 
				level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
			level 2:  [QUERY] Keystore . transaction	{params: } # {returnv: } # {op: Keystore.TXN}
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
				level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: Keystore.TRANSACTION}
				level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
=====transaction begin=====
				level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
				level 4: Keystore . before_save (params: ) # (returnv: )
				level 4: Keystore . before_validation (params: ) # (returnv: )
					level 5:  +FIELD+ Keystore . key	(type: string) 
					level 5:  [QUERY] self . where	{params: } # {returnv: } # {op: Keystore.SELECT}
				level 4: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
					level 2:  +FIELD+ Keystore . value	(type: integer) 
=====transaction begin=====
					level 2:  [QUERY] traffic_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
=====transaction begin=====
					level 2:  [QUERY] date_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
	level 1: ApplicationController . require_logged_in_user_or_400 (params: ) # (returnv: )
	level 1: ApplicationController . require_logged_in_user (params: ) # (returnv: )
	level 1: StoriesController . find_user_story (params: ) # (returnv: )
		level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
			level 2:  [QUERY] Story . where	{params: } # {returnv: } # {op: Story.SELECT}
			level 2:  [QUERY] Story.where(:short_id => params[:story_id] || params[:id]) . first	{params: } # {returnv: @story} # {op: .SELECT}
			level 2:  +FIELD+ User . id	(type: integer) 
			level 2:  [QUERY] Story . where	{params: } # {returnv: } # {op: Story.SELECT}
			level 2:  [QUERY] Story.where(:short_id => params[:story_id] || params[:id]) . first	{params: } # {returnv: @story} # {op: .SELECT}
		level 0: StoriesController . undelete (params: ) # (returnv: )
	level 1: Story . before_filter (params: ) # (returnv: )
	level 1: Story . is_editable_by_user? (params: @user, ) # (returnv: true)
		level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 2:  +FIELD+ User . id	(type: integer) 
		level 2:  +FIELD+ Story . user_id	(type: integer) 
		level 2:  +FIELD+ Story . is_moderated?	(type: integer) 
		level 2:  +FIELD+ Story . created_at	(type: datetime) 
	level 1: Story . is_undeletable_by_user? (params: @user, ) # (returnv: true)
		level 2:  +FIELD+ User . is_moderator?	(type: boolean) 
		level 2:  +FIELD+ User . id	(type: integer) 
		level 2:  +FIELD+ Story . user_id	(type: integer) 
		level 2:  +FIELD+ Story . is_moderated?	(type: integer) 
=====transaction begin=====
		level 1:  [QUERY] @story . save	{params: false, } # {returnv: } # {op: Story.INSERT}
		level 2: Story . before_save (params: ) # (returnv: )
			level 3: Story . log_moderation (params: ) # (returnv: )
=====transaction begin=====
				level 4:  [QUERY] self . new_record?	{params: } # {returnv: true} # {op: Story.INSERT}
					level 5: Story . before_validation (params: ) # (returnv: )
						level 6:  +FIELD+ Story . title	(type: string) 
						level 6:  +FIELD+ Story . description	(type: text) 
						level 6:  +FIELD+ Story . url	(type: string) 
						level 6:  +FIELD+ Story . user_id	(type: integer) 
						level 6:  [QUERY] self . where	{params: } # {returnv: } # {op: Story.SELECT}
						level 6: Story . assign_short_id_and_upvote (params: ) # (returnv: )
							level 7: ShortId . before_filter (params: ) # (returnv: )
							level 7: ShortId . generate (params: ) # (returnv: self.short_id)
								level 8: ShortId . candidate_id (params: ) # (returnv: generated_id)
					level 5: Story . before_create (params: ) # (returnv: )
						level 6: Story . assign_initial_hotness (params: ) # (returnv: )
							level 7: Story . calculated_hotness (params: ) # (returnv: self.hotness)
									level 8:  [QUERY] self.tags . select	{params: } # {returnv: } # {op: Tag.SELECT}
									level 8:  +FIELD+ Story . user_id	(type: integer) 
									level 8:  [QUERY] self.comments . where	{params: self, } # {returnv: } # {op: Comment.SELECT}
									level 8:  [QUERY] self.comments.where("user_id <> ?", self.user_id) . select	{params: } # {returnv: } # {op: .SELECT}
								level 8: Story . score (params: ) # (returnv: )
									level 9:  +FIELD+ Story . upvotes	(type: integer) 
									level 9:  +FIELD+ Story . downvotes	(type: integer) 
									level 8:  +FIELD+ Story . created_at	(type: datetime) 
						level 6: Story . mark_submitter (params: ) # (returnv: )
							level 7:  +FIELD+ Story . user_id	(type: integer) 
							level 7: Keystore . increment_value_for (params: self, ) # (returnv: )
								level 8: Keystore . incremented_value_for (params: key, amount, ) # (returnv: )
									level 9:  [QUERY] Keystore . transaction	{params: } # {returnv: } # {op: Keystore.TXN}
=====transaction begin=====
										level 9:  [QUERY] Keystore.connection . execute	{params: Keystore, } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
										level 9:  [QUERY] Keystore.connection . execute	{params: Keystore, } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
										level 9:  [QUERY] Keystore.connection . execute	{params: Keystore, } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
										level 9:  [QUERY] kv . save!	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
									level 9: Keystore . value_for (params: key, ) # (returnv: )
										level 10:  [QUERY] self . where	{params: key, } # {returnv: } # {op: Keystore.SELECT}
										level 10:  [QUERY] self.where(:key => key) . first	{params: } # {returnv: } # {op: .SELECT}
						level 6: Story . record_initial_upvote (params: ) # (returnv: )
							level 7:  +FIELD+ Story . id	(type: integer) 
							level 7:  +FIELD+ Story . user_id	(type: integer) 
							level 7: Vote . before_filter (params: ) # (returnv: )
							level 7: Vote . vote_thusly_on_story_or_comment_for_user_because (params: self, nil, self, nil, false, ) # (returnv: )
								level 8:  [QUERY] Vote . where	{params: user_id, story_id, comment_id, } # {returnv: } # {op: Vote.SELECT}
								level 8:  [QUERY] Vote.where(:user_id => user_id, :story_id => story_id,      :comment_id => comment_id) . first_or_initialize	{params: } # {returnv: v} # {op: .SELECT}
								level 8:  +FIELD+ Vote . vote	(type: integer) 
								level 8:  [QUERY] Vote . transaction	{params: } # {returnv: } # {op: Vote.TXN}
								level 8:  +FIELD+ Vote . vote	(type: integer) 
								level 8:  +FIELD+ Vote . vote	(type: integer) 
=====transaction begin=====
									level 8:  [QUERY] v . new_record?	{params: } # {returnv: true} # {op: Vote.INSERT}
									level 9: Vote . before_save (params: ) # (returnv: )
									level 9: Vote . before_validation (params: ) # (returnv: )
									level 9: Vote . before_create (params: ) # (returnv: )
=====transaction end=====
										level 8:  +FIELD+ Vote . vote	(type: integer) 
										level 8:  +FIELD+ Vote . vote	(type: integer) 
=====transaction begin=====
										level 8:  [QUERY] v . save!	{params: } # {returnv: } # {op: Vote.INSERT}
=====transaction end=====
										level 8:  +FIELD+ Vote . comment_id	(type: integer) 
										level 8:  +FIELD+ Vote . comment_id	(type: integer) 
										level 8:  [QUERY] Comment . find	{params: v, } # {returnv: c} # {op: Comment.SELECT}
=====transaction begin=====
										level 8:  [QUERY] User . update_counters	{params: } # {returnv: } # {op: User.UPDATE}
									level 9: User . before_save (params: ) # (returnv: )
										level 10: User . check_session_token (params: ) # (returnv: )
											level 11:  +FIELD+ User . session_token	(type: string) 
									level 9: User . before_validation (params: ) # (returnv: )
										level 10:  +FIELD+ User . email	(type: string) 
											level 10:  +FIELD+ User . username	(type: string) 
											level 10:  +FIELD+ User . username	(type: string) 
=====transaction end=====
								level 8: Comment . before_filter (params: ) # (returnv: )
								level 8: Comment . give_upvote_or_downvote_and_recalculate_confidence! (params: upvote, downvote, ) # (returnv: )
									level 9: Comment . calculated_confidence (params: ) # (returnv: )
										level 10:  +FIELD+ Comment . upvotes	(type: integer) 
										level 10:  +FIELD+ Comment . downvotes	(type: integer) 
										level 10:  +FIELD+ Comment . upvotes	(type: integer) 
										level 9:  +FIELD+ Comment . id	(type: integer) 
=====transaction begin=====
										level 9:  [QUERY] Comment.connection . execute	{params: Comment, } # {returnv: } # {op: .UPDATE}
=====transaction end=====
										level 9:  +FIELD+ Comment . story	(type: integer) 
									level 9: Story . recalculate_hotness! (params: ) # (returnv: )
										level 8:  +FIELD+ Vote . story_id	(type: integer) 
										level 8:  [QUERY] Story . find	{params: v, } # {returnv: s} # {op: Story.SELECT}
=====transaction begin=====
										level 8:  [QUERY] User . update_counters	{params: } # {returnv: } # {op: User.UPDATE}
=====transaction end=====
								level 8: Story . give_upvote_or_downvote_and_recalculate_hotness! (params: upvote, downvote, ) # (returnv: )
										level 9:  +FIELD+ Story . id	(type: integer) 
=====transaction begin=====
										level 9:  [QUERY] Story.connection . execute	{params: Story, } # {returnv: } # {op: .UPDATE}
=====transaction end=====
=====transaction end=====
					level 4:  +FIELD+ Story . user_id	(type: integer) 
				level 4: Story . tagging_changes (params: ) # (returnv: )
=====transaction begin=====
						level 5:  [QUERY] tg . new_record?	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
						level 5:  +FIELD+ Tag . tag	(type: string) 
						level 5:  +FIELD+ Tag . tag	(type: string) 
						level 5:  +FIELD+ Tag . tag	(type: string) 
						level 5:  +FIELD+ Tag . tag	(type: string) 
					level 4:  [QUERY] self.editor . try	{params: } # {returnv: m.moderator_user_id} # {op: .SELECT}
					level 4:  +FIELD+ Story . is_expired?	(type: integer) 
					level 4:  +FIELD+ Story . is_expired?	(type: integer) 
					level 4:  [QUERY] all_changes.map{|k,v|        if k == "merged_story_id"          if v[1]            "merged into #{self.merged_into_story.short_id} " <<              "(#{self.merged_into_story.title})"          else            "unmerged from another story"          end        else          "changed #{k} from #{v[0].inspect} to #{v[1].inspect}"        end      } . join	{params: } # {returnv: m.action} # {op: .JOIN}
=====transaction begin=====
					level 4:  [QUERY] m . save	{params: } # {returnv: } # {op: Moderation.INSERT}
					level 5: Moderation . before_filter (params: ) # (returnv: )
					level 5: Moderation . before_save (params: ) # (returnv: )
					level 5: Moderation . before_validation (params: ) # (returnv: )
					level 5: Moderation . before_create (params: ) # (returnv: )
						level 6: Moderation . send_message_to_moderated (params: ) # (returnv: )
								level 7:  +FIELD+ Moderation . moderator_user_id	(type: integer) 
								level 7:  +FIELD+ Moderation . story	(type: integer) 
								level 7:  +FIELD+ Moderation . story	(type: integer) 
								level 7:  +FIELD+ Story . user_id	(type: integer) 
								level 7:  +FIELD+ Moderation . story	(type: integer) 
								level 7:  +FIELD+ Story . title	(type: string) 
								level 7:  +FIELD+ Moderation . story	(type: integer) 
							level 7: Story . comments_url (params: ) # (returnv: )
								level 8: Story . short_id_url (params: ) # (returnv: )
									level 9:  +FIELD+ Story . short_id	(type: string) 
								level 8: Story . title_as_url (params: ) # (returnv: )
									level 9:  +FIELD+ Story . title	(type: string) 
									level 7:  +FIELD+ Moderation . action	(type: text) 
									level 7:  +FIELD+ Moderation . reason	(type: text) 
									level 7:  +FIELD+ Message . body	(type: text) 
									level 7:  +FIELD+ Moderation . reason	(type: text) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Comment . user_id	(type: integer) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Moderation . story	(type: integer) 
									level 7:  +FIELD+ Story . title	(type: string) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Moderation . story	(type: integer) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Moderation . comment	(type: integer) 
									level 7:  +FIELD+ Moderation . reason	(type: text) 
									level 7:  +FIELD+ Message . body	(type: text) 
									level 7:  +FIELD+ Moderation . reason	(type: text) 
									level 7:  +FIELD+ Message . body	(type: text) 
=====transaction begin=====
									level 7:  [QUERY] m . save	{params: } # {returnv: } # {op: Message.INSERT}
								level 8: Message . before_filter (params: ) # (returnv: )
								level 8: Message . before_save (params: ) # (returnv: )
									level 9: Message . update_unread_counts (params: ) # (returnv: )
										level 10: User . update_unread_message_count! (params: ) # (returnv: )
											level 11:  +FIELD+ User . id	(type: integer) 
											level 11: Message . unread (params: ) # (returnv: )
												level 12:  [QUERY] self . where	{params: } # {returnv: } # {op: Message.SELECT}
												level 11:  [QUERY] self.received_messages.unread . count	{params: } # {returnv: } # {op: .SELECT}
											level 11: Keystore . put (params: self, self, ) # (returnv: )
=====transaction begin=====
												level 12:  [QUERY] Keystore.connection . execute	{params: Keystore, } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
												level 12:  [QUERY] Keystore.connection . execute	{params: Keystore, } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
												level 12:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
									level 9: Message . check_for_both_deleted (params: ) # (returnv: )
										level 10:  +FIELD+ Message . deleted_by_author?	(type: boolean) 
										level 10:  +FIELD+ Message . deleted_by_recipient?	(type: boolean) 
								level 8: Message . before_validation (params: ) # (returnv: )
									level 9:  [QUERY] self . where	{params: } # {returnv: } # {op: Message.SELECT}
										level 9:  +FIELD+ Message . subject	(type: string) 
										level 9:  +FIELD+ Message . body	(type: text) 
									level 9: Message . assign_short_id (params: ) # (returnv: )
								level 8: Message . before_create (params: ) # (returnv: )
									level 9: Message . deliver_email_notifications (params: ) # (returnv: )
										level 10:  +FIELD+ User . username	(type: string) 
										level 10:  +FIELD+ Message . subject	(type: string) 
										level 10: Message . plaintext_body (params: ) # (returnv: )
											level 11:  +FIELD+ Message . body	(type: text) 
										level 10: Message . url (params: ) # (returnv: )
											level 11:  +FIELD+ Message . short_id	(type: string) 
											level 10:  +FIELD+ User . username	(type: string) 
										level 10: User . pushover! (params: Rails, ) # (returnv: )
											level 11:  +FIELD+ User . pushover_user_key	(type: string) 
											level 11:  +FIELD+ User . pushover_user_key	(type: string) 
=====transaction end=====
=====transaction end=====
			level 3: Story . fix_bogus_chars (params: ) # (returnv: )
				level 4:  +FIELD+ Story . title	(type: string) 
			level 3: Story . update_merged_into_story_comments (params: ) # (returnv: )
				level 4: Story . update_comments_count! (params: ) # (returnv: )
					level 5: Story . merged_comments (params: ) # (returnv: )
						level 6:  [QUERY] Story . select	{params: } # {returnv: } # {op: Story.SELECT}
						level 6:  +FIELD+ Story . id	(type: integer) 
						level 6:  [QUERY] Story.select(:id) . where	{params: self, } # {returnv: } # {op: .SELECT}
						level 6:  +FIELD+ Story . id	(type: integer) 
						level 6:  [QUERY] Comment . where	{params: Story, } # {returnv: } # {op: Comment.SELECT}
					level 5: Comment . arrange_for_user (params: nil, ) # (returnv: comments)
						level 6:  [QUERY] self . order	{params: } # {returnv: } # {op: Comment.SELECT}
						level 6:  +FIELD+ Comment . id	(type: integer) 
						level 6: Comment . is_gone? (params: ) # (returnv: true)
							level 7:  +FIELD+ Comment . is_deleted?	(type: boolean) 
							level 7:  +FIELD+ Comment . is_moderated?	(type: boolean) 
							level 6:  +FIELD+ User . is_moderator?	(type: boolean) 
							level 6:  +FIELD+ Comment . user_id	(type: integer) 
							level 6:  +FIELD+ User . id	(type: integer) 
							level 6:  +FIELD+ Comment . is_moderated?	(type: boolean) 
							level 5:  [QUERY] comments . count	{params: } # {returnv: self.comments_count} # {op: Comment.SELECT}
=====transaction end=====
	level 1: Story . comments_path (params: ) # (returnv: )
		level 2: Story . short_id_path (params: ) # (returnv: )
			level 3:  +FIELD+ Story . short_id	(type: string) 
