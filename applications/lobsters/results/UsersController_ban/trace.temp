level 0: UsersController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: Keystore.TRANSACTION}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
				level 4: Keystore . before_save (params: ) # (returnv: )
				level 4: Keystore . before_validation (params: ) # (returnv: )
					level 5:  [QUERY] key . where	{params: } # {returnv: } # {op: .SELECT}
				level 4: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] traffic_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] date_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
	level 1: ApplicationController . require_logged_in_moderator (params: ) # (returnv: )
		level 2: ApplicationController . require_logged_in_user (params: ) # (returnv: )
		level 0: UsersController . ban (params: ) # (returnv: )
	level 1:  [QUERY] User . where	{params: params[:username], } # {returnv: } # {op: User.SELECT}
	level 1:  [QUERY] User.where(:username => params[:username]) . first	{params: } # {returnv: buser} # {op: .SELECT}
	level 1: User . ban_by_user_for_reason! (params: @user, params[:reason], ) # (returnv: )
		level 2: User . delete! (params: ) # (returnv: )
			level 3: Comment . before_filter (params: ) # (returnv: )
			level 3: Comment . delete_for_user (params: self, ) # (returnv: )
=====transaction begin=====
				level 4:  [QUERY] m . save	{params: } # {returnv: } # {op: Moderation.INSERT}
					level 5: Moderation . before_filter (params: ) # (returnv: )
					level 5: Moderation . before_save (params: ) # (returnv: )
					level 5: Moderation . before_validation (params: ) # (returnv: )
					level 5: Moderation . before_create (params: ) # (returnv: )
						level 6: Moderation . send_message_to_moderated (params: ) # (returnv: )
							level 7: Story . before_filter (params: ) # (returnv: )
							level 7: Story . comments_url (params: ) # (returnv: )
								level 8: Story . short_id_url (params: ) # (returnv: )
								level 8: Story . title_as_url (params: ) # (returnv: )
=====transaction begin=====
							level 7:  [QUERY] m . save	{params: } # {returnv: } # {op: Message.INSERT}
								level 8: Message . before_filter (params: ) # (returnv: )
								level 8: Message . before_save (params: ) # (returnv: )
									level 9: Message . update_unread_counts (params: ) # (returnv: )
										level 10: User . update_unread_message_count! (params: ) # (returnv: )
											level 11:  [QUERY] self.received_messages.unread . count	{params: } # {returnv: } # {op: .SELECT}
=====transaction begin=====
											level 11:  [QUERY] Keystore . put	{params: self, self, } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
									level 9: Message . check_for_both_deleted (params: ) # (returnv: )
								level 8: Message . before_validation (params: ) # (returnv: )
									level 9:  [QUERY] recipient . where	{params: } # {returnv: } # {op: .SELECT}
									level 9:  [QUERY] author . where	{params: } # {returnv: } # {op: .SELECT}
									level 9: Message . assign_short_id (params: ) # (returnv: )
										level 10: ShortId . before_filter (params: ) # (returnv: )
										level 10: ShortId . generate (params: ) # (returnv: self.short_id)
											level 11: ShortId . candidate_id (params: ) # (returnv: generated_id)
								level 8: Message . before_create (params: ) # (returnv: )
									level 9: Message . deliver_email_notifications (params: ) # (returnv: )
										level 10: Message . plaintext_body (params: ) # (returnv: )
										level 10: Message . url (params: ) # (returnv: )
										level 10: User . pushover! (params: Rails, ) # (returnv: )
=====transaction end=====
=====transaction end=====
=====transaction begin=====
				level 4:  [QUERY] m . save	{params: } # {returnv: } # {op: Moderation.INSERT}
=====transaction end=====
				level 4: Story . update_comments_count! (params: ) # (returnv: )
					level 5: Story . merged_comments (params: ) # (returnv: )
						level 6:  [QUERY] Story . select	{params: } # {returnv: } # {op: Story.SELECT}
						level 6:  [QUERY] Story.select(:id) . where	{params: self, } # {returnv: } # {op: .SELECT}
						level 6:  [QUERY] Comment . where	{params: Story, } # {returnv: } # {op: Comment.SELECT}
					level 5: Comment . arrange_for_user (params: nil, ) # (returnv: comments)
						level 6:  [QUERY] self . order	{params: } # {returnv: } # {op: Comment.SELECT}
						level 6: Comment . is_gone? (params: ) # (returnv: true)
					level 5:  [QUERY] comments . count	{params: } # {returnv: self.comments_count} # {op: Comment.SELECT}
					level 5: Story . recalculate_hotness! (params: ) # (returnv: )
						level 6: Story . calculated_hotness (params: ) # (returnv: )
							level 7:  [QUERY] self.tags . select	{params: } # {returnv: } # {op: Tag.SELECT}
							level 7:  [QUERY] self.comments . where	{params: self, } # {returnv: } # {op: Comment.SELECT}
							level 7:  [QUERY] self.comments.where("user_id <> ?", self.user_id) . select	{params: } # {returnv: } # {op: .SELECT}
							level 7: Story . score (params: ) # (returnv: )
=====transaction begin=====
			level 3:  [QUERY] m . save	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
=====transaction begin=====
			level 3:  [QUERY] m . save	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
			level 3: User . check_session_token (params: ) # (returnv: )
=====transaction begin=====
			level 3:  [QUERY] self . save!	{params: } # {returnv: } # {op: User.INSERT}
				level 4: User . before_save (params: ) # (returnv: )
				level 4: User . before_validation (params: ) # (returnv: )
					level 5: User . before_validation_do_block (params: ) # (returnv: )
						level 6: User . create_rss_token (params: ) # (returnv: )
						level 6: User . create_mailing_list_token (params: ) # (returnv: )
				level 4: User . before_create (params: ) # (returnv: )
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] m . save!	{params: } # {returnv: } # {op: Moderation.INSERT}
=====transaction end=====
