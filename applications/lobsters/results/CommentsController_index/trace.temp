level 0: CommentsController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: .TXN}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
	level 1: ApplicationController . find_user_from_rss_token (params: ) # (returnv: )
		level 2:  [QUERY] User . where	{params: params[:token], } # {returnv: } # {op: User.SELECT}
		level 2:  [QUERY] User.where(:rss_token => params[:token].to_s) . first	{params: } # {returnv: @user} # {op: .SELECT}
	level 0: CommentsController . index (params: ) # (returnv: )
	level 1:  [QUERY] Comment . where	{params: false, false, } # {returnv: } # {op: Comment.SELECT}
	level 1:  [QUERY] Comment.where(      :is_deleted => false, :is_moderated => false    ) . order	{params: } # {returnv: } # {op: .SELECT}
	level 1:  [QUERY] Comment.where(      :is_deleted => false, :is_moderated => false    ).order(      "created_at DESC"    ).offset(      (@page - 1) * COMMENTS_PER_PAGE    ) . limit	{params: COMMENTS_PER_PAGE, } # {returnv: } # {op: .SELECT}
	level 1:  [QUERY] Comment.where(      :is_deleted => false, :is_moderated => false    ).order(      "created_at DESC"    ).offset(      (@page - 1) * COMMENTS_PER_PAGE    ).limit(      COMMENTS_PER_PAGE    ) . includes	{params: } # {returnv: @comments} # {op: .SELECT}
	level 1:  [QUERY] Comment . where	{params: false, false, } # {returnv: } # {op: Comment.SELECT}
	level 1: Vote . before_filter (params: ) # (returnv: )
	level 1: Vote . comment_votes_by_user_for_comment_ids_hash (params: @user, @comments, ) # (returnv: @votes)
		level 2:  [QUERY] self . where	{params: user_id, comment_ids, } # {returnv: votes} # {op: .SELECT}
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . url (params: ) # (returnv: )
		level 2: Story . before_filter (params: ) # (returnv: )
		level 2: Story . comments_url (params: ) # (returnv: )
			level 3: Story . title_as_url (params: ) # (returnv: )
	level 1: Comment . short_id_url (params: ) # (returnv: )
		level 2: Story . short_id_url (params: ) # (returnv: )
