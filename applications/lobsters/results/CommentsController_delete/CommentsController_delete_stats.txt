User where <User,SELECT>
TBLREADRECORD  User [2,0,0,3]
TBLWRITERECORD  User [0,0,0] Fields  []
User where( session_token => session[ u] to_s) first <,SELECT>
self lock(true) where( key => key) first <Keystore,SELECT> (c)
self lock(true) where <Keystore,SELECT> (c)
self lock <Keystore,TRANSACTION> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  []
key where <Keystore,SELECT> (c)
kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  []
traffic_kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  [value,]
date_kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  [value,]
Comment where <Comment,SELECT>
TBLREADRECORD  Comment [52,118,98,55]
TBLWRITERECORD  Comment [0,1,0] Fields  []
Comment where( short_id => params[ id]) first <,SELECT>
Vote where <Vote,SELECT>
TBLREADRECORD  Vote [48,118,98,54]
TBLWRITERECORD  Vote [1,0,0] Fields  []
Vote where( user_id => @user id,         story_id => comment story_id,  comment_id => comment id) first <,SELECT>
self received_messages unread count <User,SELECT>
Keystore put <Keystore,INSERT>
TBLWRITERECORD  Keystore [3,0,3] Fields  [comment_id,moderator_user_id,action,current_vote,is_moderated,is_deleted,]
recipient where <Message,SELECT>
recipient where <Message,SELECT>
m save <Message,INSERT>
TBLWRITERECORD  Message [3,0,7] Fields  [comment_id,moderator_user_id,action,current_vote,is_moderated,is_deleted,]
m save <Moderation,INSERT>
TBLWRITERECORD  Moderation [3,0,7] Fields  [comment_id,moderator_user_id,action,current_vote,is_moderated,is_deleted,]
Keystore connection execute <,INSERT>
Keystore connection execute <,INSERT>
Keystore connection execute <,INSERT>
kv save! <,INSERT>
self where( key => key) first try <Keystore,SELECT>
self where( key => key) first <Keystore,SELECT>
self where <Keystore,SELECT>
TBLREADRECORD  Keystore [0,0,0,0]
TBLWRITERECORD  Keystore [0,0,1] Fields  []
Vote where <Vote,SELECT>
TBLREADRECORD  Vote [18,14,0,13]
TBLWRITERECORD  Vote [2,0,1] Fields  [is_moderated,is_deleted,current_vote,]
Vote where( user_id => user_id,  story_id => story_id,       comment_id => comment_id) first_or_initialize <,SELECT>
v destroy! <Vote,DELETE> (c)
TBLWRITERECORD  Vote [1,0,0] Fields  []
v new_record? <Vote,INSERT> (c)
TBLWRITERECORD  Vote [1,0,0] Fields  []
v save! <Vote,INSERT> (c)
TBLWRITERECORD  Vote [3,0,1] Fields  [vote,reason,is_moderated,is_deleted,current_vote,]
Comment find <Comment,SELECT> (c)
TBLREADRECORD  Comment [12,4,0,4]
TBLWRITERECORD  Comment [3,0,1] Fields  [vote,reason,is_moderated,is_deleted,current_vote,]
User update_counters <User,UPDATE> (c)
TBLWRITERECORD  User [1,0,14] Fields  []
Comment connection execute <,UPDATE> (c)
self tags select <Tag,SELECT> (c)
TBLREADRECORD  Tag [0,0,0,0]
TBLWRITERECORD  Tag [1,0,14] Fields  [upvotes,downvotes,]
self comments where <Comment,SELECT> (c)
TBLREADRECORD  Comment [2,0,0,0]
TBLWRITERECORD  Comment [1,0,15] Fields  [upvotes,downvotes,]
self comments where("user_id <> ?", self user_id) select <Story,SELECT> (c)
Story find <Story,SELECT> (c)
TBLREADRECORD  Story [0,4,0,1]
TBLWRITERECORD  Story [3,0,1] Fields  [vote,reason,is_moderated,is_deleted,current_vote,]
User update_counters <User,UPDATE> (c)
TBLWRITERECORD  User [1,0,14] Fields  []
Story connection execute <,UPDATE> (c)
Story select <Story,SELECT>
TBLREADRECORD  Story [10,0,0,10]
TBLWRITERECORD  Story [0,0,0] Fields  []
Story select( id) where <,SELECT>
Comment where <Comment,SELECT>
TBLREADRECORD  Comment [6,0,0,10]
TBLWRITERECORD  Comment [3,0,1] Fields  [is_moderated,is_deleted,current_vote,]
self order <Comment,SELECT>
TBLREADRECORD  Comment [0,0,0,8]
TBLWRITERECORD  Comment [3,0,2] Fields  [is_moderated,is_deleted,current_vote,]
comments count <Comment,SELECT>
TBLREADRECORD  Comment [0,0,0,0]
TBLWRITERECORD  Comment [3,0,2] Fields  [is_moderated,is_deleted,current_vote,]
self parent_comment try <Comment,SELECT>
self plaintext_comment scan(/\B\@([\w\-]+)/) flatten uniq <Comment,SELECT>
User where <User,SELECT> (c)
TBLREADRECORD  User [2,0,0,4]
TBLWRITERECORD  User [3,0,1] Fields  [is_moderated,is_deleted,current_vote,]
User where( username => mention) first <,SELECT> (c)
self save <Comment,INSERT>
TBLWRITERECORD  Comment [13,2,26] Fields  [is_moderated,is_deleted,current_vote,parent_comment,hat_id,comment,user,comments_count,]
obj current_vote try <,SELECT> (v)
Vote where <Vote,SELECT> (v)
TBLREADRECORD  Vote [0,0,1,0]
TBLWRITERECORD  Vote [13,2,26] Fields  [current_vote,is_moderated,is_deleted,parent_comment,hat_id,comment,user,comments_count,]
r_counts keys sort map{|k|      k == "" ? "+#{r_counts[k]}"   "#{r_counts[k]} #{VoteCOMMENT_REASONS[k]}"    } join <,JOIN> (v)
self moderation try( moderator) try <Comment,SELECT> (v)
self moderation try( moderator) try <Comment,SELECT> (v)
self moderation try( moderator) try <Comment,SELECT> (v)

STATS query in total  56
STATS query total on single path: 52
STATS read query on single path: 36
STATS write query on single path: 16
STATS query in view  6
STATS query in closure  27
STATS branch depend on query result  111
STATS branch total  133
STATS read queries  37
STATS read to read query  276
STATS read to write query  510
STATS read to view  399
STATS read to branch  309
STATS materialized query  9
STATS write queries  56
STATS write from user input  13
STATS write from other queries  139
STATS write from const  306
