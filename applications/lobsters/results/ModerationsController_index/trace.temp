level 0: ModerationsController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: .TXN}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
		level 0: ModerationsController . index (params: ) # (returnv: )
	level 1:  [QUERY] Moderation . count	{params: } # {returnv: } # {op: Moderation.SELECT}
	level 1:  [QUERY] Moderation . order	{params: } # {returnv: } # {op: Moderation.SELECT}
	level 1:  [QUERY] Moderation.order("id desc") . limit	{params: } # {returnv: } # {op: .SELECT}
	level 1:  [QUERY] mod.moderator . try	{params: } # {returnv: } # {op: .SELECT}
	level 1: Story . before_filter (params: ) # (returnv: )
	level 1: Story . comments_path (params: ) # (returnv: )
		level 2: Story . title_as_url (params: ) # (returnv: )
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . url (params: ) # (returnv: )
		level 2: Story . comments_url (params: ) # (returnv: )
