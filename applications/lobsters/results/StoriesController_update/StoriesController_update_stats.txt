User where <User,SELECT>
TBLREADRECORD  User [2,0,0,3]
TBLWRITERECORD  User [0,0,0] Fields  []
User where( session_token => session[ u] to_s) first <,SELECT>
self lock(true) where( key => key) first <Keystore,SELECT> (c)
self lock(true) where <Keystore,SELECT> (c)
self lock <Keystore,TRANSACTION> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  []
key where <Keystore,SELECT> (c)
kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  []
traffic_kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  [value,]
date_kv save! <Keystore,INSERT> (c)
TBLWRITERECORD  Keystore [0,0,1] Fields  [value,]
Story where <Story,SELECT>
TBLREADRECORD  Story [2,0,0,1]
TBLWRITERECORD  Story [0,2,0] Fields  []
Story where( short_id => params[ story_id] || params[ id]) first <,SELECT>
Story where <Story,SELECT>
TBLREADRECORD  Story [2,0,0,1]
TBLWRITERECORD  Story [0,2,0] Fields  []
Story where( short_id => params[ story_id] || params[ id]) first <,SELECT>
user_id where <Story,SELECT>
self tags select <Tag,SELECT>
TBLREADRECORD  Tag [0,0,0,0]
TBLWRITERECORD  Tag [0,0,0] Fields  []
self comments where <Comment,SELECT>
TBLREADRECORD  Comment [2,8,0,3]
TBLWRITERECORD  Comment [0,0,1] Fields  []
self comments where("user_id <> ?", self user_id) select <Story,SELECT>
Keystore connection execute <,INSERT>
Keystore connection execute <,INSERT>
Keystore connection execute <,INSERT>
kv save! <,INSERT>
self where( key => key) first try <Keystore,SELECT>
self where( key => key) first <Keystore,SELECT>
self where <Keystore,SELECT>
TBLREADRECORD  Keystore [0,0,0,0]
TBLWRITERECORD  Keystore [0,0,2] Fields  []
Vote where <Vote,SELECT>
TBLREADRECORD  Vote [6,14,0,11]
TBLWRITERECORD  Vote [0,0,0] Fields  []
Vote where( user_id => user_id,  story_id => story_id,       comment_id => comment_id) first_or_initialize <,SELECT>
v destroy! <Vote,DELETE> (c)
TBLWRITERECORD  Vote [1,0,0] Fields  []
v new_record? <Vote,INSERT> (c)
TBLWRITERECORD  Vote [1,0,0] Fields  []
v save! <Vote,INSERT> (c)
TBLWRITERECORD  Vote [1,0,0] Fields  [vote,reason,]
Comment find <Comment,SELECT> (c)
TBLREADRECORD  Comment [0,4,0,2]
TBLWRITERECORD  Comment [1,0,0] Fields  [vote,reason,]
User update_counters <User,UPDATE> (c)
TBLWRITERECORD  User [1,0,14] Fields  []
Comment connection execute <,UPDATE> (c)
Story find <Story,SELECT> (c)
TBLREADRECORD  Story [0,4,0,1]
TBLWRITERECORD  Story [1,0,0] Fields  [vote,reason,]
User update_counters <User,UPDATE> (c)
TBLWRITERECORD  User [1,0,14] Fields  []
Story connection execute <,UPDATE> (c)
self new_record? <Story,INSERT>
TBLWRITERECORD  Story [2,1,15] Fields  [hotness,story,title,cur_url,]
tg new_record? <,INSERT> (c)
self editor try <Story,SELECT>
all_changes map{|k,v|        if k == "merged_story_id"          if v[1]            "merged into #{self merged_into_story short_id} " <<              "(#{self merged_into_story title})"          else            "unmerged from another story"          end        else          "changed #{k} from #{v[0] inspect} to #{v[1] inspect}"        end      } join <,JOIN>
self received_messages unread count <User,SELECT>
Keystore put <Keystore,INSERT>
TBLWRITERECORD  Keystore [3,0,4] Fields  [reason,action,moderator_user_id,story_id,]
recipient where <Message,SELECT>
recipient where <Message,SELECT>
m save <Message,INSERT>
TBLWRITERECORD  Message [18,2,53] Fields  [reason,action,moderator_user_id,story_id,story,title,cur_url,comment_id,is_moderated,is_deleted,comments_count,new_message,current_vote,]
m save <Moderation,INSERT>
TBLWRITERECORD  Moderation [18,2,53] Fields  [reason,action,moderator_user_id,story_id,story,title,cur_url,comment_id,is_moderated,is_deleted,comments_count,new_message,current_vote,]
self title to_s split("") map{|chr|      if chr ord == 160        " "      else        chr      end    } join <Story,JOIN>
Story select <Story,SELECT>
TBLREADRECORD  Story [10,0,0,10]
TBLWRITERECORD  Story [0,0,0] Fields  []
Story select( id) where <,SELECT>
Comment where <Comment,SELECT>
TBLREADRECORD  Comment [6,0,0,10]
TBLWRITERECORD  Comment [1,0,0] Fields  []
self order <Comment,SELECT>
TBLREADRECORD  Comment [0,0,0,8]
TBLWRITERECORD  Comment [1,0,1] Fields  []
comments count <Comment,SELECT>
TBLREADRECORD  Comment [0,0,0,0]
TBLWRITERECORD  Comment [1,0,1] Fields  []
self new_record? <Story,INSERT>
TBLWRITERECORD  Story [26,2,53] Fields  [is_moderated,title,comments_count,story,cur_url,reason,action,moderator_user_id,story_id,comment_id,is_deleted,new_message,current_vote,]
@story save <Story,INSERT>
TBLWRITERECORD  Story [0,0,0] Fields  []

STATS query in total  53
STATS query total on single path: 47
STATS read query on single path: 28
STATS write query on single path: 19
STATS query in view  0
STATS query in closure  17
STATS branch depend on query result  35
STATS branch total  80
STATS read queries  31
STATS read to read query  54
STATS read to write query  866
STATS read to view  0
STATS read to branch  94
STATS materialized query  9
STATS write queries  53
STATS write from user input  11
STATS write from other queries  91
STATS write from const  287
