level 0: CommentsController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: Keystore.TRANSACTION}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
				level 4: Keystore . before_save (params: ) # (returnv: )
				level 4: Keystore . before_validation (params: ) # (returnv: )
					level 5:  [QUERY] key . where	{params: } # {returnv: } # {op: .SELECT}
				level 4: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] traffic_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] date_kv . save!	{params: } # {returnv: } # {op: Keystore.INSERT}
=====transaction end=====
	level 1: ApplicationController . find_user_from_rss_token (params: ) # (returnv: )
		level 2:  [QUERY] User . where	{params: params[:token], } # {returnv: } # {op: User.SELECT}
		level 2:  [QUERY] User.where(:rss_token => params[:token].to_s) . first	{params: } # {returnv: @user} # {op: .SELECT}
	level 1: ApplicationController . require_logged_in_user_or_400 (params: ) # (returnv: )
	level 0: CommentsController . redirect_from_short_id (params: ) # (returnv: )
	level 1: CommentsController . find_comment (params: ) # (returnv: comment)
		level 2:  [QUERY] Comment . where	{params: params[:id], } # {returnv: } # {op: Comment.SELECT}
		level 2:  [QUERY] Comment.where(:short_id => params[:id]) . first	{params: } # {returnv: comment} # {op: .SELECT}
		level 2:  [QUERY] Vote . where	{params: @user, comment, comment, } # {returnv: } # {op: Vote.SELECT}
		level 2:  [QUERY] Vote.where(:user_id => @user.id,        :story_id => comment.story_id, :comment_id => comment.id) . first	{params: } # {returnv: comment.current_vote} # {op: .SELECT}
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . url (params: ) # (returnv: )
		level 2: Story . before_filter (params: ) # (returnv: )
		level 2: Story . comments_url (params: ) # (returnv: )
			level 3: Story . short_id_url (params: ) # (returnv: )
			level 3: Story . title_as_url (params: ) # (returnv: )
