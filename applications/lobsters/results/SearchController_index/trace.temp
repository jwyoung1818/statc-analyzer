level 0: SearchController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: .TXN}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
		level 0: SearchController . index (params: ) # (returnv: )
	level 1:  [QUERY] @search . order	{params: } # {returnv: } # {op: Search.SELECT}
	level 1: Search . before_filter (params: ) # (returnv: )
	level 1: Search . search_for_user! (params: @user, ) # (returnv: )
		level 2: Search . page_count (params: ) # (returnv: )
			level 3: Search . max_matches (params: ) # (returnv: true)
		level 2:  [QUERY] self.q.to_s.split(" ").reject{|w|      if m = w.match(/^domain:(.+)$/)        domain = m[1]      end    } . join	{params: } # {returnv: words} # {op: .JOIN}
		level 2:  [QUERY] Story . select	{params: } # {returnv: } # {op: Story.SELECT}
		level 2:  [QUERY] Story.select(:id) . where	{params: ActiveRecord, } # {returnv: } # {op: .SELECT}
		level 2: Vote . before_filter (params: ) # (returnv: )
		level 2: Vote . comment_votes_by_user_for_comment_ids_hash (params: user, self, ) # (returnv: votes)
			level 3:  [QUERY] self . where	{params: user_id, comment_ids, } # {returnv: votes} # {op: .SELECT}
		level 2: Vote . story_votes_by_user_for_story_ids_hash (params: user, self, ) # (returnv: votes)
			level 3:  [QUERY] self . where	{params: user_id, nil, story_ids, } # {returnv: votes} # {op: .SELECT}
	level 1:  [QUERY] @search . order	{params: } # {returnv: } # {op: Search.SELECT}
	level 1:  [QUERY] @search . order	{params: } # {returnv: } # {op: Search.SELECT}
	level 1:  [QUERY] @search . order	{params: } # {returnv: } # {op: Search.SELECT}
	level 1: Story . before_filter (params: ) # (returnv: )
	level 1: Story . score (params: ) # (returnv: )
	level 1: Story . can_be_seen_by_user? (params: @user, ) # (returnv: true)
	level 1: Story . url_or_comments_path (params: ) # (returnv: )
		level 2: Story . comments_path (params: ) # (returnv: )
			level 3: Story . title_as_url (params: ) # (returnv: )
	level 1: Story . is_gone? (params: ) # (returnv: true)
	level 1: Story . sorted_taggings (params: ) # (returnv: )
	level 1: Tag . before_filter (params: ) # (returnv: )
	level 1: Tag . css_class (params: ) # (returnv: )
	level 1: Story . domain (params: ) # (returnv: true)
	level 1: Story . domain_search_url (params: ) # (returnv: )
	level 1: User . avatar_url (params: ) # (returnv: )
	level 1: Story . html_class_for_user (params: ) # (returnv: )
		level 2: User . is_new? (params: ) # (returnv: true)
		level 2:  [QUERY] c . join	{params: } # {returnv: } # {op: .JOIN}
	level 1: Story . description_or_story_cache (params: ) # (returnv: sc)
	level 1: Story . is_editable_by_user? (params: @user, ) # (returnv: true)
	level 1: Story . is_undeletable_by_user? (params: @user, ) # (returnv: true)
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1: User . can_downvote? (params: ) # (returnv: true)
		level 2:  [QUERY] obj.current_vote . try	{params: } # {returnv: true} # {op: .SELECT}
	level 1: Story . hider_count (params: ) # (returnv: true)
		level 2:  [QUERY] HiddenStory . where	{params: self, } # {returnv: } # {op: HiddenStory.SELECT}
		level 2:  [QUERY] HiddenStory.where(:story_id => self.id) . count	{params: } # {returnv: @hider_count} # {op: .SELECT}
	level 1: Story . vote_summary_for (params: @user, ) # (returnv: )
		level 2:  [QUERY] Vote.where(:story_id => self.id, :comment_id => nil) . where	{params: } # {returnv: } # {op: .SELECT}
		level 2:  [QUERY] Vote.where(:story_id => self.id, :comment_id => nil) . where	{params: } # {returnv: } # {op: .SELECT}
		level 2:  [QUERY] r_counts.keys.sort.map{|k|      if k == ""        "+#{r_counts[k]}"      else        "#{r_counts[k]} " +          (Vote::STORY_REASONS[k] || Vote::OLD_STORY_REASONS[k] || k) +          (user && user.is_moderator?? " (#{r_whos[k].join(", ")})" : "")      end    } . join	{params: } # {returnv: } # {op: .JOIN}
		level 2:  [QUERY] r_counts.keys.sort.map{|k|      if k == ""        "+#{r_counts[k]}"      else        "#{r_counts[k]} " +          (Vote::STORY_REASONS[k] || Vote::OLD_STORY_REASONS[k] || k) +          (user && user.is_moderator?? " (#{r_whos[k].join(", ")})" : "")      end    } . join	{params: } # {returnv: } # {op: .JOIN}
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . score (params: ) # (returnv: )
	level 1: Comment . is_gone? (params: ) # (returnv: true)
	level 1: Hat . before_filter (params: ) # (returnv: )
	level 1: Hat . to_html_label (params: ) # (returnv: )
	level 1: Comment . has_been_edited? (params: ) # (returnv: true)
	level 1: Comment . url (params: ) # (returnv: )
		level 2: Story . comments_url (params: ) # (returnv: )
	level 1: Comment . is_editable_by_user? (params: @user, ) # (returnv: true)
	level 1: Comment . is_undeletable_by_user? (params: @user, ) # (returnv: true)
	level 1: Comment . is_deletable_by_user? (params: @user, ) # (returnv: true)
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1: Comment . vote_summary (params: ) # (returnv: )
		level 2:  [QUERY] Vote . where	{params: self, } # {returnv: } # {op: Vote.SELECT}
		level 2:  [QUERY] r_counts.keys.sort.map{|k|      k == "" ? "+#{r_counts[k]}" : "#{r_counts[k]} #{Vote::COMMENT_REASONS[k]}"    } . join	{params: } # {returnv: } # {op: .JOIN}
	level 1: Comment . gone_text (params: ) # (returnv: )
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
	level 1: Search . to_url_params (params: ) # (returnv: )
		level 2:  [QUERY] [ :q, :what, :order ].map{|p| "#{p}=#{CGI.escape(self.send(p).to_s)}"      } . join	{params: } # {returnv: } # {op: .JOIN}
