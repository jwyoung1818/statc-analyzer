level 0: CommentsController . before_filter (params: ) # (returnv: )
	level 1: ApplicationController . before_filter (params: ) # (returnv: )
		level 2: ApplicationController . authenticate_user (params: ) # (returnv: )
			level 3:  [QUERY] User . where	{params: session[:u], } # {returnv: true} # {op: User.SELECT}
			level 3:  [QUERY] User.where(:session_token => session[:u].to_s) . first	{params: } # {returnv: user} # {op: .SELECT}
			level 3: User . before_filter (params: ) # (returnv: )
			level 3: User . is_active? (params: ) # (returnv: true)
				level 4: User . is_banned? (params: ) # (returnv: )
			level 1: ApplicationController . increase_traffic_counter (params: ) # (returnv: )
		level 2: ApplicationController . user_is_spider? (params: ) # (returnv: true)
		level 2: Keystore . before_filter (params: ) # (returnv: )
		level 2: Keystore . find_or_create_key_for_update (params: now_i, ) # (returnv: date_kv)
			level 3:  [QUERY] self . lock	{params: true, } # {returnv: } # {op: .TXN}
			level 3:  [QUERY] self.lock(true) . where	{params: key, } # {returnv: } # {op: .SELECT}
			level 3:  [QUERY] self.lock(true).where(:key => key) . first	{params: } # {returnv: kv} # {op: .SELECT}
=====transaction begin=====
			level 3:  [QUERY] kv . save!	{params: } # {returnv: } # {op: .INSERT}
=====transaction end=====
	level 1: ApplicationController . find_user_from_rss_token (params: ) # (returnv: )
		level 2:  [QUERY] User . where	{params: params[:token], } # {returnv: } # {op: User.SELECT}
		level 2:  [QUERY] User.where(:rss_token => params[:token].to_s) . first	{params: } # {returnv: @user} # {op: .SELECT}
	level 0: CommentsController . undelete (params: ) # (returnv: )
	level 1: CommentsController . find_comment (params: ) # (returnv: comment)
		level 2:  [QUERY] Comment . where	{params: params[:id], } # {returnv: } # {op: Comment.SELECT}
		level 2:  [QUERY] Comment.where(:short_id => params[:id]) . first	{params: } # {returnv: comment} # {op: .SELECT}
		level 2:  [QUERY] Vote . where	{params: @user, comment, comment, } # {returnv: } # {op: Vote.SELECT}
		level 2:  [QUERY] Vote.where(:user_id => @user.id,        :story_id => comment.story_id, :comment_id => comment.id) . first	{params: } # {returnv: comment.current_vote} # {op: .SELECT}
	level 1: Comment . before_filter (params: ) # (returnv: )
	level 1: Comment . is_undeletable_by_user? (params: @user, ) # (returnv: true)
	level 1: Comment . undelete_for_user (params: @user, ) # (returnv: )
=====transaction begin=====
		level 2:  [QUERY] m . save	{params: } # {returnv: } # {op: Moderation.INSERT}
			level 3: Moderation . before_filter (params: ) # (returnv: )
			level 3: Moderation . before_save (params: ) # (returnv: )
			level 3: Moderation . before_validation (params: ) # (returnv: )
			level 3: Moderation . before_create (params: ) # (returnv: )
				level 4: Moderation . send_message_to_moderated (params: ) # (returnv: )
					level 5: Story . before_filter (params: ) # (returnv: )
					level 5: Story . comments_url (params: ) # (returnv: )
						level 6: Story . title_as_url (params: ) # (returnv: )
=====transaction begin=====
					level 5:  [QUERY] m . save	{params: } # {returnv: } # {op: Message.INSERT}
						level 6: Message . before_filter (params: ) # (returnv: )
						level 6: Message . before_save (params: ) # (returnv: )
							level 7: Message . update_unread_counts (params: ) # (returnv: )
								level 8: User . update_unread_message_count! (params: ) # (returnv: )
									level 9:  [QUERY] self.received_messages.unread . count	{params: } # {returnv: } # {op: .SELECT}
=====transaction begin=====
									level 9:  [QUERY] Keystore . put	{params: self, self, } # {returnv: } # {op: Keystore.INSERT}
										level 10: Keystore . before_save (params: ) # (returnv: )
										level 10: Keystore . before_validation (params: ) # (returnv: )
											level 11:  [QUERY] key . where	{params: } # {returnv: } # {op: .SELECT}
										level 10: Keystore . before_create (params: ) # (returnv: )
=====transaction end=====
							level 7: Message . check_for_both_deleted (params: ) # (returnv: )
						level 6: Message . before_validation (params: ) # (returnv: )
							level 7:  [QUERY] recipient . where	{params: } # {returnv: } # {op: .SELECT}
							level 7:  [QUERY] recipient . where	{params: } # {returnv: } # {op: .SELECT}
							level 7: Message . assign_short_id (params: ) # (returnv: )
								level 8: ShortId . before_filter (params: ) # (returnv: )
								level 8: ShortId . generate (params: ) # (returnv: self.short_id)
									level 9: ShortId . candidate_id (params: ) # (returnv: generated_id)
						level 6: Message . before_create (params: ) # (returnv: )
							level 7: Message . deliver_email_notifications (params: ) # (returnv: )
								level 8: Message . plaintext_body (params: ) # (returnv: )
								level 8: User . pushover! (params: Rails, ) # (returnv: )
=====transaction end=====
=====transaction end=====
=====transaction begin=====
		level 2:  [QUERY] m . save	{params: } # {returnv: } # {op: Moderation.INSERT}
=====transaction end=====
		level 2: Story . update_comments_count! (params: ) # (returnv: )
			level 3: Story . merged_comments (params: ) # (returnv: )
				level 4:  [QUERY] Story . select	{params: } # {returnv: } # {op: Story.SELECT}
				level 4:  [QUERY] Story.select(:id) . where	{params: self, } # {returnv: } # {op: .SELECT}
				level 4:  [QUERY] Comment . where	{params: Story, } # {returnv: } # {op: Comment.SELECT}
			level 3: Comment . arrange_for_user (params: nil, ) # (returnv: comments)
				level 4:  [QUERY] self . order	{params: } # {returnv: } # {op: .SELECT}
				level 4:  [QUERY] self.order("confidence DESC") . group_by	{params: } # {returnv: parents} # {op: .SELECT}
			level 3:  [QUERY] comments . count	{params: } # {returnv: self.comments_count} # {op: Comment.SELECT}
			level 3: Story . recalculate_hotness! (params: ) # (returnv: )
				level 4: Story . calculated_hotness (params: ) # (returnv: self.hotness)
					level 5:  [QUERY] self.tags . select	{params: } # {returnv: } # {op: Tag.SELECT}
					level 5:  [QUERY] self.comments . where	{params: self, } # {returnv: } # {op: Comment.SELECT}
	level 1: Comment . score (params: ) # (returnv: )
	level 1: Comment . is_gone? (params: ) # (returnv: true)
	level 1: User . can_downvote? (params: comment, ) # (returnv: true)
		level 2:  [QUERY] obj.current_vote . try	{params: } # {returnv: true} # {op: .SELECT}
	level 1: User . avatar_url (params: ) # (returnv: )
	level 1: Hat . before_filter (params: ) # (returnv: )
	level 1: Hat . to_html_label (params: ) # (returnv: )
	level 1: Comment . has_been_edited? (params: ) # (returnv: true)
	level 1: Comment . url (params: ) # (returnv: )
	level 1: Comment . is_editable_by_user? (params: @user, ) # (returnv: true)
	level 1: Comment . is_deletable_by_user? (params: @user, ) # (returnv: true)
	level 1: Story . is_gone? (params: ) # (returnv: true)
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1:  [QUERY] @user . try	{params: } # {returnv: true} # {op: User.SELECT}
	level 1: Comment . vote_summary (params: ) # (returnv: )
		level 2:  [QUERY] Vote . where	{params: self, } # {returnv: } # {op: Vote.SELECT}
		level 2:  [QUERY] r_counts.keys.sort.map{|k|      k == "" ? "+#{r_counts[k]}" : "#{r_counts[k]} #{Vote::COMMENT_REASONS[k]}"    } . join	{params: } # {returnv: } # {op: .JOIN}
	level 1: Story . comments_path (params: ) # (returnv: )
	level 1: Comment . gone_text (params: ) # (returnv: )
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
		level 2:  [QUERY] self.moderation . try	{params: } # {returnv: } # {op: Moderation.SELECT}
