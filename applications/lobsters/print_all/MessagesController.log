dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: MessagesController
Method before_filter:
	 ** variables: {}
	 
	 
	 
	 
Method index:
	 ** variables: {@cur_url, @title, @new_message, @direction, @messages, @new_message.recipient_username, }
	 
	 
	 
	 
Method sent:
	 ** variables: {@cur_url, @title, @direction, @messages, @new_message, }
	 
	 
Method create:
	 ** variables: {@cur_url, @title, @new_message, @new_message.author_user_id, @direction, @messages, flash[:success, }
	 
	 
	 
	 
	 ++ CALL DB QUERY: @new_message . save (params: , returnv: true)
	 
	 
	 
	 
Method show:
	 ** variables: {@cur_url, @title, @new_message, @new_message.recipient_username, @message.has_been_read, @new_message.subject, }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @message . save (params: , returnv: )
	 
	 
	 
	 
Method destroy:
	 ** variables: {@message.deleted_by_author, @message.deleted_by_recipient, flash[:success, }
	 
	 
	 
	 
	 ++ CALL DB QUERY: @message . save! (params: , returnv: )
	 
	 
	 
Method batch_delete:
	 ** variables: {deleted, m, message, ok, message.deleted_by_author, message.deleted_by_recipient, flash[:success, }
	 
	 
	 
	 
	 ++ CALL DB QUERY: Message.where(:short_id => m[1]) . first (params: , returnv: message)
	 ++ CALL DB QUERY: Message . where (params: m, , returnv: true)
	 
	 
	 
	 
	 ++ CALL DB QUERY: message . save! (params: , returnv: )
	 
	 
Method keep_as_new:
	 ** variables: {@message.has_been_read, }
	 ++ CALL DB QUERY: @message . save (params: , returnv: )
Method message_params:
	 ** variables: {}
	 
	 
	 
Method find_message:
	 ** variables: {@message, flash[:error, }
	 ++ CALL DB QUERY: Message.where(:short_id => params[:message_id] ||    params[:id]) . first (params: , returnv: @message)
	 ++ CALL DB QUERY: Message . where (params: , , returnv: true)
	 
	 
	 
	 
	 
	 
	 
