dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: LoginController
Method before_filter:
	 ** variables: {}
	 
	 
Method logout:
	 ** variables: {}
	 
Method index:
	 ** variables: {@title, @referer, }
	 
	 
Method login:
	 ** variables: {user, session[:u, rd, ru, flash.now[:error, @referer, }
	 
	 
	 
	 ++ CALL DB QUERY: User.where(:email => params[:email]) . first (params: , returnv: user)
	 ++ CALL DB QUERY: User . where (params: params[:email], , returnv: )
	 
	 ++ CALL DB QUERY: User.where(:username => params[:email]) . first (params: , returnv: user)
	 ++ CALL DB QUERY: User . where (params: params[:email], , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method forgot_password:
	 ** variables: {@title, }
Method reset_password:
	 ** variables: {@found_user, flash.now[:error, flash.now[:success, }
	 ++ CALL DB QUERY: User.where("email = ? OR username = ?", params[:email].to_s,      params[:email].to_s) . first (params: , returnv: @found_user)
	 ++ CALL DB QUERY: User . where (params: , , , , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method set_new_password:
	 ** variables: {@title, m, @reset_user, @reset_user.password, @reset_user.password_confirmation, @reset_user.password_reset_token, @reset_user.session_token, @reset_user.deleted_at, session[:u, flash[:error, }
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: User.where(:password_reset_token => params[:token].to_s) . first (params: , returnv: @reset_user)
	 ++ CALL DB QUERY: User . where (params: params[:token], , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @reset_user . save (params: , returnv: true)
	 
	 
	 
	 
	 
	 
