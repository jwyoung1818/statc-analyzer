dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: HomeController
Method before_filter:
	 ** variables: {}
	 
	 
	 
	 
Method about:
	 ** variables: {}
Method privacy:
	 ** variables: {}
Method hidden:
	 ** variables: {@heading, @title, @cur_url, }
	 
	 
	 
Method index:
	 ** variables: {@rss_link, @comments_rss_link, @heading, @title, @cur_url, }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method newest:
	 ** variables: {@heading, @title, @cur_url, @rss_link, }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method newest_by_user:
	 ** variables: {by_user, @heading, @title, @cur_url, @newest, @for_user, }
	 ++ CALL DB QUERY: User.where(:username => params[:user]) . first! (params: , returnv: by_user)
	 ++ CALL DB QUERY: User . where (params: params[:user], , returnv: )
	 
	 
	 
	 
	 
	 
	 
Method recent:
	 ** variables: {scope, @heading, @title, @cur_url, @rss_link, }
	 
	 
	 
	 
	 
	 
	 
Method tagged:
	 ** variables: {@tag, @heading, @title, @cur_url, @rss_link, }
	 ++ CALL DB QUERY: Tag.where(:tag => params[:tag]) . first! (params: , returnv: @tag)
	 ++ CALL DB QUERY: Tag . where (params: params[:tag], , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method top:
	 ** variables: {@cur_url, length, m, length[:dur, length[:intv, @heading, @title, }
	 
	 
	 
	 ++ CALL DB QUERY: TOP_INTVS.keys . join (params: , returnv: true)
	 
	 
	 
	 
	 
	 
Method upvoted:
	 ** variables: {@heading, @title, @cur_url, @rss_link, }
	 
	 ++ CALL DB QUERY: @user.upvoted_stories . order (params: , , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method filtered_tag_ids:
	 ** variables: {}
	 
	 
	 
	 
	 
	 
Method stories:
	 ** variables: {}
	 
	 
Method page:
	 ** variables: {}
	 
	 
	 
	 
Method paginate:
	 ** variables: {}
	 
	 
	 
Method get_from_cache:
	 ** variables: {key, }
	 
	 
	 
	 
	 ++ CALL DB QUERY: opts.merge(page: page).sort.map{|k,v| "#{k}=#{v.to_param}"        } . join (params: , , returnv: key)
	 
	 
	 
	 
	 
	 
	 
