dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: Keystore
Method get:
	 ** variables: {}
	 ++ CALL DB QUERY: self.where(:key => key) . first (params: , returnv: )
	 ++ CALL DB QUERY: self . where (params: key, , returnv: )
Method value_for:
	 ** variables: {}
	 
	 ++ CALL DB QUERY: self.where(:key => key) . first (params: , returnv: )
	 ++ CALL DB QUERY: self . where (params: key, , returnv: )
Method put:
	 ** variables: {kv, kv.value, }
	 
	 
	 ++ CALL DB QUERY: Keystore.connection . execute (params: Keystore, , returnv: )
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: Keystore.connection . execute (params: Keystore, , returnv: )
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: kv . save! (params: , returnv: )
Method increment_value_for:
	 ** variables: {}
	 
Method incremented_value_for:
	 ** variables: {kv, kv.value, }
	 ++ CALL DB QUERY: Keystore . transaction (params: , returnv: )
	 
	 
	 
	 ++ CALL DB QUERY: Keystore.connection . execute (params: Keystore, , returnv: )
	 
	 
	 
	 ++ CALL DB QUERY: Keystore.connection . execute (params: Keystore, , returnv: )
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: Keystore.connection . execute (params: Keystore, , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: kv . save! (params: , returnv: )
	 
	 
	 
Method find_or_create_key_for_update:
	 ** variables: {kv, kv.key, kv.value, }
	 
	 ++ CALL DB QUERY: self.lock(true).where(:key => key) . first (params: , returnv: kv)
	 ++ CALL DB QUERY: self.lock(true) . where (params: key, , returnv: )
	 ++ CALL DB QUERY: self . lock (params: true, , returnv: )
	 
	 ++ CALL DB QUERY: kv . save! (params: , returnv: )
Method decrement_value_for:
	 ** variables: {}
	 
Method decremented_value_for:
	 ** variables: {}
	 
