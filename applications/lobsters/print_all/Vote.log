dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: Vote
Method votes_by_user_for_stories_hash:
	 ** variables: {votes, votes[v.story_id, }
	 
	 ++ CALL DB QUERY: Vote . where (params: user, stories, nil, , returnv: )
	 
	 
	 
Method comment_votes_by_user_for_story_hash:
	 ** variables: {votes, votes[v.comment_id, }
	 
	 ++ CALL DB QUERY: Vote.where(      :user_id => user_id, :story_id => story_id    ) . where (params: , , returnv: )
	 ++ CALL DB QUERY: Vote . where (params: user_id, story_id, , returnv: )
	 
	 
	 
Method story_votes_by_user_for_story_ids_hash:
	 ** variables: {votes, memo[v.story_id, }
	 
	 ++ CALL DB QUERY: self . where (params: user_id, nil, story_ids, , returnv: votes)
	 
	 
	 
	 
Method comment_votes_by_user_for_comment_ids_hash:
	 ** variables: {votes, memo[v.comment_id, }
	 
	 ++ CALL DB QUERY: self . where (params: user_id, comment_ids, , returnv: votes)
	 
	 
	 
	 
Method vote_thusly_on_story_or_comment_for_user_because:
	 ** variables: {v, upvote, downvote, v.vote, v.reason, c, s, }
	 ++ CALL DB QUERY: Vote.where(:user_id => user_id, :story_id => story_id,      :comment_id => comment_id) . first_or_initialize (params: , returnv: v)
	 ++ CALL DB QUERY: Vote . where (params: user_id, story_id, comment_id, , returnv: )
	 ++ CALL DB QUERY: v . new_record? (params: , returnv: true)
	 
	 ++ CALL DB QUERY: Vote . transaction (params: , returnv: )
	 
	 
	 
	 
	 ++ CALL DB QUERY: v . new_record? (params: , returnv: true)
	 
	 
	 ++ CALL DB QUERY: v . save! (params: , returnv: )
	 
	 ++ CALL DB QUERY: Comment . find (params: v, , returnv: c)
	 
	 
	 ++ CALL DB QUERY: User . update_counters (params: , returnv: )
	 
	 
	 ++ CALL DB QUERY: Story . find (params: v, , returnv: s)
	 
	 
	 ++ CALL DB QUERY: User . update_counters (params: , returnv: )
	 
	 
	 
