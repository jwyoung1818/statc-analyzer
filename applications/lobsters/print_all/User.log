dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: User
Method valid?:
	 ** variables: {BANNED_USERNAMES, NEW_USER_DAYS, }
	 
	 
Method recalculate_all_karmas!:
	 ** variables: {u.karma, }
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: u . save! (params: , returnv: )
Method username_regex:
	 ** variables: {}
	 
	 
	 ++ CALL DB QUERY: User.validators_on(:username).select{|v|      v.class == ActiveModel::Validations::FormatValidator } . first (params: , returnv: )
	 ++ CALL DB QUERY: User.validators_on(:username) . select (params: , returnv: )
	 
	 
Method as_json:
	 ** variables: {attrs, h, h[:avatar_url, }
	 
	 
	 
	 
	 
Method avatar_url:
	 ** variables: {}
	 
	 
	 
	 
Method average_karma:
	 ** variables: {k, }
	 
	 
	 
	 
Method ban_by_user_for_reason!:
	 ** variables: {self.banned_at, self.banned_by_user_id, self.banned_reason, m, m.moderator_user_id, m.user_id, m.action, m.reason, }
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: m . save! (params: , returnv: )
Method can_downvote?:
	 ** variables: {}
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method check_session_token:
	 ** variables: {self.session_token, }
	 
	 
	 
Method create_mailing_list_token:
	 ** variables: {self.mailing_list_token, }
	 
	 
	 
Method create_rss_token:
	 ** variables: {self.rss_token, }
	 
	 
	 
Method comments_posted_count:
	 ** variables: {}
	 
	 
	 
Method delete!:
	 ** variables: {m.deleted_by_author, m.deleted_by_recipient, self.session_token, self.deleted_at, }
	 ++ CALL DB QUERY: User . transaction (params: , returnv: )
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: m . save (params: , returnv: )
	 
	 
	 ++ CALL DB QUERY: m . save (params: , returnv: )
	 
	 
	 
	 
	 ++ CALL DB QUERY: self . save! (params: , returnv: )
	 
Method initiate_password_reset_for_ip:
	 ** variables: {self.password_reset_token, }
	 
	 
	 
	 ++ CALL DB QUERY: self . save! (params: , returnv: )
	 
	 
Method is_active?:
	 ** variables: {}
	 
	 
Method is_banned?:
	 ** variables: {}
	 
Method is_new?:
	 ** variables: {}
	 
	 
	 
Method linkified_about:
	 ** variables: {}
	 
	 
Method most_common_story_tag:
	 ** variables: {}
	 ++ CALL DB QUERY: Tag.active.joins(      :stories    ).where(      :stories => { :user_id => self.id }    ).group(      Tag.arel_table[:id]    ).order(      'COUNT(*) desc'    ) . first (params: , returnv: )
	 ++ CALL DB QUERY: Tag.active.joins(      :stories    ).where(      :stories => { :user_id => self.id }    ).group(      Tag.arel_table[:id]    ) . order (params: , , returnv: )
	 ++ CALL DB QUERY: Tag.active.joins(      :stories    ).where(      :stories => { :user_id => self.id }    ) . group (params: , , returnv: )
	 ++ CALL DB QUERY: Tag.active.joins(      :stories    ) . where (params: self, , returnv: )
	 
	 
	 
	 
Method pushover!:
	 ** variables: {}
	 
	 
	 
	 
Method recent_threads:
	 ** variables: {}
	 
	 
	 ++ CALL DB QUERY: self.comments.group(:thread_id) . order (params: , , returnv: )
	 ++ CALL DB QUERY: self.comments . group (params: , , returnv: )
	 
Method stories_submitted_count:
	 ** variables: {}
	 
	 
	 
Method to_param:
	 ** variables: {}
	 
Method unban_by_user!:
	 ** variables: {self.banned_at, self.banned_by_user_id, self.banned_reason, m, m.moderator_user_id, m.user_id, m.action, }
	 ++ CALL DB QUERY: self . save! (params: , returnv: )
	 
	 
	 
	 ++ CALL DB QUERY: m . save! (params: , returnv: )
Method undeleted_received_messages:
	 ** variables: {}
	 ++ CALL DB QUERY: received_messages . where (params: false, , returnv: )
	 
Method undeleted_sent_messages:
	 ** variables: {}
	 ++ CALL DB QUERY: sent_messages . where (params: false, , returnv: )
	 
Method unread_message_count:
	 ** variables: {}
	 
	 
	 
Method update_unread_message_count!:
	 ** variables: {}
	 
	 
	 ++ CALL DB QUERY: self.received_messages.unread . count (params: , returnv: )
	 
	 
Method votes_for_others:
	 ** variables: {}
	 ++ CALL DB QUERY: self.votes.joins(:story, :comment).      where("comments.user_id <> votes.user_id AND " <<        "stories.user_id <> votes.user_id") . order (params: , , returnv: )
	 ++ CALL DB QUERY: self.votes.joins(:story, :comment) . where (params: , , returnv: )
	 
	 
