dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: StoriesController
Method before_filter:
	 ** variables: {}
	 
	 
	 
	 
	 
Method create:
	 ** variables: {@title, @cur_url, @story, @story.user_id, }
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @story . save (params: , returnv: true)
	 
	 
	 
	 
Method destroy:
	 ** variables: {flash[:error, @story.is_expired, @story.editor, @story.moderation_reason, }
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @story . save (params: false, , returnv: )
	 
Method edit:
	 ** variables: {flash[:error, @title, @story.merge_story_short_id, }
	 
	 
	 
	 
	 
Method fetch_url_attributes:
	 ** variables: {s, s.fetching_ip, s.url, oattrs, title, oattrs[:title, cu, oattrs[:url, }
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method new:
	 ** variables: {@title, @cur_url, @story, @story.fetching_ip, @story.url, cu, flash.now[:notice, s, flash[:success, @story.already_posted_story, @story.title, }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method preview:
	 ** variables: {@story, @story.user_id, @story.previewing, @story.vote, @story.upvotes, @story.seen_previous, }
	 
	 
	 
	 
	 
Method show:
	 ** variables: {@story, flash[:success, @title, @short_url, @comments, c.highlighted, @comment, }
	 ++ CALL DB QUERY: Story.where(:short_id => params[:id]) . first! (params: , returnv: @story)
	 ++ CALL DB QUERY: Story . where (params: params[:id], , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @story.merged_comments . includes (params: , , , , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
Method undelete:
	 ** variables: {flash[:error, @story.is_expired, @story.editor, }
	 
	 
	 
	 ++ CALL DB QUERY: @story . save (params: false, , returnv: )
	 
Method update:
	 ** variables: {flash[:error, @story.is_expired, @story.editor, @story.attributes, }
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: @story . save (params: , returnv: true)
	 
Method unvote:
	 ** variables: {story, }
	 
	 
	 
	 
Method upvote:
	 ** variables: {story, }
	 
	 
	 
	 
Method downvote:
	 ** variables: {story, }
	 
	 
	 
	 
	 
	 
	 
Method hide:
	 ** variables: {story, }
	 
	 
	 
	 
Method unhide:
	 ** variables: {story, }
	 
	 
	 ++ CALL DB QUERY: HiddenStory . where (params: @user, story, , returnv: )
	 
	 
Method story_params:
	 ** variables: {p, }
	 
	 
	 
	 
	 
Method find_story:
	 ** variables: {story, story.vote, }
	 ++ CALL DB QUERY: Story.where(:short_id => params[:story_id]) . first (params: , returnv: story)
	 ++ CALL DB QUERY: Story . where (params: params[:story_id], , returnv: )
	 
	 
	 ++ CALL DB QUERY: Vote.where(:user_id => @user.id,        :story_id => story.id, :comment_id => nil) . first (params: , returnv: )
	 ++ CALL DB QUERY: Vote . where (params: @user, story, nil, , returnv: )
	 
	 
Method find_user_story:
	 ** variables: {@story, flash[:error, }
	 
	 ++ CALL DB QUERY: Story.where(:short_id => params[:story_id] || params[:id]) . first (params: , returnv: @story)
	 ++ CALL DB QUERY: Story . where (params: , , returnv: )
	 
	 
	 ++ CALL DB QUERY: Story.where(:user_id => @user.id, :short_id =>        (params[:story_id] || params[:id])) . first (params: , returnv: @story)
	 ++ CALL DB QUERY: Story . where (params: @user, , , returnv: )
	 
	 
	 
	 
Method load_user_votes:
	 ** variables: {v, @story.vote, @story.is_hidden_by_cur_user, @votes, c.current_vote, }
	 ++ CALL DB QUERY: Vote.where(:user_id => @user.id, :story_id => @story.id,      :comment_id => nil) . first (params: , returnv: v)
	 ++ CALL DB QUERY: Vote . where (params: @user, @story, nil, , returnv: true)
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
