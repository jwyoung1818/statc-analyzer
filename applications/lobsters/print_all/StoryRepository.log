dir = ../applications/lobsters/
Super cannot find upper: User . as_json
######## BEGIN ########
Class: StoryRepository
Method initialize:
	 ** variables: {@user, @params, }
Method hottest:
	 ** variables: {hottest, }
	 
	 ++ CALL DB QUERY: hottest . order (params: , , returnv: )
Method hidden:
	 ** variables: {hidden, }
	 
	 ++ CALL DB QUERY: hidden . where (params: Story, , returnv: hidden)
	 
	 
	 
	 
	 ++ CALL DB QUERY: hidden . order (params: , , returnv: )
Method newest:
	 ** variables: {newest, }
	 
	 ++ CALL DB QUERY: newest . order (params: , , returnv: )
Method newest_by_user:
	 ** variables: {}
	 ++ CALL DB QUERY: base_scope.where(user_id: user.id) . order (params: , , returnv: )
	 ++ CALL DB QUERY: base_scope . where (params: user, , returnv: )
	 
	 
Method recent:
	 ** variables: {stories, story_ids, keep_ids, }
	 
	 
	 
	 ++ CALL DB QUERY: stories.select(:id, :upvotes, :downvotes, :user_id).        where(Story.arel_table[:created_at].gt((RECENT_DAYS_OLD + x).days.ago)) . order (params: , , returnv: )
	 ++ CALL DB QUERY: stories.select(:id, :upvotes, :downvotes, :user_id) . where (params: Story, , returnv: )
	 ++ CALL DB QUERY: stories . select (params: , , , , , returnv: )
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: Story . where (params: keep_ids, , returnv: stories)
	 ++ CALL DB QUERY: stories . order (params: , , returnv: )
Method tagged:
	 ** variables: {tagged, }
	 
	 ++ CALL DB QUERY: tagged . where (params: Story, , returnv: tagged)
	 
	 
	 
	 ++ CALL DB QUERY: Tagging.arel_table . where (params: Tagging, , returnv: )
	 
	 
	 
	 
	 
	 ++ CALL DB QUERY: tagged . order (params: , , returnv: )
Method top:
	 ** variables: {top, }
	 ++ CALL DB QUERY: base_scope . where (params: length, , returnv: top)
	 
	 
	 ++ CALL DB QUERY: top . order (params: Story, , returnv: )
	 
Method base_scope:
	 ** variables: {}
	 ++ CALL DB QUERY: Story.unmerged . where (params: false, , returnv: )
	 
Method filter_hidden_and_tags:
	 ** variables: {scope, }
	 
Method filter_hidden:
	 ** variables: {}
	 ++ CALL DB QUERY: scope . where (params: Story, , returnv: )
	 
	 
	 
Method hidden_arel:
	 ** variables: {hidden_arel, }
	 
	 ++ CALL DB QUERY: HiddenStory.arel_table . where (params: HiddenStory, , returnv: )
	 
	 
	 
	 
	 
Method positive_ranked:
	 ** variables: {}
	 ++ CALL DB QUERY: scope . where (params: Story, , returnv: )
	 
Method filter_tags:
	 ** variables: {}
	 ++ CALL DB QUERY: scope . where (params: Story, , returnv: )
	 
	 
	 
	 ++ CALL DB QUERY: Tagging.arel_table . where (params: Tagging, , returnv: )
	 
	 
	 
	 
