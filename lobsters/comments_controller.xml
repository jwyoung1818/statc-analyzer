<controller>
	<method name="index">
		<input>user_id</input>
		<input>page_id</input>
		<query>
			<text>
			SELECT  `comments`.* FROM `comments`  WHERE `comments`.`is_deleted` = 0 AND `comments`.`is_moderated` = 0 AND (story_id NOT IN (SELECT story_id FROM hidden_stories WHERE user_id = 2))  ORDER BY created_at DESC LIMIT 20 OFFSET 0
			</text>
			<output>story_id</output>
			<output>comment_id</output>
		</query>
		<query>
			<text>
			SELECT `users`.* FROM `users`  WHERE `users`.`id` IN (2)
			</text>
			<input>user_id</input>
		</query>
		<query>
			<text>
			SELECT `stories`.* FROM `stories`  WHERE `stories`.`id` IN (2, 1)
			</text>
			<input>story_id</input>
		</query>
		<query>
			<text>
			SELECT `votes`.* FROM `votes`  WHERE `votes`.`user_id` = 2 AND `votes`.`comment_id` IN (2, 1)
			</text>
			<input>comment_id</input>
		</query>
	</method>
	<method name="find_comment" line="https://github.com/jcs/lobsters/blob/master/app/controllers/comments_controller.rb#L309">
		<input>short_id</input>
		<input>user_id</input>
		<query>
			<text>
			SELECT  `comments`.* FROM `comments`  WHERE `comments`.`short_id` = 'ptaisa'  ORDER BY `comments`.`id` ASC LIMIT 1
			</text>
			<input>short_id</input>
			<output>comment_story_id</output>
			<output>comment_id</output>
		</query>
		<query>
			<text>
			SELECT  `votes`.* FROM `votes`  WHERE `votes`.`user_id` = 2 AND `votes`.`story_id` = 2 AND `votes`.`comment_id` = 2  ORDER BY `votes`.`id` ASC LIMIT 1
			</text>
			<input>comment_id</input>
			<input>user_id</input>
			<input>comment_story_id</input>
		</query>
	</method>
	<method name="reply">
		<input>short_id</input>
		<input>user_id</input>
		<call class="comments" class_type="controller" function_name="find_comment">
			<feed>short_id</feed>
			<feed>user_id</feed>
		</call>
		<call class="comments" class_type="view" function_name="commentbox" property="render">
		</call>
	</method>
	<method name="create">
		<input>story_id</input>
		<input>parent_comment_short_id</input>
		<input>user_id</input>
		<input>comment</input>
		<query>
			<text>
			SELECT  `stories`.* FROM `stories`  WHERE `stories`.`short_id` = 'xu86ww'  ORDER BY `stories`.`id` ASC LIMIT 1
			</text>
			<input>story_id</input>
			<output>story.id</output>
		</query>
		<action line="https://github.com/jcs/lobsters/blob/master/app/controllers/comments_controller.rb#L18">
			<description>comment = story.comments.build</description>
		</action>
		<query line="https://github.com/jcs/lobsters/blob/master/app/controllers/comments_controller.rb#L27">
			<text>
			SELECT  `comments`.* FROM `comments`  WHERE `comments`.`story_id` = 1 AND `comments`.`short_id` = 'en0zcn'  ORDER BY `comments`.`id` ASC LIMIT 1
			</text>
			<input>story.id</input>
			<input>parent_comment_short_id</input>
			<output>comment.parrent_comment_id</output>
		</query>
		<query line="https://github.com/jcs/lobsters/blob/master/app/controllers/comments_controller.rb#L38">
			<text>
			SELECT  `comments`.* FROM `comments`  WHERE `comments`.`story_id` = 1 AND `comments`.`user_id` = 2 AND `comments`.`parent_comment_id` = 1  ORDER BY `comments`.`id` ASC LIMIT 1
			</text>
			<input>story.id</input>
			<input>comment.parrent_comment_id</input>
			<input>user_id</input>
		</query>
		<call class="comments" class_type="model" function_name="assign_short_id_and_upvote">
			<return>new_short_id</return>
		</call>
		<call class="comments" class_type="model" function_name="assign_initial_confidence">
			<return>initial_confidence</return>
		</call>
		<call class="comments" class_type="model" function_name="assign_thread_id">
			<return>new_thread_id</return>
		</call>
		<call class="comments" class_type="model" function_name="save">
			<feed>comment</feed>
			<feed>initial_confidence</feed>
			<feed>comment.parent_comment_id</feed>
			<feed>new_short_id</feed>
			<feed>story.id</feed>
			<feed>user_id</feed>
		</call>
	</method>
</controller>
