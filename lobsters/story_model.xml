<model>
	<method name="calculated_hotness">
		<input>story_id</input>
		<input>user_id</input>
		<query line="https://github.com/jcs/lobsters/blob/master/app/models/story.rb#L176">
			<text>
			SELECT `tags`.* FROM `tags` INNER JOIN `taggings` ON `tags`.`id` = `taggings`.`tag_id` WHERE `taggings`.`story_id` = 1
			</text>
			<input>story_id</input>
		</query>
		<query>
			<text>
			SELECT `comments`.`upvotes`, `comments`.`downvotes` FROM `comments`  WHERE `comments`.`story_id` = 1 AND (user_id != 1)
			</text>
			<input>story_id</input>
			<input>user_id</input>
		</query>
		<return>hotness</return>
	</method>
	<method name="recalculate_hotness">
		<input>story_id</input>
		<input>user_id</input>
		<call class="story" class_type="model" function_name="calculated_hotness">
			<feed>story_id</feed>
			<feed>user_id</feed>
		</call>
		<query>
			<text>
			UPDATE `stories` SET `stories`.`hotness` = -16730.5827776 WHERE `stories`.`id` = 1
			</text>
			<input>hotness</input>
		</query>
	</method>
	<method name="update_comments_count">
		<input>story_id</input>
		<input>user_id</input>
		<query line="https://github.com/jcs/lobsters/blob/master/app/models/story.rb#L651">
			<text>
			SELECT `stories`.`id` FROM `stories`  WHERE `stories`.`merged_story_id` = 1
			</text>
			<input>story_id</input>
		</query>
		<action>
			<description>comments.count{|c| !c.is_gone? }</description>
			<return>comments_count</return>
		</action>
		<query>
			<text>
			UPDATE `stories` SET `stories`.`comments_count` = 2 WHERE `stories`.`id` = 1
			</text>
			<input>comments_count</input>
		</query>
		<call class="story" class_type="model" function_name="recalculate_hotness">
			<feed>story_id</feed>
			<feed>user_id</feed>
		</call>
		<return>short_id</return>
		<return>upvotes</return>
	</method>
	<method name="assign_short_id_and_upvote">
		<return>short_id</return>
		<return>upvotes</return>
	</method>
	<method name="assign_initial_hotness">
		<input>story_id</input>
		<input>user_id</input>
		<call class="story" class_type="model" function_name="calculated_hotness">
			<feed>user_id</feed>
			<feed>story_id</feed>
		</call>
	</method>
	<method name="new">
		<input>story_tags_a</input>
		<input>story_url</input>
		<input>user_id</input>
		<call class="story" class_type="model" function_name="assign_short_id_and_upvote">
		</call>
		<call class="story" class_type="model" function_name="valid">
			<feed>short_id</feed>
			<feed>story_tags_a</feed>
			<feed>story_url</feed>
		</call>
	</method>
	<method name="new_record">
		<input>short_id</input>
		<query>
			<text>
			SELECT  1 AS one FROM `stories`  WHERE `stories`.`short_id` = 'm8uczs' LIMIT 1
			</text>
			<input>short_id</input>
			<table>stories</table>
			<operation>SELECT</operation>
		</query>
	</method>
	<method name="find_similar_by_url">
		<input>story_url</input>
		<query line="https://github.com/jcs/lobsters/blob/master/app/models/story.rb#L105">
			<text>
			SELECT  `stories`.* FROM `stories`  WHERE `stories`.`url` IN ('http://beastie.pl/deweloperzy-openbsd-dmitrij-d-czarkoff/') AND `stories`.`is_expired` = 0  ORDER BY id DESC LIMIT 1
			</text>
			<input>story_url</input>
			<table>storeis</table>
			<operation>SELECT</operation>
		</query>
	</method>
	<method name="check_tags">
		<query line="https://github.com/jcs/lobsters/blob/master/app/models/story.rb#L232">
			<text>
			SELECT  1 AS one FROM `tags` INNER JOIN `taggings` ON `tags`.`id` = `taggings`.`tag_id` WHERE `taggings`.`story_id` = NULL AND `tags`.`tag` = 'test' LIMIT 1
			SELECT  `tags`.* FROM `tags`  WHERE `tags`.`inactive` = 0 AND `tags`.`tag` = 'test'  ORDER BY `tags`.`id` ASC LIMIT 1
			</text>
			<table>tags</table>
			<table>taggins</table>
			<param>story_tags_a</param>
			<operation>INNER JOIN</operation>
		</query>
	</method>
	<method name="valid">
		<input>short_id</input>
		<input>story_tags_a</input>
		<input>story_url</input>
		<call class="story" class_type="model" function_name="new_record">
			<feed>short_id</feed>
		</call>
		<call class="story" class_type="model" function_name="find_similar_by_url">
			<feed>story_url</feed>
		</call>
		<call class="story" class_type="model" function_name="check_tags">
			<feed>story_tags_a</feed>
		</call>
	</method>
	<method name="mark_submitter">
		<query>
			<text>
			INSERT INTO keystores (`key`, `value`) VALUES ('user:1:stories_submitted', 1) ON DUPLICATE KEY UPDATE `value` = `value` + 1
			</text>
			<input>user_id</input>
		</query>
	</method>
	<method name="record_initial_upvote">
		<call class="vote" class_type="model" function_name="vote_thusly_on_story_or_comment_for_user_because">
			<feed>user_id</feed>
			<feed>short_id</feed>
			<condition>vote.new_record</condition>
		</call>
	</method>
	<method name="save">
		<input>short_id</input>
		<input>story_title</input>
		<input>upvotes</input>
		<input>story_url</input>
		<input>user_id</input>
		<table>stories</table>
		<query>
			<text>
			INSERT INTO `stories` (`created_at`, `description`, `hotness`, `markeddown_description`, `short_id`, `title`, `upvotes`, `url`, `user_id`) VALUES ('2015-10-22 22:25:43', 'text in openBSD', -16731.2355632, 'text in openBSD\n', 'rm0awm', 'openBSD', 1, 'http://beastie.pl/deweloperzy-openbsd-dmitrij-d-czarkoff/', 1)	
			</text>
			<input>short_id</input>
			<input>story_title</input>
			<input>upvotes</input>
			<input>story_url</input>
			<input>user_id</input>
			<return>story_id</return>
			<table>stories</table>
			<operation>INSERT</operation>
		</query>
		<query>
			<text>
			INSERT INTO `taggings` (`story_id`, `tag_id`) VALUES (4, 1)
			</text>
			<input>story_id</input>
			<input>tag_id</input>
			<table>taggings</table>
			<operation>INSERT</operation>
		</query>
		<call class="story" class_type="model" function_name="assign_initial_hotness">
			<feed>story_id</feed>
			<feed>user_id</feed>
		</call>
		<call class="story" class_type="model" function_name="mark_submitter">
			<feed>user_id</feed>
		</call>
		<call class="story" class_type="model" function_name="record_initial_upvote">
			<feed>short_id</feed>
			<feed>user_id</feed>
		</call>
	</method>
	<method name="is_hidden_by_user">
		<input>story_id</input>
		<input>user_id</input>
		<query line="https://github.com/jcs/lobsters/blob/master/app/models/story.rb#L361">
			<text>
			SELECT  `hidden_stories`.* FROM `hidden_stories`  WHERE `hidden_stories`.`user_id` = 1 AND `hidden_stories`.`story_id` = 4  ORDER BY `hidden_stories`.`id` ASC LIMIT 1
			</text>
			<input>story_id</input>
			<input>user_id</input>
			<table>hidden_stories</table>
			<operation>SELECT</operation>
		</query>
		<call class="vote" class_type="model" function_name="comment_votes_by_user_for_story_hash">
			<feed>story_id</feed>
			<feed>user_id</feed>
		</call>
	</method>
</model>

