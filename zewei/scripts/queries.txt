keyword: from
spina\app\controllers\spina\application_controller.rb line 3: protect_from_forgery with: :exception
keyword: where
spina\app\controllers\spina\application_controller.rb line 19: @current_user ||= User.where(id: session[:user_id]).first if session[:user_id]
keyword: find
spina\app\controllers\spina\pages_controller.rb line 26: @page ||= (action_name == 'homepage') ? Page.find_by(name: 'homepage') : Page.find(params[:id])
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 10: add_breadcrumb I18n.t('spina.preferences.account'), spina.edit_admin_account_path
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 22: add_breadcrumb I18n.t('spina.preferences.analytics'), spina.analytics_admin_account_path
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 26: add_breadcrumb I18n.t('spina.preferences.social_media'), spina.social_admin_account_path
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 30: add_breadcrumb I18n.t('spina.preferences.aviary'), spina.aviary_admin_account_path
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 34: add_breadcrumb I18n.t('spina.preferences.style'), spina.style_admin_account_path
keyword: references
spina\app\controllers\spina\admin\accounts_controller.rb line 43: :postal_code, :preferences, :google_analytics, 
keyword: where
spina\app\controllers\spina\admin\admin_controller.rb line 26: @current_user ||= User.where(id: session[:user_id]).first if session[:user_id]
keyword: find
spina\app\controllers\spina\admin\attachments_controller.rb line 21: @attachment = Attachment.find(params[:id])
keyword: select
spina\app\controllers\spina\admin\attachments_controller.rb line 26: def select
keyword: find
spina\app\controllers\spina\admin\attachments_controller.rb line 32: @attachment = Attachment.find(params[:attachment_id])
keyword: select
spina\app\controllers\spina\admin\attachments_controller.rb line 35: def select_collection
keyword: find
spina\app\controllers\spina\admin\attachments_controller.rb line 41: @attachments = Attachment.find(params[:attachment_ids])
keyword: find
spina\app\controllers\spina\admin\inquiries_controller.rb line 10: @inquiry = Inquiry.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\inquiries_controller.rb line 16: @inquiry = Inquiry.find(params[:id])
keyword: order
spina\app\controllers\spina\admin\inquiries_controller.rb line 35: @inquiries = Inquiry.spam.order('created_at DESC')
keyword: find
spina\app\controllers\spina\admin\inquiries_controller.rb line 39: @inquiry = Inquiry.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\inquiries_controller.rb line 45: @inquiry = Inquiry.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\inquiries_controller.rb line 51: @inquiry = Inquiry.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\pages_controller.rb line 37: @page = Page.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\pages_controller.rb line 43: @page = Page.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\pages_controller.rb line 72: @page = Page.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 21: @photo = Photo.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 27: @photo = Photo.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 33: @photo = Photo.find(params[:id])
keyword: select
spina\app\controllers\spina\admin\photos_controller.rb line 36: def photo_select
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 39: @selected_photo = Photo.find(params[:selected_photo_id]) if params[:selected_photo_id]
keyword: select
spina\app\controllers\spina\admin\photos_controller.rb line 39: @selected_photo = Photo.find(params[:selected_photo_id]) if params[:selected_photo_id]
keyword: select
spina\app\controllers\spina\admin\photos_controller.rb line 42: def photo_collection_select
keyword: none
spina\app\controllers\spina\admin\photos_controller.rb line 45: @selected_photos = params[:selected_photo_ids] ? Photo.where(id: params[:selected_photo_ids]) : Photo.none
keyword: select
spina\app\controllers\spina\admin\photos_controller.rb line 45: @selected_photos = params[:selected_photo_ids] ? Photo.where(id: params[:selected_photo_ids]) : Photo.none
keyword: where
spina\app\controllers\spina\admin\photos_controller.rb line 45: @selected_photos = params[:selected_photo_ids] ? Photo.where(id: params[:selected_photo_ids]) : Photo.none
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 49: @photo = Photo.find(params[:photo_id]) if params[:photo_id].present?
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 53: @photos = Photo.find(params[:photo_ids]) if params[:photo_ids].present?
keyword: find
spina\app\controllers\spina\admin\photos_controller.rb line 57: @photo = Photo.find(params[:photo_id])
keyword: select
spina\app\controllers\spina\admin\photos_controller.rb line 60: def wysihtml5_select
keyword: where
spina\app\controllers\spina\admin\sessions_controller.rb line 13: user = User.where(email: params[:email]).first
keyword: find
spina\app\controllers\spina\admin\users_controller.rb line 31: @user = User.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\users_controller.rb line 36: @user = User.find(params[:id])
keyword: find
spina\app\controllers\spina\admin\users_controller.rb line 47: @user = User.find(params[:id])
keyword: references
spina\app\controllers\spina\admin\users_controller.rb line 55: add_breadcrumb I18n.t('spina.preferences.users'), spina.admin_users_path
keyword: lock
spina\app\helpers\spina\application_helper.rb line 11: fenced_code_blocks: true,
keyword: order
spina\app\helpers\spina\application_helper.rb line 18: html.gsub!(/\[vimeo\s+(\d*)\]/, '<figure class="video"><iframe src="http://player.vimeo.com/video/\1?portrait=0&title=0&byline=0" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></figure>')
keyword: lock
spina\app\helpers\spina\admin\pages_helper.rb line 4: def link_to_add_fields(f, association, &block)
keyword: lock
spina\app\helpers\spina\admin\pages_helper.rb line 12: block.yield
keyword: from
spina\app\mailers\spina\inquiry_mailer.rb line 13: from: "\"#{@inquiry.name}\" <#{@inquiry.email}>",
keyword: references
spina\app\models\spina\account.rb line 3: serialize :preferences
keyword: where
spina\app\models\spina\account.rb line 21: layout_part = layout_parts.where(name: layout_part).first
keyword: find
spina\app\models\spina\account.rb line 33: find_or_create_custom_pages(theme)
keyword: find
spina\app\models\spina\account.rb line 38: def find_or_create_custom_pages(theme)
keyword: where
spina\app\models\spina\account.rb line 40: Page.where(name: page[:name], deletable: false).first_or_create(title: page[:title], view_template: page[:view_template]).activate!
keyword: where
spina\app\models\spina\account.rb line 45: Page.where.not(view_template: theme.config.view_templates.map{|t|t[0]}).each &:deactivate!
keyword: where
spina\app\models\spina\account.rb line 49: Page.where(view_template: theme.config.view_templates.map{|t|t[0]}).each &:activate!
keyword: references
spina\app\models\spina\account.rb line 56: (self.preferences || {})[:#{method_name}]
keyword: references
spina\app\models\spina\account.rb line 60: self.preferences ||= {}
keyword: references
spina\app\models\spina\account.rb line 61: self.preferences[:#{method_name}] = value
keyword: order
spina\app\models\spina\attachment.rb line 9: scope :sorted, -> { order('created_at DESC') }
keyword: where
spina\app\models\spina\attachment.rb line 10: scope :file_attached, -> { where('file IS NOT NULL') }
keyword: where
spina\app\models\spina\inquiry.rb line 19: scope :ham, -> { where(spam: [false, nil]) }
keyword: where
spina\app\models\spina\inquiry.rb line 20: scope :spam, -> { where(spam: true)}
keyword: where
spina\app\models\spina\inquiry.rb line 21: scope :new_messages, -> { ham.where(archived: false) }
keyword: order
spina\app\models\spina\inquiry.rb line 22: scope :sorted, -> { ham.order("created_at DESC") }
keyword: uniq
spina\app\models\spina\layout_part.rb line 12: validates_uniqueness_of :name, scope: :account_id
keyword: order
spina\app\models\spina\layout_part.rb line 14: scope :sorted, -> { order(:position) }
keyword: find
spina\app\models\spina\page.rb line 8: friendly_id :slug_candidates, use: [:slugged, :finders]
keyword: order
spina\app\models\spina\page.rb line 20: scope :sorted, -> { order('position') }
keyword: where
spina\app\models\spina\page.rb line 21: scope :custom_pages, -> { where(deletable: false) }
keyword: where
spina\app\models\spina\page.rb line 22: scope :live, -> { where(draft: false, active: true) }
keyword: where
spina\app\models\spina\page.rb line 23: scope :in_menu, -> { where(show_in_menu: true) }
keyword: where
spina\app\models\spina\page.rb line 24: scope :active, -> { where(active: true) }
keyword: where
spina\app\models\spina\page.rb line 69: page_part = page_parts.where(name: page_part).first
keyword: where
spina\app\models\spina\page.rb line 78: self.siblings.where('position < ?', self.position).sorted.last
keyword: where
spina\app\models\spina\page.rb line 82: self.siblings.where('position > ?', self.position).sorted.first
keyword: uniq
spina\app\models\spina\page_part.rb line 12: validates_uniqueness_of :name, scope: :page_id
keyword: order
spina\app\models\spina\page_part.rb line 14: scope :sorted, -> { order(:position) }
keyword: where
spina\app\models\spina\partable.rb line 4: part = parts.where(name: part[:name]).first || parts.build(part)
keyword: order
spina\app\models\spina\photo.rb line 10: scope :sorted, -> { order('created_at DESC') }
keyword: order
spina\app\models\spina\photo.rb line 11: scope :sorted_by_photo_collection, -> { order('position') }
keyword: order
spina\app\models\spina\structure_item.rb line 6: scope :sorted_by_structure, -> { order('position') }
keyword: where
spina\app\models\spina\structure_item.rb line 11: structure_part = structure_parts.where(name: structure_part).first
keyword: uniq
spina\app\models\spina\structure_part.rb line 9: validates_uniqueness_of :name, scope: :structure_item_id
keyword: order
spina\app\models\spina\structure_part.rb line 11: scope :sorted, -> { order(:position) }
keyword: uniq
spina\app\models\spina\user.rb line 7: validate :uniqueness_of_email
keyword: uniq
spina\app\models\spina\user.rb line 25: def uniqueness_of_email
keyword: where
spina\app\models\spina\user.rb line 26: if email_changed? && User.where(email: email).exists?
keyword: select
spina\app\presenters\spina\pages\menu_presenter.rb line 13: config_accessor :list_tag, :list_wrapper, :list_item_tag, :list_item_css, :selected_css, :current_css, :first_css, :last_css
keyword: select
spina\app\presenters\spina\pages\menu_presenter.rb line 19: self.selected_css = :selected
keyword: select
spina\app\presenters\spina\pages\menu_presenter.rb line 31: @selected_menu_items = [@current_menu_item] + @current_menu_item.try(:ancestors)
keyword: select
spina\app\presenters\spina\pages\menu_presenter.rb line 72: css << selected_css if (@selected_menu_items.present? && @selected_menu_items.include?(menu_item) )
keyword: references
spina\app\uploaders\spina\default_store_uploader.rb line 11: raise NotImplementedError, "Please set your storage preferences in config/initializers/spina.rb"
keyword: select
spina\config\routes.rb line 39: get 'select/:page_part_id' => 'attachments#select', as: :select
keyword: select
spina\config\routes.rb line 41: get 'select_collection/:page_part_id' => 'attachments#select_collection', as: :select_collection
keyword: select
spina\config\routes.rb line 48: get 'wysihtml5_select/:object_id' => 'photos#wysihtml5_select', as: :wysihtml5_select
keyword: select
spina\config\routes.rb line 50: get 'photo_select/:page_part_id' => 'photos#photo_select', as: :photo_select
keyword: select
spina\config\routes.rb line 51: get 'photo_collection_select/:page_part_id' => 'photos#photo_collection_select', as: :photo_collection_select
keyword: from
spina\db\seeds.rb line 1: puts "Seeding #{__FILE__} from Spina::Engine"
keyword: references
spina\db\migrate\20150507135428_create_spina_tables.rb line 10: t.text     "preferences"
keyword: uniq
spina\lib\spina\engine.rb line 24: [Rails.root].flatten.map { |p| Dir[p.join('app', 'decorators', '**', '*_decorator.rb')]}.flatten.uniq.each do |decorator|
keyword: find
spina\lib\spina\engine.rb line 69: @@themes.find { |theme| theme.name == theme_name }
keyword: find
spina\lib\spina\engine.rb line 81: @@plugins.find { |plugin| plugin.name == plugin_name }
keyword: find
spina\lib\spina\engine.rb line 87: @@plugins.find_all { |plugin| plugin.config.plugin_type == 'website_resource' }
keyword: from
spina\test\dummy\app\controllers\application_controller.rb line 2: protect_from_forgery
keyword: eager_load
spina\test\dummy\config\environments\development.rb line 9: config.eager_load = false
keyword: eager_load
spina\test\dummy\config\environments\production.rb line 7: config.eager_load = true
keyword: eager_load
spina\test\dummy\config\environments\test.rb line 10: config.eager_load = false
keyword: order
spina\test\dummy\config\environments\test.rb line 37: config.active_support.test_order = :random
keyword: references
spina\test\dummy\db\schema.rb line 26: t.text     "preferences"
