app/new_controllers/transactions_controller.rb:        render_free(listing_model: listing_model, author_model: author_model, community: @current_community, params: transaction_params)
app/new_controllers/transactions_controller.rb:      render :json => resp
app/new_controllers/transactions_controller.rb:  def render_free(listing_model:, author_model:, community:, params:)
app/new_controllers/accept_preauthorized_conversations_controller.rb:      render_braintree_form("accept")
app/new_controllers/accept_preauthorized_conversations_controller.rb:      render_paypal_form("accept")
app/new_controllers/accept_preauthorized_conversations_controller.rb: render layout: "layouts/lightbox", locals: { id: "paypal_fee_info_content"} do 
app/new_controllers/accept_preauthorized_conversations_controller.rb:      render_braintree_form("reject")
app/new_controllers/accept_preauthorized_conversations_controller.rb:      render_paypal_form("reject")
app/new_controllers/accept_preauthorized_conversations_controller.rb:  def render_paypal_form(preselected_action)
app/new_controllers/accept_preauthorized_conversations_controller.rb: render layout: "layouts/lightbox", locals: { id: "paypal_fee_info_content"} do 
app/new_controllers/accept_preauthorized_conversations_controller.rb:  def render_braintree_form(preselected_action)
app/new_controllers/accept_preauthorized_conversations_controller.rb: render layout: "layouts/lightbox", locals: { id: "paypal_fee_info_content"} do 
app/new_controllers/domain_validation_controller.rb:      render text: @current_community.dv_test_file, content_type: "text/plain"
app/new_controllers/free_transactions_controller.rb:    render_contact_form
app/new_controllers/free_transactions_controller.rb:    render_contact_form
app/new_controllers/free_transactions_controller.rb:  def render_contact_form
app/new_controllers/errors_controller.rb:    render status: 404, locals: { status: 404, title: "Marketplace not found", host: request.host }
app/new_controllers/admin/categories_controller.rb:    render locals: { shapes: shapes, selected_shape_ids: selected_shape_ids }
app/new_controllers/admin/categories_controller.rb:    render locals: { shapes: shapes, selected_shape_ids: selected_shape_ids }
app/new_controllers/admin/categories_controller.rb:    render nothing: true, status: 200
app/new_controllers/admin/custom_fields_controller.rb:    render locals: { show_price_filter: price_in_use }
app/new_controllers/admin/custom_fields_controller.rb:    render nothing: true, status: 200
app/new_controllers/admin/paypal_preferences_controller.rb:      render json: {redirect_url: permissions_url}
app/new_controllers/admin/plans_controller.rb:      render_not_found!(error_msg)
app/new_controllers/admin/communities_controller.rb:    render locals: {paypal_enabled: PaypalHelper.paypal_active?(@current_community.id)}
app/new_controllers/admin/communities_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/admin/communities_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/admin/communities_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/admin/communities_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/admin/communities_controller.rb:      render json: HashUtils.camelize_keys(address.merge(translated_verification_sent_time_ago: time_ago(address[:verification_requested_at])))
app/new_controllers/admin/communities_controller.rb:      render json: {error: res.error_msg }, status: 500
app/new_controllers/admin/communities_controller.rb:    render json: {}, status: 200
app/new_controllers/admin/communities_controller.rb:      return render :payment_gateways
app/new_controllers/admin/communities_controller.rb:      render action
app/new_controllers/admin/community_memberships_controller.rb:      render nothing: true, status: 405
app/new_controllers/admin/community_memberships_controller.rb:      render nothing: true, status: 200
app/new_controllers/admin/community_memberships_controller.rb:    render nothing: true, status: 200
app/new_controllers/admin/listing_shapes_controller.rb:    render_new_form(template, process_summary, available_locales())
app/new_controllers/admin/listing_shapes_controller.rb:    render_edit_form(params[:url_name], shape, process_summary, available_locales())
app/new_controllers/admin/listing_shapes_controller.rb:      render_new_form(shape, process_summary, available_locales())
app/new_controllers/admin/listing_shapes_controller.rb:      return render_edit_form(params[:url_name], shape, process_summary, available_locales())
app/new_controllers/admin/listing_shapes_controller.rb:    render nothing: true, status: 200
app/new_controllers/admin/listing_shapes_controller.rb:  def render_new_form(form, process_summary, available_locs)
app/new_controllers/admin/listing_shapes_controller.rb:  def render_edit_form(url_name, form, process_summary, available_locs)
app/new_controllers/admin/listing_shapes_controller.rb:  # - Shape hash to renderable format
app/new_controllers/admin/community_customizations_controller.rb:    render locals: {
app/new_controllers/admin/community_customizations_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/admin/community_customizations_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/settings_controller.rb:    render locals: {marketplaces: marketplaces, has_unfinished: has_unfinished}
app/new_controllers/listing_images_controller.rb:      render nothing: true, status: 204
app/new_controllers/listing_images_controller.rb:      render json: {:errors => listing_image.errors.full_messages}, status: 400
app/new_controllers/listing_images_controller.rb:      render json: {:errors => "No image URL provided"}, status: 400, content_type: 'text/plain'
app/new_controllers/listing_images_controller.rb:      render nothing: true, status: 404
app/new_controllers/listing_images_controller.rb:      render json: ListingImageJSAdapter.new(listing_image).to_json, status: 200
app/new_controllers/listing_images_controller.rb:      render json: ListingImageJSAdapter.new(listing_image).to_json, status: 202, content_type: 'text/plain' # Browsers without XHR fileupload support do not support other dataTypes than text
app/new_controllers/listing_images_controller.rb:      render json: {:errors => listing_image.errors.full_messages}, status: 400, content_type: 'text/plain'
app/new_controllers/inboxes_controller.rb:      render locals: {
app/new_controllers/confirm_conversations_controller.rb:    render(locals: {
app/new_controllers/listings_controller.rb:        render layout: false,
app/new_controllers/listings_controller.rb:    render locals: {
app/new_controllers/listings_controller.rb: render :partial => "listings/custom_field_partials/#{question_type}", :locals => { :custom_field_value => custom_field_value } 
app/new_controllers/listings_controller.rb:    render locals: {
app/new_controllers/listings_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/listings_controller.rb: render :partial => "listings/help_texts/#{field}" 
app/new_controllers/listings_controller.rb:        render :layout => false, locals: {payment_gateway: payment_gateway, process: process, country_code: community_country_code }
app/new_controllers/listings_controller.rb:      render :nothing => true, :status => 200
app/new_controllers/listings_controller.rb:      render :nothing => true, :status => 500
app/new_controllers/listings_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/listings_controller.rb: render :partial => "listings/help_texts/#{field}" 
app/new_controllers/plans_controller.rb:      render json: response, status: 200
app/new_controllers/plans_controller.rb:        render json: {error: :json_parser_error}, status: 400
app/new_controllers/plans_controller.rb:        render json: {error: :unauthorized}, status: 401
app/new_controllers/plans_controller.rb:        render json: {error: :unknown_error}, status: 500
app/new_controllers/plans_controller.rb:      render json: return_value
app/new_controllers/plans_controller.rb:        render json: {error: :unauthorized}, status: 401
app/new_controllers/plans_controller.rb:        render json: {error: :unknown_error}, status: 500
app/new_controllers/plans_controller.rb:    render_not_found! unless plans_api.active?
app/new_controllers/braintree_webhooks_controller.rb:      render :nothing => true, :status => 400 and return
app/new_controllers/braintree_webhooks_controller.rb:      render :nothing => true, :status => 400 and return
app/new_controllers/braintree_webhooks_controller.rb:    render :text => challenge_response, :status => 200
app/new_controllers/braintree_webhooks_controller.rb:      render :nothing => true, :status => 400 and return
app/new_controllers/braintree_webhooks_controller.rb:    render :nothing => true
app/new_controllers/comments_controller.rb:      format.js { render :layout => false }
app/new_controllers/comments_controller.rb:        format.js { render :layout => false }
app/new_controllers/int_api/marketplaces_controller.rb:    return render status: 400, json: form.errors unless form.valid?
app/new_controllers/int_api/marketplaces_controller.rb:    render status: 201, json: {"marketplace_url" => url}
app/new_controllers/int_api/marketplaces_controller.rb:    render :json => ["email parameter missing"], :status => 400 and return if email.blank?
app/new_controllers/int_api/marketplaces_controller.rb:    render :json => {:email => email, :available => (Email.email_available?(email))} and return
app/new_controllers/messages_controller.rb:      format.js { render :layout => false, locals: { message: message } }
app/new_controllers/communities_controller.rb:    render_form
app/new_controllers/communities_controller.rb:      render_form(errors: form.errors.full_messages)
app/new_controllers/communities_controller.rb:  def render_form(errors: nil)
app/new_controllers/paypal_accounts_controller.rb:    render(locals: {
app/new_controllers/paypal_accounts_controller.rb: render layout: "layouts/lightbox", locals: { id: "paypal_fee_info_content"} do 
app/new_controllers/paypal_accounts_controller.rb:      render json: {redirect_url: permissions_url}
app/new_controllers/paypal_accounts_controller.rb:        render json: {redirect_url: billing_agreement_url}
app/new_controllers/application_controller.rb:  def render_not_found!(msg = "Not found")
app/new_controllers/terms_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/terms_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/terms_controller.rb:        render :file => "public/404.html", :layout => false and return
app/new_controllers/infos_controller.rb: render :layout => "layouts/mercury_editable_page", :locals => { :content_type => "about_page_content" } do 
app/new_controllers/infos_controller.rb: content = render :partial => "default_about_page" 
app/new_controllers/infos_controller.rb:    render locals: { how_to_use_content: content }
app/new_controllers/infos_controller.rb:  render :layout => "layouts/lightbox", locals: {} do 
app/new_controllers/infos_controller.rb: render :partial => "payments/#{gateway_name}/terms" 
app/new_controllers/infos_controller.rb: content += render :layout => "layouts/mercury_editable_page", :locals => { :content_type => "terms_page_content" } do 
app/new_controllers/infos_controller.rb: render :file => "infos/localized_terms/terms.#{I18n.locale}" 
app/new_controllers/infos_controller.rb: render :file => "infos/localized_terms/terms.en" 
app/new_controllers/infos_controller.rb: render :layout => "layouts/mercury_editable_page", :locals => { :content_type => "privacy_page_content" } do 
app/new_controllers/infos_controller.rb: content = render :file => "infos/localized_privacy_policy/privacy_policy.#{I18n.locale}" 
app/new_controllers/infos_controller.rb: content = render :file => "infos/localized_privacy_policy/privacy_policy.en" 
app/new_controllers/feedbacks_controller.rb:    render_form
app/new_controllers/feedbacks_controller.rb:      return render_form(feedback_form)
app/new_controllers/feedbacks_controller.rb:  def render_form(form = nil)
app/new_controllers/feedbacks_controller.rb:      return render_form(feedback_form)
app/new_controllers/braintree_accounts_controller.rb:    render locals: { form_action: @create_path }
app/new_controllers/braintree_accounts_controller.rb:    render locals: { form_action: @create_path }
app/new_controllers/conversations_controller.rb:    render locals: {
app/new_controllers/paypal_service/checkout_orders_controller.rb:      render :nothing => true, :status => 400 and return
app/new_controllers/community_memberships_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/community_memberships_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/community_memberships_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/community_memberships_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/community_memberships_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/community_memberships_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/testimonials_controller.rb:    render(locals: { transaction: transaction, testimonial: testimonial})
app/new_controllers/testimonials_controller.rb:      format.js { render :layout => false, locals: {is_author: is_author} }
app/new_controllers/accept_conversations_controller.rb:    render(locals: { path_to_payment_settings: path_to_payment_settings, message_form: MessageForm.new })
app/new_controllers/accept_conversations_controller.rb: render :partial => @current_community.payment_gateway.form_template_dir + "/form" 
app/new_controllers/mercury_update_controller.rb:    render text: ""
app/new_controllers/people_controller.rb:    render locals: { listings: listings }
app/new_controllers/people_controller.rb:  render :layout => "layouts/lightbox", locals: {id: field, field: field} do 
app/new_controllers/people_controller.rb: render :partial => "people/help_texts/#{field}" 
app/new_controllers/people_controller.rb:      format.json { render :json => Person.username_available?(params[:person][:username]) }
app/new_controllers/people_controller.rb:        format.json { render :json => available }
app/new_controllers/people_controller.rb:      format.json { render :json => Invitation.code_usable?(params[:invitation_code], @current_community) }
app/new_controllers/people_controller.rb:      render :json => "success" and return
app/new_controllers/people_controller.rb:      render :json => "failed" and return
app/new_controllers/people_controller.rb:      format.json { render :json => available }
app/new_controllers/people_controller.rb:        render :layout => false
app/new_controllers/paypal_ipn_controller.rb:    render nothing: true
app/new_controllers/checkout_accounts_controller.rb:    render(locals: { checkout_account: CheckoutAccountForm.new({ phone_number: @current_user.phone_number }),
app/new_controllers/checkout_accounts_controller.rb:    render(locals: {person: @current_user})
app/new_controllers/braintree_payments_controller.rb:    render locals: {braintree_form: Form::Braintree.new}
app/new_controllers/invitations_controller.rb:    render locals: { invitation_limit: invitation_limit, has_admin_rights: @current_user.has_admin_rights_in?(@current_community) }
app/new_controllers/amazon_bounces_controller.rb:      render :nothing => true and return
app/new_controllers/amazon_bounces_controller.rb:    render :nothing => true
app/new_controllers/amazon_bounces_controller.rb:      return render :nothing => true
app/new_controllers/preauthorize_transactions_controller.rb: render layout: "layouts/lightbox", locals: { id: "transaction-agreement-content"} do 
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, t("error_messages.transaction_agreement.required_error"), action: :initiate)
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, preauthorize_form.errors.full_messages.join(", "), action: :initiate)
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, "Delivery method is invalid.", action: :initiate)
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, t("error_messages.paypal.generic_error"), action: :initiate) unless transaction_response[:success]
app/new_controllers/preauthorize_transactions_controller.rb:      render json: {
app/new_controllers/preauthorize_transactions_controller.rb:    render view, locals: {
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?,
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, "Delivery method is invalid.", action: :booked)
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?,
app/new_controllers/preauthorize_transactions_controller.rb:      return render_error_response(request.xhr?, error, { action: :book, start_on: TransactionViewUtils.stringify_booking_date(start_on), end_on: TransactionViewUtils.stringify_booking_date(end_on) })
app/new_controllers/preauthorize_transactions_controller.rb:        return render json: {
app/new_controllers/preauthorize_transactions_controller.rb: render layout: "layouts/lightbox", locals: { id: "transaction-agreement-content"} do 
app/new_controllers/preauthorize_transactions_controller.rb:  def render_error_response(isXhr, error_msg, redirect_params)
app/new_controllers/preauthorize_transactions_controller.rb:      render json: { error_msg: error_msg }
app/new_controllers/payments_controller.rb: render :partial => @current_community.payment_gateway.form_template_dir + "/show" 
app/new_controllers/sessions_controller.rb:    render :text => "Setup complete.", :status => 404 #This notifies the ominauth to continue
app/new_controllers/homepage_controller.rb:        render nothing: true, status: 500
app/new_controllers/homepage_controller.rb:        render locals: {
app/new_controllers/homepage_controller.rb:        render status: 500, locals: {
